{"file_contents":{"client/src/components/PracticeMode.tsx":{"content":"import { Bot, Book, Zap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport VocabularyBadge from \"@/components/VocabularyBadge\";\n\ninterface VocabWord {\n  chinese: string;\n  pinyin: string;\n}\n\ninterface Topic {\n  id: string;\n  title: string;\n  difficulty: \"Beginner\" | \"Intermediate\" | \"Advanced\";\n  vocabulary: VocabWord[];\n}\n\ninterface PracticeModeProps {\n  topics?: Topic[];\n  onSelectTopic?: (topicId: string) => void;\n}\n\nexport default function PracticeMode({\n  topics = [\n    {\n      id: \"1\",\n      title: \"Travel & Tourism\",\n      difficulty: \"Intermediate\",\n      vocabulary: [\n        { chinese: \"旅行\", pinyin: \"lǚxíng\" },\n        { chinese: \"目的地\", pinyin: \"mùdìdì\" },\n        { chinese: \"探索\", pinyin: \"tànsuǒ\" },\n        { chinese: \"冒险\", pinyin: \"màoxiǎn\" },\n        { chinese: \"文化\", pinyin: \"wénhuà\" }\n      ]\n    },\n    {\n      id: \"2\",\n      title: \"Food & Dining\",\n      difficulty: \"Beginner\",\n      vocabulary: [\n        { chinese: \"美味\", pinyin: \"měiwèi\" },\n        { chinese: \"菜谱\", pinyin: \"càipǔ\" },\n        { chinese: \"餐厅\", pinyin: \"cāntīng\" },\n        { chinese: \"味道\", pinyin: \"wèidào\" },\n        { chinese: \"风味\", pinyin: \"fēngwèi\" }\n      ]\n    },\n    {\n      id: \"3\",\n      title: \"Business & Work\",\n      difficulty: \"Advanced\",\n      vocabulary: [\n        { chinese: \"同事\", pinyin: \"tóngshì\" },\n        { chinese: \"截止日期\", pinyin: \"jiézhǐ rìqī\" },\n        { chinese: \"项目\", pinyin: \"xiàngmù\" },\n        { chinese: \"会议\", pinyin: \"huìyì\" },\n        { chinese: \"策略\", pinyin: \"cèlüè\" }\n      ]\n    },\n    {\n      id: \"4\",\n      title: \"Family & Friends\",\n      difficulty: \"Beginner\",\n      vocabulary: [\n        { chinese: \"家庭\", pinyin: \"jiātíng\" },\n        { chinese: \"朋友\", pinyin: \"péngyou\" },\n        { chinese: \"关系\", pinyin: \"guānxi\" },\n        { chinese: \"一起\", pinyin: \"yìqǐ\" },\n        { chinese: \"庆祝\", pinyin: \"qìngzhù\" }\n      ]\n    },\n    {\n      id: \"5\",\n      title: \"Technology\",\n      difficulty: \"Intermediate\",\n      vocabulary: [\n        { chinese: \"设备\", pinyin: \"shèbèi\" },\n        { chinese: \"软件\", pinyin: \"ruǎnjiàn\" },\n        { chinese: \"创新\", pinyin: \"chuàngxīn\" },\n        { chinese: \"数字\", pinyin: \"shùzì\" },\n        { chinese: \"连接\", pinyin: \"liánjiē\" }\n      ]\n    },\n    {\n      id: \"6\",\n      title: \"Health & Wellness\",\n      difficulty: \"Intermediate\",\n      vocabulary: [\n        { chinese: \"锻炼\", pinyin: \"duànliàn\" },\n        { chinese: \"营养\", pinyin: \"yíngyǎng\" },\n        { chinese: \"健康\", pinyin: \"jiànkāng\" },\n        { chinese: \"养生\", pinyin: \"yǎngshēng\" },\n        { chinese: \"健身\", pinyin: \"jiànshēn\" }\n      ]\n    },\n  ],\n  onSelectTopic\n}: PracticeModeProps) {\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Beginner\": return \"text-success\";\n      case \"Intermediate\": return \"text-warning\";\n      case \"Advanced\": return \"text-destructive\";\n      default: return \"text-muted-foreground\";\n    }\n  };\n\n  const getDifficultyIcon = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Beginner\": return <Book className=\"w-4 h-4\" />;\n      case \"Intermediate\": return <Zap className=\"w-4 h-4\" />;\n      case \"Advanced\": return <Bot className=\"w-4 h-4\" />;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center gap-3 mb-2\">\n          <Bot className=\"w-8 h-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold\">Practice Mode</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Warm up with AI bots and learn new topics at your own pace\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {topics.map((topic) => (\n          <Card key={topic.id} className=\"border-card-border hover-elevate transition-all\" data-testid={`topic-card-${topic.id}`}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between gap-2 mb-2\">\n                <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                <Badge\n                  variant=\"outline\"\n                  className={`gap-1 ${getDifficultyColor(topic.difficulty)}`}\n                >\n                  {getDifficultyIcon(topic.difficulty)}\n                  {topic.difficulty}\n                </Badge>\n              </div>\n              <CardDescription>\n                Practice with {topic.vocabulary.length} target words\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex flex-wrap gap-1\">\n                {topic.vocabulary.slice(0, 3).map((word) => (\n                  <VocabularyBadge \n                    key={word.chinese} \n                    chinese={word.chinese} \n                    pinyin={word.pinyin}\n                    className=\"text-xs\"\n                  />\n                ))}\n                {topic.vocabulary.length > 3 && (\n                  <VocabularyBadge \n                    chinese={`+${topic.vocabulary.length - 3}更多`}\n                    pinyin=\"gèng duō\"\n                    className=\"text-xs\"\n                  />\n                )}\n              </div>\n              <Button\n                className=\"w-full\"\n                onClick={() => onSelectTopic?.(topic.id)}\n                data-testid={`button-start-${topic.id}`}\n              >\n                <Bot className=\"w-4 h-4 mr-2\" />\n                Start Practice\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5937},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: {\n      ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1403},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/examples/PracticeMode.tsx":{"content":"import PracticeMode from '../PracticeMode';\n\nexport default function PracticeModeExample() {\n  return (\n    <PracticeMode \n      onSelectTopic={(topicId) => console.log('Selected topic:', topicId)} \n    />\n  );\n}\n","size_bytes":213},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/Header.tsx":{"content":"import { Trophy, User, Target, LogOut, Menu, Languages, TrendingUp, Calendar, Crown, Medal, Users, Flame, Zap, Volume2, VolumeX, Eye, BarChart3, BookOpen, ChevronDown } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { formatDistanceToNow, endOfMonth, differenceInDays, differenceInHours, differenceInMinutes } from \"date-fns\";\nimport type { Match } from \"@shared/schema\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport MatchDetails from \"@/components/MatchDetails\";\nimport { getFluencyLevel } from \"@shared/fluencyLevels\";\n\ninterface LeaderboardEntry {\n  rank?: number;\n  username: string;\n  elo: number;\n  wins: number;\n  losses: number;\n  isCurrentUser?: boolean;\n}\n\ninterface MonthlyWinsLeaderboardEntry {\n  rank?: number;\n  username: string;\n  monthlyWins: number;\n  elo: number;\n  wins: number;\n  losses: number;\n  isCurrentUser?: boolean;\n}\n\ninterface HeaderProps {\n  username?: string;\n  elo?: number;\n  onNavigate?: (page: string) => void;\n  currentPage?: string;\n  isAuthenticated?: boolean;\n  profileImageUrl?: string | null;\n  currentLanguage?: string;\n  wins?: number;\n  losses?: number;\n  onLanguageChange?: (language: string) => void;\n  winStreak?: number;\n  bestWinStreak?: number;\n  dailyLoginStreak?: number;\n  bestDailyLoginStreak?: number;\n  isPremium?: boolean;\n  hideProfile?: boolean;\n  onHowToPlayOpen?: () => void;\n}\n\nexport default function Header({ \n  username = \"Player\", \n  elo = 1200, \n  onNavigate, \n  currentPage = \"duel\",\n  isAuthenticated = false,\n  profileImageUrl,\n  currentLanguage = \"Chinese\",\n  wins = 0,\n  losses = 0,\n  onLanguageChange,\n  winStreak = 0,\n  bestWinStreak = 0,\n  dailyLoginStreak = 0,\n  bestDailyLoginStreak = 0,\n  isPremium = false,\n  hideProfile = false,\n  onHowToPlayOpen\n}: HeaderProps) {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const fluencyLevel = getFluencyLevel(elo);\n  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);\n  const { setEnabled, isEnabled } = useSound();\n  const [soundEnabled, setSoundEnabled] = useState(isEnabled());\n  const [timeUntilReset, setTimeUntilReset] = useState('');\n  const [streakMultiplierOpen, setStreakMultiplierOpen] = useState(false);\n\n  const totalMatches = wins + losses;\n  const winRate = totalMatches > 0 ? Math.round((wins / totalMatches) * 100) : 0;\n\n  // Calculate time until end of month\n  useEffect(() => {\n    const updateCountdown = () => {\n      const now = new Date();\n      const monthEnd = endOfMonth(now);\n      const days = differenceInDays(monthEnd, now);\n      const hours = differenceInHours(monthEnd, now) % 24;\n      const minutes = differenceInMinutes(monthEnd, now) % 60;\n\n      if (days > 0) {\n        setTimeUntilReset(`Resets in ${days}d ${hours}h`);\n      } else if (hours > 0) {\n        setTimeUntilReset(`Resets in ${hours}h ${minutes}m`);\n      } else {\n        setTimeUntilReset(`Resets in ${minutes}m`);\n      }\n    };\n\n    updateCountdown();\n    const interval = setInterval(updateCountdown, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const toggleSound = () => {\n    const newState = !soundEnabled;\n    setSoundEnabled(newState);\n    setEnabled(newState);\n  };\n\n  // Fetch recent matches for authenticated users\n  const { data: matches } = useQuery<Match[]>({\n    queryKey: [`/api/user/matches?language=${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch skill progress for authenticated users\n  const { data: skillProgress } = useQuery<{\n    grammar: number;\n    fluency: number;\n    vocabulary: number;\n    naturalness: number;\n  }>({\n    queryKey: [`/api/user/skill-progress?language=${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch leaderboard data (Fluency Score)\n  const { data: leaderboardData, isLoading: isLoadingLeaderboard } = useQuery<LeaderboardEntry[]>({\n    queryKey: [`/api/leaderboard?language=${currentLanguage}`],\n    refetchOnWindowFocus: false,\n  });\n\n  const leaderboardEntries = leaderboardData?.map((entry, index) => ({\n    ...entry,\n    rank: index + 1,\n  })) || [];\n\n  // Fetch monthly wins leaderboard data\n  const { data: monthlyWinsData, isLoading: isLoadingMonthlyWins } = useQuery<MonthlyWinsLeaderboardEntry[]>({\n    queryKey: [`/api/leaderboard/monthly-wins?language=${currentLanguage}`],\n    refetchOnWindowFocus: false,\n  });\n\n  const monthlyWinsEntries = monthlyWinsData?.map((entry, index) => ({\n    ...entry,\n    rank: index + 1,\n  })) || [];\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Crown className=\"w-5 h-5 text-gold\" />;\n    if (rank === 2) return <Medal className=\"w-5 h-5 text-gray-400\" />;\n    if (rank === 3) return <Medal className=\"w-5 h-5 text-amber-600\" />;\n    return null;\n  };\n\n  return (\n    <>\n      <header className=\"fixed left-0 right-0 h-16 bg-card border-b border-card-border z-50\" style={{ top: 'env(safe-area-inset-top, 0px)' }}>\n        <div className=\"max-w-7xl mx-auto px-6 h-16 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setMobileMenuOpen(true)}\n              aria-label=\"Open menu\"\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n            <button \n              onClick={() => onNavigate?.(\"duel\")}\n              className=\"text-xl font-bold tracking-tight hover:opacity-80 transition-opacity cursor-pointer\"\n              data-testid=\"button-logo\"\n            >\n              Verbio\n            </button>\n          </div>\n\n        <div className=\"flex items-center gap-4\">\n          <Select value={currentLanguage} onValueChange={onLanguageChange}>\n            <SelectTrigger className=\"w-[120px] md:w-[140px] h-9\" data-testid=\"select-language-header\">\n              <Languages className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Chinese\" data-testid=\"option-chinese-header\">中文</SelectItem>\n              <SelectItem value=\"Spanish\" data-testid=\"option-spanish-header\">Español</SelectItem>\n              <SelectItem value=\"Italian\" data-testid=\"option-italian-header\">Italiano</SelectItem>\n            </SelectContent>\n          </Select>\n          {!hideProfile && (\n            <>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-profile-dropdown\">\n                    <div className=\"relative\">\n                      <Avatar className=\"w-8 h-8\">\n                        {profileImageUrl && <img src={profileImageUrl} alt={username} />}\n                        <AvatarFallback className=\"text-xs\">{username.slice(0, 2).toUpperCase()}</AvatarFallback>\n                      </Avatar>\n                      {isPremium && (\n                        <Crown className=\"w-4 h-4 text-yellow-500 absolute -top-1 -right-1\" data-testid=\"icon-premium-crown-avatar\" />\n                      )}\n                    </div>\n                  </Button>\n                </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <div className=\"px-2 py-1.5\">\n                <div className=\"flex items-center gap-2\">\n                  <p className=\"text-sm font-semibold\">{username}</p>\n                  {isPremium && (\n                    <Badge \n                      variant=\"default\" \n                      className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white text-[10px] px-1.5 py-0 h-4 flex items-center gap-0.5 font-bold\"\n                      data-testid=\"badge-premium-dropdown\"\n                    >\n                      <Crown className=\"w-3 h-3\" />\n                      PRO\n                    </Badge>\n                  )}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">{currentLanguage}</p>\n                <div className=\"flex items-center gap-1.5 mt-1\">\n                  <Trophy className=\"w-3.5 h-3.5 text-muted-foreground\" />\n                  <p className=\"text-xs font-mono font-semibold\" data-testid=\"text-fluency-score-dropdown\">{elo} Fluency Score</p>\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem\n                onClick={() => onNavigate?.(\"analytics\")}\n                data-testid=\"menu-analytics\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                className=\"text-destructive focus:text-destructive\"\n                onClick={() => {\n                  localStorage.clear();\n                  sessionStorage.clear();\n                  window.location.href = \"/api/logout\";\n                }}\n                data-testid=\"menu-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Sign Out\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          </>\n          )}\n        </div>\n      </div>\n    </header>\n\n      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n        <SheetContent side=\"left\" className=\"w-[300px] sm:w-[400px] overflow-y-auto\">\n          <SheetHeader>\n            <SheetTitle>Menu</SheetTitle>\n          </SheetHeader>\n          \n          <Tabs defaultValue=\"profile\" className=\"mt-6\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n              <TabsTrigger value=\"leaderboard\" data-testid=\"tab-leaderboard\">Leaderboard</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"profile\" className=\"mt-4 space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"w-12 h-12\">\n                    {profileImageUrl && <img src={profileImageUrl} alt={username} />}\n                    <AvatarFallback>{username.slice(0, 2).toUpperCase()}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <p className=\"font-semibold\">{username}</p>\n                      {isPremium && (\n                        <Badge \n                          variant=\"default\" \n                          className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white text-[10px] px-1.5 py-0 h-4 flex items-center gap-0.5 font-bold\"\n                          data-testid=\"badge-premium-mobile\"\n                        >\n                          <Crown className=\"w-3 h-3\" />\n                          PRO\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{currentLanguage}</p>\n                    <div className=\"bg-primary/5 rounded-md p-2.5 border border-primary/10 mt-1\" data-testid=\"card-cefr-info-mobile\">\n                      <p className=\"text-xs font-semibold text-primary mb-1\">CEFR {fluencyLevel.level}: {fluencyLevel.name}</p>\n                      <p className=\"text-[11px] text-muted-foreground leading-relaxed\">{fluencyLevel.description}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <Card className=\"border-card-border\">\n                    <CardContent className=\"pt-3 pb-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-8 h-8 rounded-md bg-primary/10 flex items-center justify-center\">\n                          <Trophy className=\"w-4 h-4 text-primary\" />\n                        </div>\n                        <div>\n                          <div className=\"text-lg font-bold font-mono\">{wins}</div>\n                          <div className=\"text-xs text-muted-foreground\">Wins</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-card-border\">\n                    <CardContent className=\"pt-3 pb-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-8 h-8 rounded-md bg-destructive/10 flex items-center justify-center\">\n                          <Target className=\"w-4 h-4 text-destructive\" />\n                        </div>\n                        <div>\n                          <div className=\"text-lg font-bold font-mono\">{losses}</div>\n                          <div className=\"text-xs text-muted-foreground\">Losses</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-card-border\">\n                    <CardContent className=\"pt-3 pb-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-8 h-8 rounded-md bg-orange-500/10 flex items-center justify-center\">\n                          <Flame className=\"w-4 h-4 text-orange-500\" />\n                        </div>\n                        <div>\n                          <div className=\"text-lg font-bold font-mono\" data-testid=\"text-win-streak\">{winStreak}</div>\n                          <div className=\"text-xs text-muted-foreground\">Win Streak</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-card-border\">\n                    <CardContent className=\"pt-3 pb-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-8 h-8 rounded-md bg-blue-500/10 flex items-center justify-center\">\n                          <Zap className=\"w-4 h-4 text-blue-500\" />\n                        </div>\n                        <div>\n                          <div className=\"text-lg font-bold font-mono\" data-testid=\"text-daily-streak\">{dailyLoginStreak}</div>\n                          <div className=\"text-xs text-muted-foreground\">Day Streak</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Streak Multiplier Info */}\n                <Collapsible open={streakMultiplierOpen} onOpenChange={setStreakMultiplierOpen}>\n                  <Card className=\"border-primary/20\">\n                    <CollapsibleTrigger asChild>\n                      <CardHeader className=\"pb-3 cursor-pointer hover-elevate\">\n                        <CardTitle className=\"text-sm flex items-center justify-between gap-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <Zap className=\"w-4 h-4 text-primary\" />\n                            Streak Multiplier\n                          </div>\n                          <ChevronDown className={`w-4 h-4 transition-transform ${streakMultiplierOpen ? 'rotate-180' : ''}`} />\n                        </CardTitle>\n                      </CardHeader>\n                    </CollapsibleTrigger>\n                    <CollapsibleContent>\n                      <CardContent className=\"space-y-3 pb-4\">\n                        <p className=\"text-xs text-muted-foreground\">\n                          Build streaks to earn bonus Fluency Score on wins!\n                        </p>\n                        <div className=\"space-y-2.5\">\n                          <div className=\"flex items-start gap-2\">\n                            <Zap className=\"w-3 h-3 text-blue-500 mt-0.5\" />\n                            <div className=\"flex-1\">\n                              <p className=\"text-xs font-medium\">Day Streak: +5% per 3 days (max +20%)</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-start gap-2\">\n                            <Flame className=\"w-3 h-3 text-orange-500 mt-0.5\" />\n                            <div className=\"flex-1\">\n                              <p className=\"text-xs font-medium\">Win Streak: +10% per 2 wins (max +30%)</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"pt-3 border-t border-border\">\n                          <p className=\"text-[10px] text-muted-foreground\">\n                            Max 1.5x • Applies to wins only • Per language\n                          </p>\n                        </div>\n                      </CardContent>\n                    </CollapsibleContent>\n                  </Card>\n                </Collapsible>\n\n                {isAuthenticated && (\n                  <>\n                    <Card className=\"border-card-border\">\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm\">Recent Matches</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        {matches && matches.length > 0 ? (\n                          <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                            {matches.filter(m => !m.isPracticeMode).slice(0, 5).map((match) => (\n                              <div\n                                key={match.id}\n                                className=\"flex items-center gap-2 p-2 rounded-md hover-elevate cursor-pointer\"\n                                onClick={() => {\n                                  setSelectedMatch(match);\n                                  setMobileMenuOpen(false);\n                                }}\n                                data-testid={`match-card-${match.id}`}\n                              >\n                                <Badge\n                                  variant={match.result === \"win\" ? \"default\" : \"destructive\"}\n                                  className=\"w-10 justify-center font-semibold text-xs\"\n                                >\n                                  {match.result === \"win\" ? \"W\" : \"L\"}\n                                </Badge>\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"font-medium text-sm truncate flex items-center gap-1\">\n                                    <span>vs {match.opponent}</span>\n                                    {(match.isForfeit === 1 || (match as any).is_forfeit === 1) && (\n                                      <Badge variant=\"outline\" className=\"text-[10px] px-1 py-0 h-3\">\n                                        Forfeit\n                                      </Badge>\n                                    )}\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {match.createdAt ? formatDistanceToNow(new Date(match.createdAt), { addSuffix: true }) : \"Unknown\"}\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <div className={`font-mono font-bold text-sm ${\n                                    match.result === \"win\" ? \"text-success\" : \"text-destructive\"\n                                  }`}>\n                                    {match.result === \"win\" ? \"+\" : \"\"}{match.eloChange}\n                                  </div>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    className=\"h-7 w-7 p-0\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      setSelectedMatch(match);\n                                      setMobileMenuOpen(false);\n                                    }}\n                                    data-testid={`button-view-match-${match.id}`}\n                                  >\n                                    <Eye className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-center text-muted-foreground text-sm py-4\">\n                            No matches yet\n                          </p>\n                        )}\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"border-card-border\">\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm\">Skill Progress</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        {skillProgress ? (\n                          <>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex justify-between text-xs\">\n                                <span className=\"text-muted-foreground\">Grammar</span>\n                                <span className=\"font-semibold\">{skillProgress.grammar}%</span>\n                              </div>\n                              <Progress value={skillProgress.grammar} className=\"h-1.5\" />\n                            </div>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex justify-between text-xs\">\n                                <span className=\"text-muted-foreground\">Fluency</span>\n                                <span className=\"font-semibold\">{skillProgress.fluency}%</span>\n                              </div>\n                              <Progress value={skillProgress.fluency} className=\"h-1.5\" />\n                            </div>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex justify-between text-xs\">\n                                <span className=\"text-muted-foreground\">Vocabulary</span>\n                                <span className=\"font-semibold\">{skillProgress.vocabulary}%</span>\n                              </div>\n                              <Progress value={skillProgress.vocabulary} className=\"h-1.5\" />\n                            </div>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex justify-between text-xs\">\n                                <span className=\"text-muted-foreground\">Naturalness</span>\n                                <span className=\"font-semibold\">{skillProgress.naturalness}%</span>\n                              </div>\n                              <Progress value={skillProgress.naturalness} className=\"h-1.5\" />\n                            </div>\n                          </>\n                        ) : (\n                          <p className=\"text-center text-muted-foreground text-sm py-2\">\n                            Complete matches to see progress\n                          </p>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </>\n                )}\n\n                {/* Navigation Buttons */}\n                <div className=\"pt-4 border-t border-card-border space-y-3\">\n                  <Button\n                    variant={currentPage === \"analytics\" ? \"default\" : \"outline\"}\n                    className=\"w-full gap-2\"\n                    onClick={() => {\n                      onNavigate?.(\"analytics\");\n                      setMobileMenuOpen(false);\n                    }}\n                    data-testid=\"button-nav-analytics\"\n                  >\n                    <BarChart3 className=\"w-4 h-4\" />\n                    <span>Analytics</span>\n                  </Button>\n                  \n                  {isAuthenticated && (\n                    <Button\n                      variant={currentPage === \"friends\" ? \"default\" : \"outline\"}\n                      className=\"w-full gap-2\"\n                      onClick={() => {\n                        onNavigate?.(\"friends\");\n                        setMobileMenuOpen(false);\n                      }}\n                      data-testid=\"button-nav-friends\"\n                    >\n                      <Users className=\"w-4 h-4\" />\n                      <span>Friends</span>\n                    </Button>\n                  )}\n\n                  {/* Sound Toggle */}\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-center gap-3\"\n                    onClick={toggleSound}\n                    data-testid=\"button-toggle-sound\"\n                  >\n                    {soundEnabled ? (\n                      <>\n                        <Volume2 className=\"w-4 h-4\" />\n                        <span>Sound On</span>\n                      </>\n                    ) : (\n                      <>\n                        <VolumeX className=\"w-4 h-4\" />\n                        <span>Sound Off</span>\n                      </>\n                    )}\n                  </Button>\n\n                  {/* How to Play Button */}\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-center gap-3\"\n                    onClick={() => {\n                      onHowToPlayOpen?.();\n                      setMobileMenuOpen(false);\n                    }}\n                    data-testid=\"button-how-to-play\"\n                  >\n                    <BookOpen className=\"w-4 h-4\" />\n                    <span>How to Play</span>\n                  </Button>\n                  \n                  {isAuthenticated && (\n                    <>\n                    {/* Subscription Management */}\n                    {!isPremium ? (\n                      <Button\n                        variant=\"default\"\n                        className=\"w-full gap-2 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white border-0\"\n                        onClick={() => {\n                          window.location.href = \"/subscribe\";\n                        }}\n                        data-testid=\"button-mobile-upgrade\"\n                      >\n                        <Crown className=\"w-4 h-4\" />\n                        <span>Upgrade to Premium</span>\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full gap-2\"\n                        onClick={async () => {\n                          if (confirm('Are you sure you want to cancel your subscription? You will retain access until the end of your billing period.')) {\n                            try {\n                              const res = await fetch('/api/cancel-subscription', { method: 'POST' });\n                              const data = await res.json();\n                              if (res.ok) {\n                                alert(data.message);\n                                window.location.reload();\n                              } else {\n                                alert(data.message || 'Failed to cancel subscription');\n                              }\n                            } catch (error) {\n                              alert('Failed to cancel subscription');\n                            }\n                          }\n                        }}\n                        data-testid=\"button-mobile-cancel-subscription\"\n                      >\n                        <Crown className=\"w-4 h-4\" />\n                        <span>Cancel Subscription</span>\n                      </Button>\n                    )}\n                    </>\n                  )}\n                </div>\n                \n                {/* Sign Out Button - Always visible */}\n                <div className=\"pt-4 border-t border-card-border\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full gap-2 text-destructive hover:text-destructive border-destructive/30\"\n                    onClick={() => {\n                      localStorage.clear();\n                      sessionStorage.clear();\n                      window.location.href = \"/api/logout\";\n                    }}\n                    data-testid=\"button-mobile-logout\"\n                  >\n                    <LogOut className=\"w-4 h-4\" />\n                    <span>Sign Out</span>\n                  </Button>\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"leaderboard\" className=\"mt-4 space-y-4\">\n              {/* Most Wins This Season Leaderboard */}\n              <Card className=\"border-card-border\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Trophy className=\"w-4 h-4 text-gold\" />\n                      Most Wins This Season\n                    </CardTitle>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{timeUntilReset}</p>\n                </CardHeader>\n                <CardContent>\n                  {isLoadingMonthlyWins ? (\n                    <div className=\"text-center text-muted-foreground text-sm py-4\">\n                      Loading leaderboard...\n                    </div>\n                  ) : monthlyWinsEntries.length > 0 ? (\n                    <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                      {monthlyWinsEntries.slice(0, 20).map((entry) => (\n                        <div\n                          key={entry.rank}\n                          className={`flex items-center gap-3 p-2 rounded-md ${\n                            entry.username === username\n                              ? 'bg-primary/10 border border-primary/20'\n                              : 'hover-elevate'\n                          }`}\n                          data-testid={`monthly-wins-entry-${entry.rank}`}\n                        >\n                          <div className=\"w-8 text-center\">\n                            {getRankIcon(entry.rank!) || (\n                              <span className=\"font-mono font-bold text-xs text-muted-foreground\">\n                                #{entry.rank}\n                              </span>\n                            )}\n                          </div>\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarFallback className=\"text-xs\">\n                              {entry.username.slice(0, 2).toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"font-medium text-sm truncate flex items-center gap-2\">\n                              {entry.username}\n                              {entry.username === username && (\n                                <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0 h-4\">\n                                  You\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {entry.monthlyWins} wins this season\n                            </div>\n                          </div>\n                          <div className=\"font-mono font-bold text-sm text-gold\">\n                            {entry.monthlyWins}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center text-muted-foreground text-sm py-4\">\n                      No wins recorded this season\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Fluency Score Leaderboard */}\n              <Card className=\"border-card-border\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm flex items-center gap-2\">\n                    <Trophy className=\"w-4 h-4 text-primary\" />\n                    Fluency Score Leaderboard\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoadingLeaderboard ? (\n                    <div className=\"text-center text-muted-foreground text-sm py-4\">\n                      Loading leaderboard...\n                    </div>\n                  ) : leaderboardEntries.length > 0 ? (\n                    <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                      {leaderboardEntries.slice(0, 20).map((entry) => (\n                        <div\n                          key={entry.rank}\n                          className={`flex items-center gap-3 p-2 rounded-md ${\n                            entry.username === username\n                              ? 'bg-primary/10 border border-primary/20'\n                              : 'hover-elevate'\n                          }`}\n                          data-testid={`leaderboard-entry-${entry.rank}`}\n                        >\n                          <div className=\"w-8 text-center\">\n                            {getRankIcon(entry.rank!) || (\n                              <span className=\"font-mono font-bold text-xs text-muted-foreground\">\n                                #{entry.rank}\n                              </span>\n                            )}\n                          </div>\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarFallback className=\"text-xs\">\n                              {entry.username.slice(0, 2).toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"font-medium text-sm truncate flex items-center gap-2\">\n                              {entry.username}\n                              {entry.username === username && (\n                                <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0 h-4\">\n                                  You\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {entry.wins}W - {entry.losses}L\n                            </div>\n                          </div>\n                          <div className=\"font-mono font-bold text-sm\">\n                            {entry.elo}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center text-muted-foreground text-sm py-4\">\n                      No players ranked yet\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </SheetContent>\n      </Sheet>\n\n      {selectedMatch && (\n        <MatchDetails\n          match={selectedMatch}\n          onClose={() => setSelectedMatch(null)}\n          language={currentLanguage}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":36778},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        success: \"hsl(142 76% 36% / <alpha-value>)\",\n        warning: \"hsl(38 92% 50% / <alpha-value>)\",\n        gold: \"hsl(45 100% 51% / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4157},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    user: user ?? null,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":361},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4200},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/examples/ProfileStats.tsx":{"content":"import ProfileStats from '../ProfileStats';\n\nexport default function ProfileStatsExample() {\n  return <ProfileStats />;\n}\n","size_bytes":122},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/MatchResults.tsx":{"content":"import { Trophy, TrendingUp, TrendingDown, ArrowRight, Bot, User, Users, Brain } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { GradingResult } from \"@shared/schema\";\nimport { useEffect } from \"react\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { motion } from \"framer-motion\";\n\ninterface MatchResultsProps {\n  gradingResult: GradingResult;\n  eloChange?: number;\n  newElo?: number;\n  isBot?: boolean;\n  opponentName?: string;\n  isPracticeMode?: boolean;\n  onContinue?: () => void;\n  onAIReview?: () => void;\n  isSaving?: boolean;\n  streakMultiplier?: {\n    multiplier: number;\n    dayStreakBonus: number;\n    winStreakBonus: number;\n  } | null;\n}\n\nexport default function MatchResults({\n  gradingResult,\n  eloChange = 15,\n  newElo = 1562,\n  isBot = false,\n  opponentName = \"Opponent\",\n  isPracticeMode = false,\n  onContinue,\n  onAIReview,\n  isSaving = false,\n  streakMultiplier = null\n}: MatchResultsProps) {\n  const { playWin, playLoss } = useSound();\n  const userScore = gradingResult.overall;\n  const botScore = gradingResult.botOverall || 0;\n  const botElo = gradingResult.botElo || 1000;\n  // Check if opponent scores exist (not just if > 0, since 0 is a valid score)\n  const hasOpponentScores = gradingResult.botGrammar !== undefined && gradingResult.botGrammar !== null;\n  const isForfeit = gradingResult.isForfeit || false;\n  \n  // Determine win/loss by comparing scores (whoever has higher score wins)\n  const isWinner = userScore > botScore;\n  const isDraw = userScore === botScore;\n  \n  // Calculate Elo change using standard Elo formula (same as backend)\n  const K_FACTOR = 32;\n  const expectedScore = 1 / (1 + Math.pow(10, (botElo - newElo) / 400));\n  const actualScore = isWinner ? 1 : (isDraw ? 0.5 : 0);\n  const actualEloChange = eloChange === 0 ? 0 : Math.round(K_FACTOR * (actualScore - expectedScore));\n\n  const userScores = {\n    grammar: gradingResult.grammar,\n    fluency: gradingResult.fluency,\n    vocabulary: gradingResult.vocabulary,\n    naturalness: gradingResult.naturalness,\n  };\n  \n  const botScores = hasOpponentScores ? {\n    grammar: gradingResult.botGrammar || 0,\n    fluency: gradingResult.botFluency || 0,\n    vocabulary: gradingResult.botVocabulary || 0,\n    naturalness: gradingResult.botNaturalness || 0,\n  } : null;\n\n  // Play sound effect on mount (but not in practice mode)\n  useEffect(() => {\n    if (isPracticeMode) {\n      // No win/loss sounds in practice mode\n      return;\n    }\n    if (isDraw) {\n      // No sound for draw\n      return;\n    }\n    if (isWinner) {\n      playWin();\n    } else {\n      playLoss();\n    }\n  }, [isWinner, isDraw, isPracticeMode, playWin, playLoss]);\n\n  return (\n    <div className=\"flex items-center justify-center min-h-[calc(100vh-4rem)] p-4\">\n      <div className=\"w-full max-w-4xl\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"flex justify-center mb-4\">\n              <motion.div \n                className={`w-24 h-24 rounded-md flex items-center justify-center ${\n                  isPracticeMode ? 'bg-primary/20' : (isWinner ? 'bg-success/20' : 'bg-destructive/20')\n                }`}\n                initial={{ scale: 0, rotate: -180 }}\n                animate={{ scale: 1, rotate: 0 }}\n                transition={{ \n                  type: \"spring\", \n                  stiffness: 260, \n                  damping: 20,\n                  delay: 0.1\n                }}\n              >\n                <motion.div\n                  animate={!isPracticeMode && isWinner ? { \n                    scale: [1, 1.2, 1],\n                    rotate: [0, 10, -10, 0]\n                  } : {}}\n                  transition={{\n                    duration: 0.6,\n                    delay: 0.4,\n                    repeat: !isPracticeMode && isWinner ? 2 : 0\n                  }}\n                >\n                  {isPracticeMode ? (\n                    <Brain className=\"w-12 h-12 text-primary\" />\n                  ) : (\n                    <Trophy className={`w-12 h-12 ${isWinner ? 'text-success' : 'text-destructive'}`} />\n                  )}\n                </motion.div>\n              </motion.div>\n            </div>\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n            >\n              <CardTitle className=\"text-4xl font-bold mb-2\" data-testid=\"text-result\">\n                {isPracticeMode ? \"Practice Complete!\" : (isWinner ? \"Victory!\" : \"Good Effort!\")}\n              </CardTitle>\n            </motion.div>\n            {eloChange === 0 ? (\n              <motion.p \n                className=\"text-muted-foreground\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.5 }}\n              >\n                Practice Mode - No Fluency Score Change\n              </motion.p>\n            ) : (\n              <motion.div \n                className=\"flex items-center justify-center gap-2 text-2xl font-mono font-bold\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: 0.5, type: \"spring\" }}\n              >\n                {actualEloChange > 0 ? (\n                  <>\n                    <TrendingUp className=\"w-6 h-6 text-success\" />\n                    <motion.span \n                      className=\"text-success\"\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: 0.7 }}\n                    >\n                      +{actualEloChange}\n                    </motion.span>\n                  </>\n                ) : (\n                  <>\n                    <TrendingDown className=\"w-6 h-6 text-destructive\" />\n                    <motion.span \n                      className=\"text-destructive\"\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: 0.7 }}\n                    >\n                      {actualEloChange}\n                    </motion.span>\n                  </>\n                )}\n                <span className=\"text-muted-foreground mx-2\">→</span>\n                <motion.span \n                  data-testid=\"text-new-elo\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 0.9 }}\n                >\n                  {newElo + actualEloChange} Fluency\n                </motion.span>\n              </motion.div>\n            )}\n            \n            {/* Streak Multiplier Display */}\n            {streakMultiplier && streakMultiplier.multiplier > 1 && actualEloChange > 0 && (\n              <motion.div\n                className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground mt-2\"\n                initial={{ opacity: 0, y: -10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1.1 }}\n              >\n                <Badge variant=\"secondary\" className=\"font-mono\">\n                  {streakMultiplier.multiplier.toFixed(2)}x Streak Bonus\n                </Badge>\n                <span className=\"text-xs\">\n                  ({streakMultiplier.dayStreakBonus > 0 && `Day: +${(streakMultiplier.dayStreakBonus * 100).toFixed(0)}%`}\n                  {streakMultiplier.dayStreakBonus > 0 && streakMultiplier.winStreakBonus > 0 && ` • `}\n                  {streakMultiplier.winStreakBonus > 0 && `Win: +${(streakMultiplier.winStreakBonus * 100).toFixed(0)}%`})\n                </span>\n              </motion.div>\n            )}\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {isForfeit ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground text-lg\">Match ended by forfeit</p>\n              </div>\n            ) : isPracticeMode ? (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1.1 }}\n              >\n                <h3 className=\"font-semibold mb-4\">Your Performance</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <User className=\"w-5 h-5\" />\n                    <span className=\"font-semibold\">You</span>\n                    <Badge variant=\"outline\" className=\"ml-auto font-mono\" data-testid=\"text-user-score\">\n                      {userScore}%\n                    </Badge>\n                  </div>\n                  {Object.entries(userScores).map(([key, value]) => (\n                    <div key={key} className=\"space-y-1\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm capitalize text-muted-foreground\">{key}</span>\n                        <span className=\"font-mono text-sm\">{value}%</span>\n                      </div>\n                      <Progress value={value} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n              </motion.div>\n            ) : hasOpponentScores ? (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1.1 }}\n              >\n                <h3 className=\"font-semibold mb-4\">Score Comparison</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* User Scores */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <User className=\"w-5 h-5\" />\n                      <span className=\"font-semibold\">You</span>\n                      <Badge variant=\"outline\" className=\"ml-auto font-mono\" data-testid=\"text-user-score\">\n                        {userScore}%\n                      </Badge>\n                    </div>\n                    {Object.entries(userScores).map(([key, value]) => (\n                      <div key={key} className=\"space-y-1\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm capitalize text-muted-foreground\">{key}</span>\n                          <span className=\"font-mono text-sm\">{value}%</span>\n                        </div>\n                        <Progress value={value} className=\"h-2\" />\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Opponent Scores */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      {isBot ? <Bot className=\"w-5 h-5\" /> : <Users className=\"w-5 h-5\" />}\n                      <span className=\"font-semibold\">{isBot ? \"AI Bot\" : opponentName}</span>\n                      <Badge variant=\"outline\" className=\"ml-auto font-mono\" data-testid=\"text-bot-score\">\n                        {botScore}%\n                      </Badge>\n                      {gradingResult.botElo && (\n                        <Badge variant=\"secondary\" className=\"font-mono\">\n                          {gradingResult.botElo} Fluency\n                        </Badge>\n                      )}\n                    </div>\n                    {botScores && Object.entries(botScores).map(([key, value]) => (\n                      <div key={key} className=\"space-y-1\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm capitalize text-muted-foreground\">{key}</span>\n                          <span className=\"font-mono text-sm\">{value}%</span>\n                        </div>\n                        <Progress value={value} className=\"h-2\" />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            ) : (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1.1 }}\n              >\n                <h3 className=\"font-semibold mb-4\">Performance Breakdown</h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {Object.entries(userScores).map(([key, value]) => (\n                    <div key={key} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm capitalize text-muted-foreground\">{key}</span>\n                        <span className=\"font-mono font-semibold\">{value}%</span>\n                      </div>\n                      <Progress value={value} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n                <div className=\"mt-4 text-center\">\n                  <Badge variant=\"outline\" className=\"text-lg font-mono\">\n                    Average: {gradingResult.overall}%\n                  </Badge>\n                </div>\n              </motion.div>\n            )}\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 1.3 }}\n            >\n              <h3 className=\"font-semibold mb-3\">Feedback</h3>\n              <div className=\"space-y-2\">\n                {gradingResult.feedback.map((item, idx) => (\n                  <div key={idx} className=\"flex gap-2 text-sm\" data-testid={`feedback-${idx}`}>\n                    <ArrowRight className=\"w-4 h-4 text-muted-foreground mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-muted-foreground\">{item}</span>\n                  </div>\n                ))}\n              </div>\n            </motion.div>\n\n            <motion.div \n              className=\"flex flex-col gap-3 pt-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 1.5 }}\n            >\n              <Button \n                variant=\"secondary\" \n                className=\"w-full gap-2\" \n                onClick={onAIReview} \n                data-testid=\"button-ai-review\"\n              >\n                <Brain className=\"w-4 h-4\" />\n                AI Review & Analysis\n              </Button>\n              <div className=\"flex gap-3\">\n                <Button \n                  className=\"flex-1\" \n                  onClick={onContinue} \n                  data-testid=\"button-continue\"\n                  disabled={isSaving}\n                >\n                  {isSaving ? \"Saving...\" : \"Continue\"}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"flex-1\" \n                  onClick={onContinue} \n                  data-testid=\"button-new-match\"\n                  disabled={isSaving}\n                >\n                  New Match\n                </Button>\n              </div>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15438},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { GradingRequest, GradingResult } from \"@shared/schema\";\nimport { getBotElo, getBotTargetAccuracy } from \"./botConfig\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function gradeConversation(request: GradingRequest, isPremium: boolean = false): Promise<GradingResult> {\n  // Consistent grading standards across all difficulties\n  const standardGuidelines = `\nGrade using CONSISTENT standards regardless of difficulty level:\n\nGRAMMAR (0-100):\n- 90-100: Perfect or near-perfect grammar with minor slip-ups\n- 70-89: Generally correct with some errors that don't impede understanding\n- 50-69: Multiple errors but message is understandable\n- 30-49: Significant errors that sometimes confuse meaning\n- 0-29: Grammar severely impedes communication\n\nFLUENCY (0-100):\n- 90-100: Natural, smooth expression like a proficient speaker\n- 70-89: Clear communication with some awkwardness\n- 50-69: Understandable but noticeably non-native\n- 30-49: Choppy, requires effort to understand\n- 0-29: Very broken, difficult to follow\n\nVOCABULARY (0-100):\n- 90-100: Excellent word choice, appropriate and natural\n- 70-89: Good vocabulary with occasional awkward choices\n- 50-69: Basic vocabulary, gets point across\n- 30-49: Limited vocabulary, some incorrect usage\n- 0-29: Very poor vocabulary, wrong words frequently\n\nNATURALNESS (0-100):\n- 90-100: Sounds like a native or advanced speaker\n- 70-89: Natural with minor non-native patterns\n- 50-69: Functional but clearly non-native\n- 30-49: Unnatural phrasing, sounds foreign\n- 0-29: Very unnatural, doesn't sound like natural language\n\nApply these standards EQUALLY to all difficulty levels. A score of 70 means the same thing whether in Beginner or Hard mode.`;\n\n  const difficultyGuidelines: Record<string, string> = {\n    Beginner: standardGuidelines,\n    Easy: standardGuidelines,\n    Medium: standardGuidelines,\n    Hard: standardGuidelines\n  };\n  \n  // Format messages with indices for detailed analysis\n  const formattedMessages = request.messages.map((msg, idx) => \n    `[${idx}] ${msg.sender === \"user\" ? \"Student\" : \"Bot\"}: ${msg.text}`\n  ).join(\"\\n\");\n  \n  // Different prompts based on premium status\n  const detailedAnalysisSection = isPremium ? `\n2. ULTRA-DETAILED MESSAGE-BY-MESSAGE ANALYSIS (messageAnalysis array):\nFor EVERY SINGLE student message, provide EXHAUSTIVE linguistic analysis:\n\n- messageIndex: the message number [0, 1, 2...]\n- sender: \"user\" \n- originalText: the exact message text\n\n- grammarCorrections: array of EVERY grammar issue (minimum 2-3 per message unless truly perfect)\n  {original: \"exact error phrase\", corrected: \"proper form\", explanation: \"detailed grammar rule + why this matters\"}\n  Find ALL issues:\n  * Word order errors and particle placement\n  * Verb conjugation, tense, aspect, mood errors\n  * Article usage, preposition choice\n  * Subject-verb agreement, noun-adjective agreement\n  * Case markers, classifiers, measure words\n  * Sentence structure and clause connection\n  * Honorific/formality level appropriateness\n\n- vocabularySuggestions: array of BETTER word choices (minimum 2-3 per message)\n  {word: \"student's word\", betterAlternative: \"superior choice\", reason: \"why it's more natural/precise/idiomatic\"}\n  Suggest improvements for:\n  * More natural, idiomatic expressions\n  * More precise vocabulary\n  * More contextually appropriate words\n  * More advanced/native-sounding alternatives\n  * Better collocations and word combinations\n\n- sentenceImprovement: REQUIRED for every message\n  {\n    original: \"student's exact sentence\",\n    improved: \"how a fluent native speaker would express this same idea\",\n    explanation: \"line-by-line breakdown: what changed and why each change makes it more natural\"\n  }\n  Even if sentence is good, show the native-level version with subtle improvements\n\n- strengths: array of 3-4 specific things done well\n  * Specific grammar structures used correctly\n  * Good vocabulary choices and why\n  * Natural expressions or phrasing\n  * Appropriate cultural/contextual usage\n\n- improvements: array of 3-4 actionable suggestions\n  * Specific grammar points to study\n  * Vocabulary areas to expand\n  * Practice recommendations\n  * Cultural/contextual improvements\n\nANALYSIS REQUIREMENTS:\n- NO message should have empty arrays - find something to improve in EVERY message\n- Be EXHAUSTIVE: analyze word choice, grammar, naturalness, cultural appropriateness\n- Provide TEACHING explanations: explain the \"why\" behind every correction\n- Compare to native speaker level: how would a native say this?\n- Give detailed linguistic reasoning for all suggestions\n- For beginners: be encouraging but still thorough\n- For advanced: be precise and highlight subtle improvements` : '';\n  \n  const prompt = `You are an expert ${request.language} language teacher and linguistic analyst providing ${isPremium ? 'ULTRA-DETAILED, professional-grade message-by-message' : 'general'} feedback for a conversation at ${request.difficulty} difficulty level.\n\nTopic: ${request.topic}\nTarget vocabulary: ${request.vocabulary.join(\", \")}\nDifficulty level: ${request.difficulty}\n\n${difficultyGuidelines[request.difficulty] || difficultyGuidelines.Medium}\n\n${isPremium ? `\nPREMIUM ANALYSIS STANDARDS:\nYour analysis must be comprehensive and educational. Every message deserves detailed linguistic examination:\n- Find subtle improvements even in good sentences\n- Explain grammar rules thoroughly with examples\n- Suggest more natural/native alternatives\n- Provide cultural and contextual insights\n- Give specific, actionable study recommendations\n- Make your feedback a learning resource, not just corrections\n` : ''}\n\nCONVERSATION (with message indices):\n${formattedMessages}\n\nProvide ${isPremium ? 'TWO types of' : 'ONE type of'} analysis:\n\n1. OVERALL SCORES for both participants:\n- Student: grammar, fluency, vocabulary, naturalness, overall (0-100 each)\n- Bot: botGrammar, botFluency, botVocabulary, botNaturalness, botOverall (0-100 each)\n- General feedback: 3-5 summary points for the student\n\n${detailedAnalysisSection}\n\nRespond with JSON in this ${isPremium ? 'EXACT' : 'format (NO messageAnalysis field for free users)'} format:\n{\n  \"grammar\": number,\n  \"fluency\": number,\n  \"vocabulary\": number,\n  \"naturalness\": number,\n  \"feedback\": [\"point 1\", \"point 2\", \"point 3\"],\n  \"overall\": number,\n  \"botGrammar\": number,\n  \"botFluency\": number,\n  \"botVocabulary\": number,\n  \"botNaturalness\": number,\n  \"botOverall\": number${isPremium ? `,\n  \"messageAnalysis\": [\n    {\n      \"messageIndex\": 0,\n      \"sender\": \"user\",\n      \"originalText\": \"original message text\",\n      \"grammarCorrections\": [{\"original\": \"错误部分\", \"corrected\": \"正确部分\", \"explanation\": \"detailed grammar explanation\"}],\n      \"vocabularySuggestions\": [{\"word\": \"used word\", \"betterAlternative\": \"better word\", \"reason\": \"detailed reason\"}],\n      \"sentenceImprovement\": {\n        \"original\": \"student sentence\",\n        \"improved\": \"native speaker version\",\n        \"explanation\": \"detailed explanation of all improvements\"\n      },\n      \"strengths\": [\"strength 1\", \"strength 2\", \"strength 3\"],\n      \"improvements\": [\"improvement 1\", \"improvement 2\"]\n    }\n  ]` : ''}\n}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert language teacher providing ${isPremium ? 'detailed, constructive' : 'general'} feedback. Always respond with valid JSON.`\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: isPremium ? 6000 : 1500, // Increased tokens for ultra-detailed premium feedback\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    // Calculate overall scores if not provided\n    if (!result.overall) {\n      result.overall = Math.round(\n        (result.grammar + result.fluency + result.vocabulary + result.naturalness) / 4\n      );\n    }\n    \n    if (!result.botOverall) {\n      result.botOverall = Math.round(\n        (result.botGrammar + result.botFluency + result.botVocabulary + result.botNaturalness) / 4\n      );\n    }\n\n    // Apply penalties to user score\n    const skipPenalty = request.skippedQuestions * 20;\n    const adjustedOverall = Math.max(0, result.overall - skipPenalty);\n    \n    // Get bot Elo for this difficulty\n    const botElo = getBotElo(request.difficulty);\n\n    return {\n      grammar: Math.max(0, Math.min(100, result.grammar || 0)),\n      fluency: Math.max(0, Math.min(100, result.fluency || 0)),\n      vocabulary: Math.max(0, Math.min(100, result.vocabulary || 0)),\n      naturalness: Math.max(0, Math.min(100, result.naturalness || 0)),\n      feedback: result.feedback || [\"Great effort! Keep practicing.\"],\n      overall: Math.max(0, Math.min(100, adjustedOverall)),\n      botGrammar: Math.max(0, Math.min(100, result.botGrammar || 0)),\n      botFluency: Math.max(0, Math.min(100, result.botFluency || 0)),\n      botVocabulary: Math.max(0, Math.min(100, result.botVocabulary || 0)),\n      botNaturalness: Math.max(0, Math.min(100, result.botNaturalness || 0)),\n      botOverall: Math.max(0, Math.min(100, result.botOverall || 0)),\n      botElo,\n      messageAnalysis: result.messageAnalysis || [],\n    };\n  } catch (error: any) {\n    console.error(\"Error grading conversation:\", error);\n    console.error(\"Error details:\", error.message, error.response?.data);\n    throw new Error(\"Failed to grade conversation\");\n  }\n}\n\nexport async function generateBotQuestion(\n  topic: string,\n  vocabulary: string[],\n  language: string = \"Chinese\",\n  difficulty: string = \"Medium\",\n  previousQuestions: string[] = [],\n  isPracticeMode: boolean = false,\n  botPersonality?: string,\n  botBackstory?: string\n): Promise<string> {\n  const targetAccuracy = isPracticeMode ? 100 : getBotTargetAccuracy(difficulty);\n  \n  const mistakeGuidelines: Record<string, string> = {\n    Chinese: `Common learner mistakes for Chinese:\n- Tone errors (using wrong tones on characters)\n- Incorrect word order (especially with time/place expressions)\n- Missing or wrong measure words (个, 只, 本, etc.)\n- Particle errors (especially 了, 过, 着)\n- Mixing up similar-sounding words\n- Forgetting aspect markers`,\n    Spanish: `Common learner mistakes for Spanish:\n- Gender agreement errors (el/la, -o/-a endings)\n- Verb conjugation mistakes (especially irregular verbs)\n- Wrong preposition usage (a, de, en, por, para)\n- Mixing up ser/estar\n- Incorrect subjunctive mood usage\n- Article errors (forgetting or misusing el/la/los/las)`,\n    Italian: `Common learner mistakes for Italian:\n- Gender agreement errors (il/la, -o/-a endings)\n- Verb conjugation mistakes (especially irregular verbs)\n- Preposition errors (a, di, da, in, con, su)\n- Article mistakes (il/lo/la/i/gli/le confusion)\n- Double consonant pronunciation affecting spelling\n- Reflexive verb errors`\n  };\n\n  const difficultyInstructions: Record<string, string> = {\n    Beginner: `You are a TRUE BEGINNER learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use ONLY the most basic, fundamental words that beginners learn first:\n- Basic verbs: be, have, want, like, go, eat, do, see, need\n- Basic nouns: I, you, he, she, thing, person, place, time, day\n- Basic adjectives: good, bad, big, small, happy, new, old\n- No complex words, no idioms, no advanced expressions\n- Stick to survival-level vocabulary only\n\nSENTENCE STRUCTURE: Use extremely simple structures:\n- Single words or 2-4 word fragments\n- Subject + verb only (\"I go\", \"You like?\")\n- No complex sentences, no subordinate clauses\n- Very basic, choppy expression\n\nERROR PATTERN: Make 3-4 MAJOR mistakes:\n- Mix in English words when you don't know the target language word\n- SEVERE grammar mistakes - wrong word order, missing words, incorrect everything\n- Make it sound like someone in their first week of learning`,\n    Easy: `You are a BEGINNER learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use simple, everyday vocabulary appropriate for early learners:\n- Common daily verbs: think, know, say, help, take, give, make, find\n- Common nouns: home, work, food, friend, family, city, country\n- Simple adjectives: nice, easy, difficult, important, interesting\n- Avoid idioms, avoid complex or technical terms\n- Elementary conversational level only\n\nSENTENCE STRUCTURE: Use simple, straightforward structures:\n- Short sentences with basic structures\n- Simple present/past tense primarily\n- Subject + verb + object patterns\n- Avoid complex clauses or advanced constructions\n\nERROR PATTERN: Make 2-3 noticeable mistakes:\n- Basic grammar errors (particles, word order, articles/gender)\n- Include awkward phrasing or unnatural expressions\n- Keep questions short and simple despite the errors`,\n    Medium: `You are an INTERMEDIATE learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use standard conversational vocabulary:\n- Everyday conversational words and phrases\n- Common expressions and idioms\n- Mix of simple and moderately complex vocabulary\n- Normal social and casual register\n- Vocabulary appropriate for daily conversations\n\nSENTENCE STRUCTURE: Use natural conversational structures:\n- Full, complete sentences with natural flow\n- Mix of simple and compound sentences\n- Occasional complex structures\n- Normal spoken language patterns\n\nERROR PATTERN: Make 1-2 moderate mistakes:\n- Occasional grammar slips (verb conjugations, prepositions, measure words)\n- Sound mostly natural but with noticeable learner imperfections\n- Questions are understandable but not perfect`,\n    Hard: `You are an ADVANCED learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use sophisticated, nuanced vocabulary:\n- Advanced vocabulary and expressions\n- Idiomatic phrases and cultural references\n- Precise, specific word choices\n- Formal and informal register variation\n- Near-native vocabulary range\n\nSENTENCE STRUCTURE: Use complex, natural structures:\n- Complex sentences with multiple clauses\n- Natural connecting phrases and transitions\n- Sophisticated grammatical constructions\n- Fluid, native-like expression\n\nERROR PATTERN: Make 1 subtle mistake:\n- Minor errors that even advanced learners make (tone mistakes, subjunctive errors)\n- Mostly fluent with only small imperfections\n- Questions demonstrate high proficiency`\n  };\n\n  const mistakeTypes = mistakeGuidelines[language] || mistakeGuidelines.Chinese;\n\n  // Create rich character context\n  const characterContext = (botPersonality || botBackstory) \n    ? `\\n\\n=== YOUR CHARACTER ===\n${botBackstory ? `Background: ${botBackstory}` : ''}\n${botPersonality ? `${botBackstory ? '\\n' : ''}Personality: ${botPersonality}` : ''}\n\n${isPracticeMode \n  ? 'IMPORTANT: Let your personality and background shine through naturally in your teaching! Reference your experiences, use examples from your life, and teach in a way that reflects who you are.' \n  : 'IMPORTANT: Let your personality and background shine through in your questions! Ask about topics related to your interests and experiences. Your personality should be evident in what you ask and how you phrase it.'}` \n    : '';\n\n  const practiceTeachingGuidelines: Record<string, string> = {\n    Beginner: `TEACHING APPROACH for ABSOLUTE BEGINNERS:\n- Use ONLY the most basic, fundamental vocabulary (be, have, want, like, go, eat, good, bad, big, small)\n- Keep questions VERY short and simple (3-6 words maximum)\n- Use only present tense and basic sentence patterns\n- Speak slowly and clearly, like teaching a child\n- Examples: \"What do you like?\", \"Where do you go?\", \"Is this good?\"`,\n    Easy: `TEACHING APPROACH for EARLY LEARNERS:\n- Use simple, everyday vocabulary appropriate for beginners\n- Keep questions short and clear (one simple sentence)\n- Use common daily verbs and nouns (think, know, say, home, food, friend)\n- Avoid idioms and complex grammar\n- Examples: \"What food do you like to eat?\", \"Where is your home?\"`,\n    Medium: `TEACHING APPROACH for INTERMEDIATE LEARNERS:\n- Use standard conversational vocabulary\n- Natural sentence structures with everyday expressions\n- Can include common idioms and phrases\n- Normal conversational pace and complexity\n- Examples: \"What do you usually do on weekends?\", \"How do you feel about this topic?\"`,\n    Hard: `TEACHING APPROACH for ADVANCED LEARNERS:\n- Use sophisticated, nuanced vocabulary\n- Complex sentence structures and advanced expressions\n- Include idiomatic phrases and cultural references\n- Challenge the learner with native-level language\n- Examples: \"What implications does this have for our understanding?\", \"How would you characterize the relationship between these concepts?\"`\n  };\n\n  const prompt = isPracticeMode \n    ? `You are a NATIVE ${language} speaker and LANGUAGE TEACHER asking a question during a Q&A practice session about ${topic}.${characterContext}\n\nDIFFICULTY LEVEL: ${difficulty}\n${practiceTeachingGuidelines[difficulty] || practiceTeachingGuidelines.Medium}\n\nTarget vocabulary to incorporate: ${vocabulary.join(\", \")}\n${previousQuestions.length > 0 ? `\\nPrevious questions you asked:\\n${previousQuestions.join(\"\\n\")}\\n\\nMake sure to ask a DIFFERENT question.` : \"\"}\n\nGenerate ONE question in ${language} that:\n- Uses at least one vocabulary word from the list\n- Is relevant to the topic \"${topic}\"\n- Uses PERFECT grammar (no mistakes - you are teaching!)\n- Matches the language complexity for ${difficulty} level learners\n- Helps the student practice at their appropriate level\n${characterContext ? '- Reflects your unique personality and background through your teaching style and example choices' : ''}\n\nCRITICAL: Use PERFECT ${language} with NO mistakes, but adjust vocabulary complexity and sentence length for ${difficulty} level. You are a teacher helping students learn at their level.\n\nRespond with ONLY the question in ${language}, nothing else.`\n    : `You are roleplaying as a human ${language} language LEARNER (not a teacher) asking a question during a Q&A session about ${topic}.${characterContext}\n\nYour proficiency level: ${difficulty} (approximately ${targetAccuracy}% accuracy)\n${difficultyInstructions[difficulty] || difficultyInstructions.Medium}\n\n${mistakeTypes}\n\nTarget vocabulary to incorporate: ${vocabulary.join(\", \")}\n${previousQuestions.length > 0 ? `\\nPrevious questions you asked:\\n${previousQuestions.join(\"\\n\")}\\n\\nMake sure to ask a DIFFERENT question.` : \"\"}\n\nGenerate ONE question in ${language} that:\n- Uses at least one vocabulary word from the list\n- Is relevant to the topic \"${topic}\"\n- Contains realistic learner mistakes appropriate for ${difficulty} level\n- Sounds like a believable human learner would speak\n- Still communicates the intended meaning despite mistakes\n${characterContext ? '- Reflects your unique personality and background in how you phrase things' : ''}\n\nIMPORTANT: You MUST include realistic mistakes. Do NOT generate perfect ${language}. Make it sound like a real learner at ${targetAccuracy}% proficiency.\n\nRespond with ONLY the question in ${language}, nothing else.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: isPracticeMode\n            ? `You are a NATIVE ${language} speaker and LANGUAGE TEACHER. Generate PERFECT ${language} with no mistakes, but adjust vocabulary complexity and sentence length for ${difficulty} level learners. You are teaching, not testing - help students learn at their appropriate level.`\n            : `You are roleplaying as a ${language} language learner at ${difficulty} level with ${targetAccuracy}% proficiency. You make realistic, believable mistakes that real learners make. You are NOT a teacher - you are a student with imperfect language skills.`\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      max_tokens: 150,\n    });\n\n    return response.choices[0].message.content?.trim() || \"你好吗？\";\n  } catch (error: any) {\n    console.error(\"Error generating bot question:\", error);\n    throw new Error(\"Failed to generate bot question\");\n  }\n}\n\nexport async function generateBotAnswer(\n  userQuestion: string,\n  topic: string,\n  vocabulary: string[],\n  language: string = \"Chinese\",\n  difficulty: string = \"Medium\",\n  isPracticeMode: boolean = false,\n  botPersonality?: string,\n  botBackstory?: string\n): Promise<string> {\n  const targetAccuracy = isPracticeMode ? 100 : getBotTargetAccuracy(difficulty);\n  \n  const mistakeGuidelines: Record<string, string> = {\n    Chinese: `Common learner mistakes for Chinese:\n- Tone errors (using wrong tones on characters)\n- Incorrect word order (especially with time/place expressions)\n- Missing or wrong measure words (个, 只, 本, etc.)\n- Particle errors (especially 了, 过, 着)\n- Mixing up similar-sounding words\n- Forgetting aspect markers`,\n    Spanish: `Common learner mistakes for Spanish:\n- Gender agreement errors (el/la, -o/-a endings)\n- Verb conjugation mistakes (especially irregular verbs)\n- Wrong preposition usage (a, de, en, por, para)\n- Mixing up ser/estar\n- Incorrect subjunctive mood usage\n- Article errors (forgetting or misusing el/la/los/las)`,\n    Italian: `Common learner mistakes for Italian:\n- Gender agreement errors (il/la, -o/-a endings)\n- Verb conjugation mistakes (especially irregular verbs)\n- Preposition errors (a, di, da, in, con, su)\n- Article mistakes (il/lo/la/i/gli/le confusion)\n- Double consonant pronunciation affecting spelling\n- Reflexive verb errors`\n  };\n\n  const difficultyInstructions: Record<string, string> = {\n    Beginner: `You are a TRUE BEGINNER learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use ONLY the most basic, fundamental words that beginners learn first:\n- Basic verbs: be, have, want, like, go, eat, do, see, need\n- Basic nouns: I, you, he, she, thing, person, place, time, day\n- Basic adjectives: good, bad, big, small, happy, new, old\n- No complex words, no idioms, no advanced expressions\n- Stick to survival-level vocabulary only\n\nSENTENCE STRUCTURE: Use extremely simple structures:\n- Single words or 1-4 word fragments (\"Good!\", \"I like\", \"Yes, me too\")\n- Subject + verb only patterns\n- No complex sentences, no subordinate clauses\n- Very basic, choppy expression\n\nERROR PATTERN: Make 3-4 MAJOR mistakes:\n- Mix in English words when you don't know the target language word\n- SEVERE grammar mistakes - wrong word order, missing words, incorrect everything\n- Keep answers VERY short - just 1-3 words or tiny fragments\n- Make it sound like someone in their first week of learning`,\n    Easy: `You are a BEGINNER learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use simple, everyday vocabulary appropriate for early learners:\n- Common daily verbs: think, know, say, help, take, give, make, find\n- Common nouns: home, work, food, friend, family, city, country\n- Simple adjectives: nice, easy, difficult, important, interesting\n- Avoid idioms, avoid complex or technical terms\n- Elementary conversational level only\n\nSENTENCE STRUCTURE: Use simple, straightforward structures:\n- Short sentences (1-2 simple sentences)\n- Simple present/past tense primarily\n- Subject + verb + object patterns\n- Avoid complex clauses or advanced constructions\n\nERROR PATTERN: Make 2-3 noticeable mistakes:\n- Basic grammar errors (particles, word order, articles/gender)\n- Include awkward phrasing or unnatural expressions\n- Keep answers very short despite the errors`,\n    Medium: `You are an INTERMEDIATE learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use standard conversational vocabulary:\n- Everyday conversational words and phrases\n- Common expressions and idioms\n- Mix of simple and moderately complex vocabulary\n- Normal social and casual register\n- Vocabulary appropriate for daily conversations\n\nSENTENCE STRUCTURE: Use natural conversational structures:\n- Full, complete sentences (1-2 sentences)\n- Mix of simple and compound sentences\n- Occasional complex structures\n- Normal spoken language patterns\n\nERROR PATTERN: Make 1-2 moderate mistakes:\n- Occasional grammar slips (verb conjugations, prepositions, measure words)\n- Sound mostly natural but with noticeable learner imperfections\n- Answers are understandable but not perfect`,\n    Hard: `You are an ADVANCED learner (${targetAccuracy}% proficiency).\n\nVOCABULARY LEVEL: Use sophisticated, nuanced vocabulary:\n- Advanced vocabulary and expressions\n- Idiomatic phrases and cultural references\n- Precise, specific word choices\n- Formal and informal register variation\n- Near-native vocabulary range\n\nSENTENCE STRUCTURE: Use complex, natural structures:\n- Complex sentences with multiple clauses (1-2 sentences)\n- Natural connecting phrases and transitions\n- Sophisticated grammatical constructions\n- Fluid, native-like expression\n\nERROR PATTERN: Make 1 subtle mistake:\n- Minor errors that even advanced learners make (tone mistakes, subjunctive errors)\n- Mostly fluent with only small imperfections\n- Answers demonstrate high proficiency`\n  };\n\n  const mistakeTypes = mistakeGuidelines[language] || mistakeGuidelines.Chinese;\n  \n  // Create rich character context\n  const characterContext = (botPersonality || botBackstory) \n    ? `\\n\\n=== YOUR CHARACTER ===\n${botBackstory ? `Background: ${botBackstory}` : ''}\n${botPersonality ? `${botBackstory ? '\\n' : ''}Personality: ${botPersonality}` : ''}\n\n${isPracticeMode \n  ? 'IMPORTANT: Let your personality and background shine through naturally in your answers! Reference your experiences, use examples from your life, and respond in a way that reflects who you are.' \n  : 'IMPORTANT: Let your personality and background shine through in your answers! Draw from your experiences and interests when answering. Your personality should be evident in your examples and how you respond.'}` \n    : '';\n\n  const practiceTeachingGuidelinesAnswer: Record<string, string> = {\n    Beginner: `TEACHING APPROACH for ABSOLUTE BEGINNERS:\n- Use ONLY the most basic vocabulary (be, have, want, like, yes, no, good, bad)\n- Keep answers VERY short (3-8 words, one simple sentence)\n- Use only present tense and basic patterns\n- Speak simply and clearly, like teaching a child\n- Examples: \"I like it.\", \"Yes, this is good.\", \"I want to go.\"`,\n    Easy: `TEACHING APPROACH for EARLY LEARNERS:\n- Use simple, everyday vocabulary\n- Keep answers short and clear (1-2 simple sentences)\n- Use common verbs and nouns (think, know, home, food, friend)\n- Avoid idioms and complex structures\n- Examples: \"I like to eat pasta. It is very good.\", \"My home is in the city.\"`,\n    Medium: `TEACHING APPROACH for INTERMEDIATE LEARNERS:\n- Use standard conversational vocabulary\n- Natural sentences with everyday expressions (1-2 sentences)\n- Can include common idioms\n- Normal conversational complexity\n- Examples: \"I usually spend weekends with my family. We often go to the park.\", \"I feel positive about this because it's very interesting.\"`,\n    Hard: `TEACHING APPROACH for ADVANCED LEARNERS:\n- Use sophisticated, nuanced vocabulary\n- Complex sentences with advanced expressions (1-2 sentences)\n- Include idiomatic phrases and cultural references\n- Challenge with native-level language\n- Examples: \"This has significant implications for our understanding of the subject, particularly regarding the cultural context.\", \"I would characterize their relationship as nuanced and deeply influenced by historical factors.\"`\n  };\n\n  const prompt = isPracticeMode\n    ? `You are a NATIVE ${language} speaker and LANGUAGE TEACHER answering a question during a Q&A practice session about ${topic}.${characterContext}\n\nDIFFICULTY LEVEL: ${difficulty}\n${practiceTeachingGuidelinesAnswer[difficulty] || practiceTeachingGuidelinesAnswer.Medium}\n\nQuestion you're answering: ${userQuestion}\n\nTarget vocabulary to incorporate: ${vocabulary.join(\", \")}\n\nAnswer the question in ${language} that:\n- Directly answers the question\n- Naturally incorporates at least one vocabulary word from the list\n- Uses PERFECT grammar (no mistakes - you are teaching!)\n- Matches the language complexity for ${difficulty} level learners\n- Helps the student learn at their appropriate level\n${characterContext ? '- Reflects your unique personality and background through your teaching style and example choices' : ''}\n\nCRITICAL: Use PERFECT ${language} with NO mistakes, but adjust vocabulary complexity and sentence length for ${difficulty} level. You are a teacher helping students learn at their level.\n\nRespond with ONLY the answer in ${language}, nothing else.`\n    : `You are roleplaying as a human ${language} language LEARNER (not a native speaker) answering a question during a Q&A session about ${topic}.${characterContext}\n\nYour proficiency level: ${difficulty} (approximately ${targetAccuracy}% accuracy)\n${difficultyInstructions[difficulty] || difficultyInstructions.Medium}\n\n${mistakeTypes}\n\nQuestion you're answering: ${userQuestion}\n\nTarget vocabulary to incorporate: ${vocabulary.join(\", \")}\n\nAnswer the question in ${language} with 1-2 sentences that:\n- Directly answer the question\n- Naturally incorporate at least one vocabulary word from the list\n- Contains realistic learner mistakes appropriate for ${difficulty} level\n- Sounds like a believable human learner would speak\n- Still communicates the intended meaning despite mistakes\n${characterContext ? '- Reflects your unique personality and background in how you phrase things' : ''}\n\nIMPORTANT: You MUST include realistic mistakes. Do NOT generate perfect ${language}. Make it sound like a real learner at ${targetAccuracy}% proficiency.\n\nRespond with ONLY the answer in ${language}, nothing else.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: isPracticeMode \n            ? `You are a NATIVE ${language} speaker and LANGUAGE TEACHER. Generate PERFECT ${language} with no mistakes, but adjust vocabulary complexity and sentence length for ${difficulty} level learners. You are teaching, not testing - help students learn at their appropriate level.`\n            : `You are roleplaying as a ${language} language learner at ${difficulty} level with ${targetAccuracy}% proficiency. You make realistic, believable mistakes that real learners make. You are NOT a native speaker - you are a student with imperfect language skills.`\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      max_tokens: 150,\n    });\n\n    return response.choices[0].message.content || getFallbackResponse(language);\n  } catch (error: any) {\n    console.error(\"Error generating bot response:\", error);\n    console.error(\"Error details:\", error.message, error.response?.data);\n    return getFallbackResponse(language);\n  }\n}\n\nfunction getFallbackResponse(language: string): string {\n  const fallbacks: Record<string, string> = {\n    Chinese: \"有意思！请继续说。\",\n    Spanish: \"¡Interesante! Por favor continúa.\",\n    Italian: \"Interessante! Per favore continua.\",\n  };\n  return fallbacks[language] || \"Please continue.\";\n}\n\nexport async function validateQuestion(\n  question: string,\n  topic: string,\n  vocabulary: string[],\n  language: string\n): Promise<{ isValid: boolean; message: string }> {\n  const prompt = `You are a language learning assistant validating if a student's question is answerable and relevant to the conversation topic.\n\nTopic: ${topic}\n\nStudent's question: \"${question}\"\n\nValidation criteria - the question should be:\n1. Related to \"${topic}\" (can be loosely connected, but must have some relevance)\n2. Actually answerable - someone should be able to provide a meaningful response\n3. Clear enough to understand what's being asked (even with grammar/spelling errors)\n\nACCEPT questions that:\n- Are related or loosely connected to the topic\n- Make sense and can be answered, even if imperfectly worded\n- Have grammar/spelling errors but the intent is clear\n- Ask about opinions, experiences, or information related to the topic\n\nREJECT questions that:\n- Are completely off-topic (e.g., asking about cars when topic is food)\n- Are too vague or nonsensical to answer meaningfully\n- Don't actually ask anything (just statements or gibberish)\n- Are impossible to respond to with a real answer\n\nIGNORE (don't check):\n- Grammar or spelling quality\n- Perfect language correctness\n- Vocabulary sophistication\n\nThe key test: \"Could a reasonable person provide a meaningful answer to this question about ${topic}?\"\n\nRespond with JSON:\n{\n  \"isValid\": boolean (true if answerable and topic-related, false otherwise),\n  \"message\": string (brief, encouraging explanation if rejecting - suggest what kind of question would work)\n}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a supportive validator helping language learners ask better questions. Accept questions that are answerable and topic-related, even if imperfectly worded. Reject only if truly off-topic or impossible to answer meaningfully.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 100,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      isValid: result.isValid ?? true,\n      message: result.message || \"\"\n    };\n  } catch (error: any) {\n    console.error(\"Error validating question:\", error);\n    // On error, allow the question through\n    return { isValid: true, message: \"\" };\n  }\n}\n\ninterface VocabularyWord {\n  word: string;\n  type: \"noun\" | \"verb\" | \"adjective\";\n  english: string;\n  pinyin?: string;\n}\n\nexport async function generateVocabulary(\n  topic: string,\n  language: string,\n  difficulty: \"Beginner\" | \"Easy\" | \"Medium\" | \"Hard\"\n): Promise<VocabularyWord[]> {\n  const wordCounts = {\n    Beginner: 3,\n    Easy: 4,\n    Medium: 6,\n    Hard: 9\n  };\n  \n  const count = wordCounts[difficulty];\n  \n  const difficultyInstructions: Record<string, string> = {\n    Beginner: \"Generate the MOST BASIC vocabulary words possible - the absolute first words someone would learn (like 'I', 'you', 'hello', 'yes', 'no', 'good'). These should be survival-level essential words.\",\n    Easy: \"Generate EXTREMELY simple, basic vocabulary words that absolute beginners would know (like 'go', 'eat', 'water', 'yes', 'no', 'hello'). These should be the most fundamental words in the language.\",\n    Medium: \"Generate conversational vocabulary words that intermediate learners would use in everyday situations. Mix common verbs, adjectives, and nouns.\",\n    Hard: \"Generate advanced vocabulary words including nuanced verbs, descriptive adjectives, and sophisticated nouns. Include idiomatic expressions or compound words when appropriate.\"\n  };\n\n  const prompt = `You are a ${language} language teacher creating vocabulary for a lesson about \"${topic}\" at ${difficulty} difficulty level.\n\n${difficultyInstructions[difficulty]}\n\nGenerate EXACTLY ${count} vocabulary words that:\n- Are relevant to the topic \"${topic}\"\n- Include a VARIETY of word types: verbs, adjectives, and nouns (not just nouns!)\n- Match the ${difficulty} difficulty level\n- Are useful for conversation practice\n\n${language === \"Chinese\" ? \"Include pinyin romanization for each word.\" : \"\"}\n\nRespond with JSON in this exact format:\n{\n  \"words\": [\n    {\n      \"word\": \"word in ${language}\",\n      \"type\": \"noun\" | \"verb\" | \"adjective\",\n      \"english\": \"English translation\"${language === \"Chinese\" ? ',\\n      \"pinyin\": \"pinyin romanization\"' : ''}\n    }\n  ]\n}\n\nMake sure to return EXACTLY ${count} words.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a ${language} language teacher creating diverse, practical vocabulary lists. Always include varied word types (verbs, adjectives, nouns).`\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 500,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    if (!result.words || !Array.isArray(result.words)) {\n      throw new Error(\"Invalid response format from AI\");\n    }\n    \n    // Ensure we have exactly the right number of words\n    const words = result.words.slice(0, count);\n    \n    return words.map((w: any) => ({\n      word: w.word || \"\",\n      type: w.type || \"noun\",\n      english: w.english || \"\",\n      ...(language === \"Chinese\" && { pinyin: w.pinyin || \"\" })\n    }));\n  } catch (error: any) {\n    console.error(\"Error generating vocabulary:\", error);\n    throw new Error(\"Failed to generate vocabulary\");\n  }\n}\n\nexport async function translateText(text: string, fromLanguage: string): Promise<string> {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\", // Use cheaper model for translation\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a professional translator. Translate the given ${fromLanguage} text to English. Provide ONLY the English translation, nothing else. Be natural and accurate.`\n        },\n        {\n          role: \"user\",\n          content: text\n        }\n      ],\n      temperature: 0.3, // Lower temperature for more consistent translations\n    });\n\n    const translation = completion.choices[0]?.message?.content?.trim() || text;\n    return translation;\n  } catch (error: any) {\n    console.error(\"Error translating text:\", error);\n    throw new Error(`Failed to translate text: ${error.message}`);\n  }\n}\n\nexport async function generateExampleResponse(params: {\n  language: string;\n  difficulty: string;\n  topic: string;\n  vocabulary: string[];\n  phase: \"user-question\" | \"user-answer\";\n  context?: string; // The bot's question if user is answering\n}): Promise<string> {\n  const { language, difficulty, topic, vocabulary, phase, context } = params;\n\n  const phaseInstruction = phase === \"user-question\" \n    ? `Generate a HINT to help them ask a question in ${language} about the topic \"${topic}\".`\n    : `Generate a HINT to help them answer this question: \"${context}\"`;\n\n  const prompt = `You are a ${language} language teacher helping a ${difficulty} level student who is stuck and needs a hint.\n\n${phaseInstruction}\n\nTopic: ${topic}\nDifficulty: ${difficulty}\nAvailable vocabulary to use: ${vocabulary.join(\", \")}\n\nCreate a HELPFUL HINT that:\n- Gives a clue without providing the full answer\n- Suggests 1-2 vocabulary words they could use\n- Provides guidance about grammar structure or approach\n- Encourages them to construct their own response\n- Is appropriate for ${difficulty} level\n\nIMPORTANT: Give a HINT, NOT a complete answer. Help them think through it themselves!\n\nExamples of good hints:\n- \"Try using the word '___' to talk about this topic\"\n- \"Think about how you would describe this in simple terms using '___'\"\n- \"Start with a basic greeting, then mention '___'\"\n\nRespond with ONLY the hint in English, keeping it brief (1-2 sentences).`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a helpful ${language} language teacher creating clear examples for beginners.`\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      temperature: 0.7,\n      max_tokens: 150,\n    });\n\n    const example = response.choices[0]?.message?.content?.trim() || \"\";\n    return example;\n  } catch (error: any) {\n    console.error(\"Error generating example response:\", error);\n    throw new Error(`Failed to generate example: ${error.message}`);\n  }\n}\n","size_bytes":40046},"client/src/components/Leaderboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Trophy, Medal, Crown, Swords } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface LeaderboardEntry {\n  rank?: number;\n  username: string;\n  elo: number;\n  wins: number;\n  losses: number;\n  isCurrentUser?: boolean;\n}\n\ninterface LeaderboardProps {\n  currentUserId?: string;\n  currentLanguage?: string;\n}\n\nexport default function Leaderboard({\n  currentUserId,\n  currentLanguage = \"Chinese\"\n}: LeaderboardProps) {\n  const [selectedLanguage, setSelectedLanguage] = useState(currentLanguage);\n  \n  // Get current month and year for season display\n  const currentDate = new Date();\n  const currentMonth = currentDate.toLocaleDateString('en-US', { month: 'long' });\n  const currentYear = currentDate.getFullYear();\n  \n  // Generate list of available months (current month + last 5 months)\n  const generateMonthOptions = () => {\n    const options = [];\n    const today = new Date();\n    \n    for (let i = 0; i < 6; i++) {\n      const date = new Date(today.getFullYear(), today.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', { month: 'long' });\n      const year = date.getFullYear();\n      const value = `${year}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      \n      options.push({\n        label: i === 0 ? `${month} ${year} (Current)` : `${month} ${year}`,\n        value\n      });\n    }\n    \n    return options;\n  };\n  \n  const monthOptions = generateMonthOptions();\n  const [selectedMonth, setSelectedMonth] = useState(monthOptions[0].value);\n  \n  // Parse selected month to display in season indicator\n  const [selectedYear, selectedMonthNum] = selectedMonth.split('-');\n  const selectedDate = new Date(parseInt(selectedYear), parseInt(selectedMonthNum) - 1, 1);\n  const selectedMonthName = selectedDate.toLocaleDateString('en-US', { month: 'long' });\n  const selectedYearNum = selectedDate.getFullYear();\n\n  const { data: leaderboardData, isLoading } = useQuery<LeaderboardEntry[]>({\n    queryKey: [`/api/leaderboard?language=${selectedLanguage}&month=${selectedMonth}`],\n    refetchOnWindowFocus: false,\n  });\n\n  const entries = leaderboardData?.map((entry, index) => ({\n    ...entry,\n    rank: index + 1,\n  })) || [];\n  \n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Crown className=\"w-5 h-5 text-highlight\" />;\n    if (rank === 2) return <Medal className=\"w-5 h-5 text-muted-foreground\" />;\n    if (rank === 3) return <Medal className=\"w-5 h-5 text-amber-600\" />;\n    return null;\n  };\n\n  const getRankBadgeColor = (rank: number) => {\n    if (rank === 1) return \"bg-highlight text-highlight-foreground border-0\";\n    if (rank === 2) return \"bg-muted text-muted-foreground border-0\";\n    if (rank === 3) return \"bg-amber-500 text-white border-0\";\n    return \"\";\n  };\n\n  return (\n    <div className=\"min-h-[calc(100vh-4rem)] w-full p-6\">\n      <div className=\"max-w-5xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-2xl bg-highlight mb-6\">\n            <Trophy className=\"w-10 h-10 text-highlight-foreground\" />\n          </div>\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-foreground mb-4\">\n            Global Leaderboard\n          </h1>\n          <p className=\"text-lg text-muted-foreground mb-4\">\n            Top {selectedLanguage} learners • {selectedMonthName} {selectedYearNum} Season\n          </p>\n          \n          {/* Month Selector */}\n          <div className=\"flex justify-center\">\n            <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n              <SelectTrigger className=\"w-64\" data-testid=\"select-month\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {monthOptions.map((option) => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Language Tabs */}\n        <Card className=\"mb-6 border-accent/50 shadow-md\">\n          <CardContent className=\"pt-6\">\n            <Tabs value={selectedLanguage} onValueChange={setSelectedLanguage} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"Chinese\" data-testid=\"tab-chinese\">🇨🇳 Chinese</TabsTrigger>\n                <TabsTrigger value=\"Spanish\" data-testid=\"tab-spanish\">🇪🇸 Spanish</TabsTrigger>\n                <TabsTrigger value=\"Italian\" data-testid=\"tab-italian\">🇮🇹 Italian</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Leaderboard Entries */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"pt-6\">\n            <div className=\"space-y-3\">\n              {entries.map((entry) => (\n                <div\n                  key={entry.rank}\n                  className={`flex items-center gap-4 p-4 rounded-lg transition-all ${\n                    entry.isCurrentUser\n                      ? 'bg-primary/10 border-2 border-primary/40'\n                      : 'bg-card hover-elevate'\n                  } ${entry.rank <= 3 ? 'ring-2 ring-offset-2 ' + (\n                    entry.rank === 1 ? 'ring-highlight/50' :\n                    entry.rank === 2 ? 'ring-muted/50' :\n                    'ring-amber-500/50'\n                  ) : ''}`}\n                  data-testid={`leaderboard-entry-${entry.rank}`}\n                >\n                  <div className=\"w-14 flex justify-center\">\n                    {getRankIcon(entry.rank) || (\n                      <span className=\"font-mono font-bold text-lg text-muted-foreground\">#{entry.rank}</span>\n                    )}\n                  </div>\n\n                  <Avatar className={`w-12 h-12 border-2 ${\n                    entry.rank === 1 ? 'border-highlight' :\n                    entry.rank === 2 ? 'border-muted' :\n                    entry.rank === 3 ? 'border-amber-500' :\n                    'border-border'\n                  }`}>\n                    <AvatarFallback className={`font-semibold ${\n                      entry.rank <= 3 ? getRankBadgeColor(entry.rank) : 'bg-muted text-muted-foreground'\n                    }`}>\n                      {entry.username.slice(0, 2).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold text-base flex items-center gap-2\">\n                      {entry.username}\n                      {entry.isCurrentUser && (\n                        <Badge className=\"text-xs bg-primary/20 text-primary border-primary/30\">You</Badge>\n                      )}\n                      {entry.rank <= 3 && !entry.isCurrentUser && (\n                        <Swords className=\"w-4 h-4 text-highlight\" />\n                      )}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                      <span className=\"text-success font-semibold\">{entry.wins}W</span>\n                      <span className=\"text-muted-foreground\">-</span>\n                      <span className=\"text-destructive font-semibold\">{entry.losses}L</span>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <div className={`font-mono font-bold text-2xl ${\n                      entry.rank === 1 ? 'text-highlight' :\n                      entry.rank === 2 ? 'text-muted-foreground' :\n                      entry.rank === 3 ? 'text-amber-600' :\n                      ''\n                    }`}>{entry.elo}</div>\n                    <div className=\"text-xs text-muted-foreground\">Fluency Score</div>\n                  </div>\n                </div>\n              ))}\n\n              {isLoading && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading leaderboard...\n                </div>\n              )}\n\n              {!isLoading && entries.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <Trophy className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <p className=\"text-muted-foreground\">No players yet. Be the first to compete!</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8952},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/VocabularyBadge.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\n\ninterface VocabularyBadgeProps {\n  chinese: string;\n  pinyin: string;\n  language?: string;\n  variant?: \"default\" | \"secondary\" | \"outline\";\n  className?: string;\n  definition?: string;\n}\n\nexport default function VocabularyBadge({ \n  chinese, \n  pinyin, \n  language = \"Chinese\", \n  variant = \"secondary\", \n  className = \"\",\n  definition\n}: VocabularyBadgeProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const variantClasses = {\n    default: \"bg-primary text-primary-foreground\",\n    secondary: \"bg-secondary text-secondary-foreground\",\n    outline: \"border border-border bg-background\"\n  };\n\n  // Only show pinyin/romanization for Chinese\n  const showPinyin = language === \"Chinese\";\n\n  if (definition) {\n    return (\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <button\n            type=\"button\"\n            className={`inline-flex flex-col items-center gap-0.5 px-2.5 py-1.5 rounded-md text-xs font-semibold ${variantClasses[variant]} ${className} cursor-pointer focus:outline-none`}\n            data-testid={`vocab-badge-${chinese}`}\n            onMouseEnter={() => setIsOpen(true)}\n            onMouseLeave={() => setIsOpen(false)}\n            aria-label={`${chinese} - ${definition}`}\n          >\n            {showPinyin && <span className=\"text-[10px] opacity-70 leading-none\">{pinyin}</span>}\n            <span className=\"leading-none\">{chinese}</span>\n          </button>\n        </PopoverTrigger>\n        <PopoverContent \n          className=\"w-auto max-w-xs p-2\"\n          onOpenAutoFocus={(e) => e.preventDefault()}\n        >\n          <p className=\"text-xs\">{definition}</p>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n\n  return (\n    <div \n      className={`inline-flex flex-col items-center gap-0.5 px-2.5 py-1.5 rounded-md text-xs font-semibold ${variantClasses[variant]} ${className}`}\n      data-testid={`vocab-badge-${chinese}`}\n    >\n      {showPinyin && <span className=\"text-[10px] opacity-70 leading-none\">{pinyin}</span>}\n      <span className=\"leading-none\">{chinese}</span>\n    </div>\n  );\n}\n","size_bytes":2215},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"replit.md":{"content":"# Verbio - Competitive Language Learning Platform\n\n## Overview\nVerbio is an AI-powered, competitive language learning platform designed to gamify language acquisition. It enables users to participate in themed conversations with opponents or AI bots, receive immediate AI feedback, and track progress through a Fluency Score-ranked competitive system. The platform aims to transform language learning into an engaging, measurable experience reminiscent of competitive online gaming, offering real-time multiplayer duels, AI-generated vocabulary, and a comprehensive Fluency Score ranking system.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### UI/UX\nThe frontend is built with React 18, TypeScript, and Vite, utilizing Wouter for routing, TanStack Query for server state, and shadcn/ui with Tailwind CSS for styling. The design features a Chess.com-inspired dark theme with high contrast and monospace fonts, emphasizing a competitive aesthetic. Key UI elements include real-time conversation interfaces, timer-based match mechanics, AI-graded scoring, leaderboards, an analytics dashboard with progress charts, and a fully responsive design optimized for mobile. Mobile UI includes compact vocabulary badges, collapsible topic headers, smaller message bubbles, and dynamic viewport handling for virtual keyboards. The match UI prioritizes immersion by minimizing distractions. A hamburger menu provides access to profile details, CEFR level explanations, monthly leaderboards, sound toggle (centered), and How to Play tutorial (centered). The streak multiplier explanation card is collapsible and starts collapsed. A progressive onboarding flow shows dialogs in sequence: Initial Language → Initial Level → How to Play (for new users only, once globally), followed by the install prompt on mobile.\n\n### Technical Implementations\nThe backend uses Express.js with Node.js and TypeScript, providing RESTful APIs for core functionalities. Zod is used for schema validation. OpenAI API (GPT-4o and GPT-4o-mini) is integrated for conversation grading, bot interactions, and vocabulary generation, supported by a caching system. WebSocket facilitates real-time multiplayer matchmaking with Fluency Score-based pairing and AI bot fallback. Bots adjust language complexity based on difficulty and mode, with distinct behaviors for \"Practice Mode\" (teaching, perfect grammar) and \"Competitive Mode\" (simulating learners with realistic mistakes). A bot personality system enhances conversations by providing unique backstories and personas.\n\n**Connection & Performance Safeguards**: The system includes WebSocket connection tracking with a 500 concurrent connection limit, automatic cleanup on disconnect/error, user-friendly capacity messages, and database health monitoring with periodic stats logging (every 5 minutes).\n\n### Feature Specifications\n- **Practice vs. Competitive Modes**: Practice mode offers perfect AI bots without Fluency Score impact; Competitive mode involves Fluency Score changes, even against bots. Practice matches are excluded from competitive analytics.\n- **Real Multiplayer Matchmaking**: WebSocket-based matchmaking pairs players by Fluency Score, language, and difficulty, with AI bot fallback and shared, dynamically generated vocabulary.\n- **AI-Generated Vocabulary**: Dynamic vocabulary generation based on topic and difficulty, with 24-hour caching.\n- **Fluency Score Ranking System**: An Elo-based system (K-factor=32) for competitive ranking.\n- **Competitive Bot Matches**: Bots with varied Fluency Scores (600-1600) and target accuracy ranges (50-90%).\n- **Dual Bot System**: Separate sets of 19 bots for Practice Mode (native speakers, perfect fluency) and Competitive Mode (difficulty-rated, unique personalities).\n- **Difficulty & Penalty System**: Beginner, Easy, Medium, and Hard difficulties with varying timers and rounds. Consistent grading standards across all difficulties. Features include a 20-point penalty for skipping questions (clearly displayed on skip button), an exclusive Beginner mode skip feature, Practice mode hover-to-translate, and a \"Need help?\" feature with a 15-point penalty.\n- **Quick Rematch System**: After completing a match, clicking \"New Match\" automatically queues a new game with the same difficulty, language, topic, and mode settings for seamless continuous play.\n- **Real-Time Vocabulary Visual Feedback**: Vocabulary badges visually update when typed in the input field, providing instant feedback.\n- **Expanded Theme System**: 21 themes with difficulty-specific vocabulary across multiple languages.\n- **Turn-Based Q&A**: Structured conversation flow with AI-driven question validation.\n- **Ultra-Detailed Premium AI Feedback System**: Premium users receive comprehensive message-by-message analysis, including grammar corrections, vocabulary suggestions, native speaker comparisons, strengths, and study recommendations.\n- **Guest Mode**: Limited features for guest users, rate-limited to 5 matches per day.\n- **Streaks & Multiplier System**: Tracks competitive win streaks and daily login streaks per language. Features a streak-based Fluency Score multiplier: +5% per 3-day login streak tier (max +20%), +10% per 2-win streak tier (max +30%), with a total cap of 1.5x. Multipliers apply only to wins, not losses, are language-specific (each language has independent streaks), and are calculated on the backend for consistency. Multiplier explanation is displayed in the mobile menu below streak stats.\n- **Friend System**: Supports bidirectional friend relationships, discovery, and stat display.\n- **Private Match Invites**: Authenticated users can create unique, time-limited code-based invites.\n- **Premium Subscription System**: Stripe-powered subscriptions offering unlimited Medium/Hard matches, topic selection in practice mode, and detailed AI feedback for premium users. Free users receive daily limits and two free premium AI feedback matches.\n- **Analytics Dashboard**: Comprehensive progress tracking featuring Fluency Score progression, skill distribution, match performance, and AI-powered \"Focus Areas\" with study recommendations.\n- **CEFR Fluency Level System**: Users earn CEFR levels (A1-C2) based on ELO ranges, with level-up celebrations.\n- **Monthly Leaderboard Seasons**: Displays current and past monthly rankings based on competitive ELO.\n\n## External Dependencies\n\n### AI Services\n- **OpenAI API**: GPT-4o (grading), GPT-4o-mini (bot Q&A, vocabulary).\n\n### Database\n- **Neon Postgres**: Serverless PostgreSQL.\n- **Drizzle ORM**: Type-safe SQL query builder.\n- **drizzle-kit**: For schema migrations.\n\n### UI Component Libraries\n- **Radix UI**: Headless components.\n- **Lucide React**: Icons.\n- **class-variance-authority & clsx**: Dynamic CSS.\n- **pinyin-pro**: Chinese pinyin.\n- **date-fns**: Date manipulation.\n\n### Form & Validation\n- **React Hook Form**: Form state management.\n- **Zod**: Runtime type validation.\n- **drizzle-zod**: Database schema to Zod.\n\n### Authentication & Session Management\n- **Passport.js**: Server-side authentication middleware.\n- **Google OAuth 2.0**: Direct Google OAuth.\n- **Username/Password Auth**: Traditional credential-based authentication with scrypt hashing.\n- **PostgreSQL Sessions**: Secure session storage using `connect-pg-simple`.\n\n### Payment Processing\n- **Stripe**: Payment processing for subscriptions.\n- **@stripe/stripe-js, @stripe/react-stripe-js**: Stripe SDKs.\n- **Webhook Integration**: For automatic subscription status updates.","size_bytes":7548},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"design_guidelines.md":{"content":"# Design Guidelines: Blue/Violet Tech Theme\n\n## Design Approach\n\n**Selected Approach:** Modern Tech Blue/Violet Color Scheme\n\n**Justification:** A crisp, professional tech aesthetic with blue as the primary color and violet accents. This creates a modern, trustworthy appearance suitable for a language learning platform focused on competitive progression and AI-powered feedback.\n\n**Key Design Principles:**\n- Clean, modern interface with blue/violet accents\n- High contrast typography for readability\n- Semantic color usage (success green, error red, highlight gold)\n- Professional tech aesthetic\n- Consistent shadcn component usage\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Primary Colors:**\n- **Primary Blue** (`#2563EB` / HSL: 217 81% 53%): Main brand color for buttons, links, primary actions\n- **Accent Violet** (`#6366F1` / HSL: 239 84% 67%): Secondary accent for highlights and gradients\n- **Background** (`#F8FAFC` / HSL: 210 40% 98%): Very light gray, airy background\n- **Surface/Cards** (`#FFFFFF` / HSL: 0 0% 100%): Pure white for panels and cards\n\n**Text Colors:**\n- **Primary Text** (`#0F172A` / HSL: 222 47% 11%): Near-black, high-contrast typography\n- **Secondary Text** (`#64748B` / HSL: 215 16% 47%): Soft gray for sublabels and timestamps\n\n**Semantic Colors:**\n- **Success Green** (`#10B981` / HSL: 160 84% 39%): Wins, progress, positive feedback\n- **Error Red** (`#EF4444` / HSL: 0 72% 60%): Errors, losses, negative feedback  \n- **Highlight Gold** (`#FACC15` / HSL: 45 93% 53%): Achievements, rank ups, Elo gains\n\n**Usage Guidelines:**\n- Use primary blue for all CTAs and important actions\n- Accent violet for secondary highlights and special features\n- Success green for positive outcomes (wins, good grammar scores)\n- Error red for negative outcomes (losses, mistakes)\n- Highlight gold for achievements and special recognition\n\n---\n\n### B. Typography\n\n**Font Stack:**\n- **Sans Serif** (Primary): Inter, -apple-system, system-ui, sans-serif\n- **Monospace** (Stats/Elo): 'JetBrains Mono', 'Courier New', monospace\n- **Serif** (Decorative): Georgia, serif\n\n**Text Hierarchy:**\n- **Hero Titles**: 4xl-6xl, bold, foreground color\n- **Page Titles**: 2xl-4xl, bold\n- **Section Headers**: xl-2xl, semibold\n- **Body Text**: base, regular\n- **Supporting Text**: sm-base, muted-foreground\n- **Micro Copy**: xs-sm, muted-foreground\n\n---\n\n### C. Layout System\n\n**Spacing Primitives:** Tailwind units of **4, 6, 8, 12, 16** for consistent rhythm\n- Component padding: `p-6`, `p-8` for cards\n- Section spacing: `gap-6`, `gap-8`, `space-y-6`\n- Page margins: `px-4` with `container mx-auto`\n\n**Grid Structure:**\n- Match Finder: 3-column grid (`lg:grid-cols-3`) - Stats (1 col) | Controls (2 cols)\n- Content constraint: `max-w-7xl mx-auto`\n- Responsive breakpoints: sm, md, lg, xl\n\n**Layout Patterns:**\n- Hero sections with icon containers\n- Split layouts for stats vs. actions\n- Card-based information architecture\n- Proper spacing and visual hierarchy\n\n---\n\n### D. Component Library\n\n**Buttons:**\n- Primary: Blue background, white text\n- Secondary: Outlined with secondary colors  \n- Destructive: Red for dangerous actions\n- Ghost: Transparent with hover effects\n- Sizes: sm, default, lg\n- **Never override hover states** - use built-in elevate system\n\n**Cards:**\n- White background with subtle borders\n- Colored borders for category distinction (primary/20, accent/20, success/20)\n- Shadow-sm or shadow-md for depth\n- Proper padding (p-6, p-8)\n\n**Badges:**\n- Semantic colors with 20% opacity backgrounds\n- Bordered variants with 30% opacity borders\n- Text matches the badge category color\n- Examples: primary/20 bg, accent/20 bg, success/20 bg\n\n**Icons:**\n- Lucide React icon set\n- Consistent sizing (w-4 h-4, w-5 h-5, w-6 h-6)\n- Icon containers: rounded with colored backgrounds\n- Match icon color to container theme\n\n---\n\n### E. Specific Component Guidelines\n\n**Match Finder:**\n- Hero with primary blue icon container\n- Stats card with primary accents\n- Difficulty selector with clear typography\n- Primary blue CTA for competitive matches\n- Outlined button for practice mode\n\n**Landing Page:**\n- Large hero with primary icon\n- Feature cards with colored borders (primary, accent, success)\n- Icon containers matching card themes\n- Clear CTA hierarchy\n\n**Duel Interface:**\n- Header with primary accents\n- Topic section with accent violet icon\n- User messages: primary blue background\n- Bot messages: muted background\n- Color-coded turn indicators\n- Side panel with progress and stats\n\n**Leaderboard:**\n- Gold highlight for #1 rank\n- Gray for #2, amber for #3\n- Primary accents for current user\n- Success/destructive for win/loss stats\n- Clear visual hierarchy\n\n---\n\n### F. Interactive States\n\n**Hover & Active:**\n- Use built-in `hover-elevate` and `active-elevate-2` utilities\n- Never manually override hover colors\n- Elevation automatically adjusts for any background\n\n**Focus:**\n- Ring color matches primary blue\n- Clear focus indicators for accessibility\n\n**Disabled:**\n- Reduced opacity (60%)\n- No pointer events\n- Muted appearance\n\n---\n\n### G. Accessibility\n\n**Contrast:**\n- Primary text (#0F172A) on white: AAA compliant\n- Muted text (#64748B) on white: AA compliant\n- All interactive elements meet WCAG standards\n\n**Interactive Elements:**\n- Minimum touch target: 44x44px\n- Clear focus indicators\n- Descriptive labels and ARIA attributes\n- data-testid for all interactive elements\n\n---\n\n### H. Responsive Design\n\n**Breakpoints:**\n- Mobile: < 768px\n- Tablet: 768px - 1024px\n- Desktop: > 1024px\n\n**Mobile Optimizations:**\n- Stacked layouts on mobile\n- Larger touch targets\n- Simplified navigation\n- Optimized typography scale\n\n---\n\n## Implementation Notes\n\n1. **Always use semantic color tokens** (primary, accent, success, destructive) instead of hardcoded hex values\n2. **Maintain consistent spacing** using the defined spacing scale\n3. **Follow shadcn component patterns** - don't reinvent components\n4. **Use hover-elevate utilities** - never manual hover states\n5. **Test in light and dark modes** - ensure proper contrast in both\n6. **Add data-testid attributes** to all interactive elements\n\n---\n\n## Recent Changes (October 2025)\n\n- **Updated to blue/violet tech theme** from previous purple/cyan gradient system\n- **Removed gradient backgrounds** in favor of clean white/light gray\n- **Implemented semantic color system** with primary blue, accent violet\n- **Added highlight gold** for achievements and special recognition\n- **Maintained Swords icon** as primary brand element\n- **Improved accessibility** with higher contrast ratios\n","size_bytes":6568},"client/src/components/DuelInterface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Send, Flag, Clock, HelpCircle, Swords, Type, ChevronDown, ChevronUp, Info, Crown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport VocabularyBadge from \"@/components/VocabularyBadge\";\nimport TextWithPinyin from \"@/components/TextWithPinyin\";\nimport AccentKeyboard from \"@/components/AccentKeyboard\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Message, GradingResult } from \"@shared/schema\";\n\ninterface VocabWord {\n  word: string;\n  romanization: string;\n  definition?: string;\n}\n\ninterface DuelInterfaceProps {\n  topic?: string;\n  vocabulary?: VocabWord[];\n  opponentName?: string;\n  opponentElo?: number;\n  userElo?: number;\n  userName?: string;\n  isPremium?: boolean;\n  isBot?: boolean;\n  isPracticeMode?: boolean;\n  language?: string;\n  difficulty?: string;\n  onComplete?: (result: GradingResult, messages?: Message[]) => void;\n  onForfeit?: () => void;\n  startsFirst?: boolean;\n  matchId?: string;\n  playerId?: string;\n  multiplayerWsRef?: React.MutableRefObject<WebSocket | null>;\n  botId?: string;\n}\n\ntype TurnPhase = \"bot-question\" | \"user-answer\" | \"user-question\" | \"bot-answer\";\n\nexport default function DuelInterface({\n  topic = \"Travel & Tourism\",\n  vocabulary = [\n    { word: \"旅行\", romanization: \"lǚxíng\" },\n    { word: \"目的地\", romanization: \"mùdìdì\" },\n    { word: \"探索\", romanization: \"tànsuǒ\" }\n  ],\n  opponentName = \"AI Bot\",\n  opponentElo = 1520,\n  userElo = 1000,\n  userName = \"You\",\n  isPremium = false,\n  isBot = true,\n  isPracticeMode = false,\n  language = \"Chinese\",\n  difficulty = \"Medium\",\n  onComplete,\n  onForfeit,\n  startsFirst = false,\n  matchId,\n  playerId,\n  multiplayerWsRef,\n  botId\n}: DuelInterfaceProps) {\n  const { toast } = useToast();\n\n  // Get timer duration based on difficulty\n  const getTimerDuration = () => {\n    // All difficulties now have 60 second rounds\n    return 60;\n  };\n\n  // Get max rounds based on difficulty\n  const getMaxRounds = () => {\n    switch (difficulty) {\n      case \"Beginner\": return 2;   // Only 2 rounds for beginners\n      case \"Easy\": return 3;\n      case \"Medium\": return 4;\n      case \"Hard\": return 5;\n      default: return 3;\n    }\n  };\n\n  // Determine initial turn phase based on who starts first\n  const initialTurnPhase: TurnPhase = startsFirst ? \"user-question\" : \"bot-question\";\n  \n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [timeLeft, setTimeLeft] = useState(getTimerDuration());\n  const [round, setRound] = useState(1);\n  const [turnPhase, setTurnPhase] = useState<TurnPhase>(initialTurnPhase);\n  const [isGrading, setIsGrading] = useState(false);\n  const [botQuestions, setBotQuestions] = useState<string[]>([]);\n  const [skippedQuestions, setSkippedQuestions] = useState(0);\n  const [inactivityTimeLeft, setInactivityTimeLeft] = useState(60);\n  const [validationError, setValidationError] = useState(\"\");\n  const [hoveredMessageIndex, setHoveredMessageIndex] = useState<number | null>(null);\n  const [translations, setTranslations] = useState<Record<number, string>>({});\n  const [showExample, setShowExample] = useState(false);\n  const [exampleText, setExampleText] = useState(\"\");\n  const [helpPenalty, setHelpPenalty] = useState(0);\n  const [helpUsedThisTurn, setHelpUsedThisTurn] = useState(false);\n  const [usedVocabulary, setUsedVocabulary] = useState<Set<string>>(new Set());\n  const [showAccentKeyboard, setShowAccentKeyboard] = useState(false);\n  const [showTopicHeader, setShowTopicHeader] = useState(true);\n  const [showHelpArea, setShowHelpArea] = useState(false); // Default to collapsed for mobile\n  const maxRounds = getMaxRounds();\n  \n  // Refs to avoid recreating timer interval\n  const shouldCountRef = useRef(false);\n  const currentRoundRef = useRef(1);\n  const currentTurnPhaseRef = useRef<TurnPhase>(initialTurnPhase);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const inactivityCountRef = useRef(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const scrollLockActiveRef = useRef(false);\n\n  const botQuestionMutation = useMutation({\n    mutationFn: async () => {\n      const vocabStrings = vocabulary.map(v => v.word);\n      const response = await apiRequest(\"POST\", \"/api/bot-question\", {\n        topic,\n        vocabulary: vocabStrings,\n        language,\n        difficulty,\n        previousQuestions: botQuestions,\n        isPracticeMode,\n        botId\n      });\n      return await response.json();\n    },\n  });\n\n  const translateMutation = useMutation({\n    mutationFn: async ({ text, fromLanguage }: { text: string; fromLanguage: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/translate\", {\n        text,\n        fromLanguage,\n        toLanguage: \"English\"\n      });\n      return await response.json();\n    },\n  });\n\n  const exampleMutation = useMutation({\n    mutationFn: async () => {\n      // Prevent duplicate requests during the same turn\n      if (helpUsedThisTurn) {\n        throw new Error(\"Help already used this turn\");\n      }\n\n      const vocabStrings = vocabulary.map(v => v.word);\n      const currentBotQuestion = messages.filter(m => m.sender === \"opponent\").slice(-1)[0]?.text || \"\";\n      const requestedRound = round; // Capture round when request is made\n      const requestedPhase = turnPhase; // Capture phase when request is made\n      \n      const response = await apiRequest(\"POST\", \"/api/generate-example\", {\n        language,\n        difficulty,\n        topic,\n        vocabulary: vocabStrings,\n        phase: turnPhase === \"user-question\" ? \"user-question\" : \"user-answer\",\n        context: turnPhase === \"user-answer\" ? currentBotQuestion : undefined\n      });\n      const result = await response.json();\n      return { ...result, requestedRound, requestedPhase }; // Return with round and phase markers\n    },\n    onSuccess: (data) => {\n      // Only apply help if we're still on the same round and phase\n      if (data.requestedRound === round && data.requestedPhase === turnPhase) {\n        setExampleText(data.example);\n        setShowExample(true);\n        setHelpUsedThisTurn(true);\n        setHelpPenalty(prev => prev + 10); // 10 point penalty for using help\n      }\n      // Otherwise, ignore stale response from a previous turn\n    },\n    onError: (error: any) => {\n      console.error(\"Failed to generate example:\", error);\n      toast({\n        title: \"Failed to generate example\",\n        description: \"Please try again or continue without help.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const botAnswerMutation = useMutation({\n    mutationFn: async (userQuestion: string) => {\n      const vocabStrings = vocabulary.map(v => v.word);\n      const response = await apiRequest(\"POST\", \"/api/bot-answer\", {\n        userQuestion,\n        topic,\n        vocabulary: vocabStrings,\n        language,\n        difficulty,\n        isPracticeMode,\n        botId\n      });\n      return await response.json();\n    },\n  });\n\n  const validateQuestionMutation = useMutation({\n    mutationFn: async (question: string) => {\n      const vocabStrings = vocabulary.map(v => v.word);\n      const response = await apiRequest(\"POST\", \"/api/validate-question\", {\n        question,\n        topic,\n        vocabulary: vocabStrings,\n        language,\n        messages // Pass conversation history for duplicate detection\n      });\n      return await response.json();\n    },\n  });\n\n  const gradingMutation = useMutation({\n    mutationFn: async (messagesToGrade: Message[]) => {\n      const response = await apiRequest(\"POST\", \"/api/grade\", {\n        messages: messagesToGrade,\n        topic,\n        vocabulary: vocabulary.map(v => v.word),\n        language,\n        difficulty,\n        skippedQuestions\n      });\n      return await response.json();\n    },\n  });\n\n  // Setup WebSocket message handlers for human vs human matches\n  useEffect(() => {\n    if (!isBot && matchId && playerId && multiplayerWsRef?.current) {\n      const ws = multiplayerWsRef.current;\n      \n      // Set up message handlers on the existing WebSocket from App.tsx\n      const messageHandler = (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          \n          if (data.type === 'opponent_message') {\n            // Receive opponent's message\n            setMessages(prev => [...prev, { \n              sender: \"opponent\", \n              text: data.text, \n              timestamp: data.timestamp \n            }]);\n          }\n          \n          if (data.type === 'opponent_turn_complete') {\n            // Opponent completed their turn, now it's our turn\n            setTurnPhase(data.turnPhase);\n            currentTurnPhaseRef.current = data.turnPhase;\n            shouldCountRef.current = true;\n            setTimeLeft(getTimerDuration());\n            resetInactivity();\n          }\n          \n          if (data.type === 'opponent_disconnected') {\n            // Opponent disconnected, you win by forfeit\n            handleOpponentForfeit();\n          }\n          \n          if (data.type === 'opponent_forfeit') {\n            // Opponent forfeited, you win!\n            handleOpponentForfeit();\n          }\n          \n          // opponent_grading_result is handled by App.tsx\n        } catch (error) {\n          console.error('DuelInterface: WebSocket message error:', error);\n        }\n      };\n      \n      ws.addEventListener('message', messageHandler);\n      \n      return () => {\n        // Remove our message handler but don't close the WebSocket\n        ws.removeEventListener('message', messageHandler);\n      };\n    }\n  }, [isBot, matchId, playerId, multiplayerWsRef?.current]);\n\n  // Initialize with bot question only if bot starts first (only for AI opponents)\n  useEffect(() => {\n    if (isBot && !startsFirst) {\n      botQuestionMutation.mutate();\n    } else if (startsFirst || !isBot) {\n      // User starts first or human match, enable timer and inactivity tracking immediately\n      shouldCountRef.current = true;\n      inactivityCountRef.current = true;\n      setTimeLeft(getTimerDuration());\n      setInactivityTimeLeft(60);\n    }\n  }, []);\n\n  // Lock body scroll when keyboard opens, but allow messages to scroll\n  useEffect(() => {\n    const input = inputRef.current;\n    if (!input) return;\n\n    const handleFocus = () => {\n      // Prevent body bounce/scroll on mobile when keyboard opens\n      document.body.style.overflow = 'hidden';\n      document.body.style.position = 'fixed';\n      document.body.style.width = '100%';\n      document.body.style.height = '100%';\n      scrollLockActiveRef.current = true;\n    };\n\n    const handleBlur = () => {\n      // Restore body scroll when keyboard closes\n      document.body.style.overflow = '';\n      document.body.style.position = '';\n      document.body.style.width = '';\n      document.body.style.height = '';\n      scrollLockActiveRef.current = false;\n    };\n\n    input.addEventListener('focus', handleFocus);\n    input.addEventListener('blur', handleBlur);\n\n    return () => {\n      input.removeEventListener('focus', handleFocus);\n      input.removeEventListener('blur', handleBlur);\n      // Cleanup on unmount\n      if (scrollLockActiveRef.current) {\n        document.body.style.overflow = '';\n        document.body.style.position = '';\n        document.body.style.width = '';\n        document.body.style.height = '';\n        scrollLockActiveRef.current = false;\n      }\n    };\n  }, []);\n\n  // Update when bot question is ready\n  useEffect(() => {\n    if (botQuestionMutation.isSuccess && botQuestionMutation.data) {\n      const botQuestion = botQuestionMutation.data.question;\n      setBotQuestions(prev => [...prev, botQuestion]);\n      setMessages(prev => [...prev, { sender: \"opponent\", text: botQuestion, timestamp: Date.now() }]);\n      setTurnPhase(\"user-answer\");\n      currentTurnPhaseRef.current = \"user-answer\";\n      shouldCountRef.current = true;\n      setTimeLeft(getTimerDuration());\n      resetInactivity();\n    }\n  }, [botQuestionMutation.isSuccess, botQuestionMutation.data]);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Update when bot answer is ready\n  useEffect(() => {\n    if (botAnswerMutation.isSuccess && botAnswerMutation.data) {\n      const newMessage = { sender: \"opponent\" as const, text: botAnswerMutation.data.answer, timestamp: Date.now() };\n      const updatedMessages = [...messages, newMessage];\n      setMessages(updatedMessages);\n      \n      if (round >= maxRounds) {\n        shouldCountRef.current = false;\n        setIsGrading(true);\n        gradingMutation.mutate(updatedMessages);\n      } else {\n        setRound(prev => prev + 1);\n        currentRoundRef.current = round + 1;\n        setTimeout(() => {\n          botQuestionMutation.mutate();\n        }, 500);\n      }\n    }\n  }, [botAnswerMutation.isSuccess, botAnswerMutation.data]);\n\n  // Update when grading is complete\n  useEffect(() => {\n    if (gradingMutation.isSuccess && gradingMutation.data) {\n      // Apply help penalty to the grading result\n      const adjustedResult = {\n        ...gradingMutation.data,\n        overall: Math.max(0, gradingMutation.data.overall - helpPenalty)\n      };\n\n      // Send grading result to opponent if multiplayer\n      if (!isBot && multiplayerWsRef?.current?.readyState === WebSocket.OPEN && matchId && playerId) {\n        console.log('DuelInterface: Sending player grading result to opponent');\n        multiplayerWsRef.current.send(JSON.stringify({\n          type: 'player_grading_result',\n          playerId,\n          matchId,\n          gradingResult: {\n            grammar: adjustedResult.grammar,\n            fluency: adjustedResult.fluency,\n            vocabulary: adjustedResult.vocabulary,\n            naturalness: adjustedResult.naturalness,\n            overall: adjustedResult.overall\n          }\n        }));\n      }\n      \n      onComplete?.(adjustedResult, messages);\n    }\n  }, [gradingMutation.isSuccess, gradingMutation.data, multiplayerWsRef, helpPenalty]);\n\n  // Reset example when turn phase changes\n  useEffect(() => {\n    setShowExample(false);\n    setExampleText(\"\");\n    setHelpUsedThisTurn(false);\n  }, [turnPhase]);\n\n  // Timer effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (shouldCountRef.current && timeLeft > 0) {\n        setTimeLeft((prev) => {\n          const newTime = prev - 1;\n          console.log(`Timer counting: ${prev} -> ${newTime}`);\n          if (newTime === 0) {\n            handleTimeUp();\n          }\n          return newTime;\n        });\n      }\n\n      if (inactivityCountRef.current && inactivityTimeLeft > 0) {\n        setInactivityTimeLeft((prev) => {\n          const newTime = prev - 1;\n          if (newTime === 0) {\n            handleInactivityTimeout();\n          }\n          return newTime;\n        });\n      }\n    }, 1000);\n\n    return () => {\n      console.log(\"Cleaning up timer interval\");\n      clearInterval(interval);\n    };\n  }, [timeLeft, inactivityTimeLeft]);\n\n  const resetInactivity = () => {\n    setInactivityTimeLeft(60);\n    inactivityCountRef.current = true;\n  };\n\n  const handleInactivityTimeout = () => {\n    inactivityCountRef.current = false;\n    handleForfeit();\n  };\n\n  const handleTimeUp = () => {\n    shouldCountRef.current = false;\n    \n    // Running out of time results in a forfeit/loss\n    if (currentTurnPhaseRef.current === \"user-answer\" || currentTurnPhaseRef.current === \"user-question\") {\n      // Add a message indicating time ran out\n      setMessages(prev => [...prev, { sender: \"user\", text: \"(Ran out of time)\", timestamp: Date.now() }]);\n      \n      // Trigger forfeit after a brief delay to show the message\n      setTimeout(() => {\n        handleForfeit();\n      }, 500);\n    }\n  };\n\n  // Helper function to check if vocab word matches with conjugations/declensions\n  const isVocabWordUsed = (text: string, vocabWord: string): boolean => {\n    const lowerText = text.toLowerCase();\n    const lowerVocab = vocabWord.toLowerCase();\n    \n    // Exact substring match (existing behavior)\n    if (lowerText.includes(lowerVocab)) {\n      return true;\n    }\n    \n    // Split text into words and check for conjugations/declensions\n    const words = lowerText.split(/\\s+/);\n    \n    for (const word of words) {\n      // Remove common punctuation\n      const cleanWord = word.replace(/[.,!?;:\"\"\"''()]/g, '');\n      \n      // Check if word starts with vocab (conjugations: have → having, had)\n      if (cleanWord.startsWith(lowerVocab) && cleanWord.length >= lowerVocab.length) {\n        return true;\n      }\n      \n      // Check if vocab starts with word (declensions: good → better)\n      if (lowerVocab.startsWith(cleanWord) && cleanWord.length >= 3) {\n        return true;\n      }\n      \n      // For Chinese/Japanese characters, check if vocab is contained or contains the word\n      if (cleanWord.length >= 2 && lowerVocab.length >= 2) {\n        // Bidirectional substring match for compound words\n        if (cleanWord.includes(lowerVocab) || lowerVocab.includes(cleanWord)) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  // Helper function to mark vocabulary as used in a message (case-insensitive with fuzzy matching)\n  const markVocabularyAsUsed = (text: string) => {\n    const newUsedVocab = new Set(usedVocabulary);\n    \n    vocabulary.forEach((vocabItem) => {\n      if (isVocabWordUsed(text, vocabItem.word)) {\n        newUsedVocab.add(vocabItem.word);\n      }\n    });\n    \n    setUsedVocabulary(newUsedVocab);\n  };\n\n  const handleSend = async () => {\n    // Prevent sending during any loading state\n    if (!input.trim() || !isUserTurn || isGrading || \n        validateQuestionMutation.isPending || \n        botQuestionMutation.isPending || \n        botAnswerMutation.isPending) return;\n\n    const messageToSend = input;\n    const timestamp = Date.now();\n\n    if (turnPhase === \"user-answer\") {\n      shouldCountRef.current = false;\n      setMessages(prev => [...prev, { sender: \"user\", text: messageToSend, timestamp }]);\n      setInput(\"\");\n      \n      // Mark vocabulary as permanently used\n      markVocabularyAsUsed(messageToSend);\n      \n      // Send message to opponent if multiplayer\n      if (!isBot && multiplayerWsRef?.current?.readyState === WebSocket.OPEN) {\n        multiplayerWsRef.current.send(JSON.stringify({\n          type: 'player_message',\n          playerId,\n          text: messageToSend,\n          sender: \"user\",\n          timestamp\n        }));\n      }\n      \n      setTurnPhase(\"user-question\");\n      currentTurnPhaseRef.current = \"user-question\";\n      setTimeLeft(getTimerDuration());\n      shouldCountRef.current = true;\n      resetInactivity();\n    } else if (turnPhase === \"user-question\") {\n      const validation = await validateQuestionMutation.mutateAsync(messageToSend);\n      \n      if (!validation.isValid) {\n        setValidationError(validation.message || \"Invalid question. Please try asking something related to the topic.\");\n        return;\n      }\n\n      shouldCountRef.current = false;\n      setMessages(prev => [...prev, { sender: \"user\", text: messageToSend, timestamp }]);\n      setInput(\"\");\n      \n      // Mark vocabulary as permanently used\n      markVocabularyAsUsed(messageToSend);\n      \n      // For multiplayer: send message and wait for opponent's answer\n      if (!isBot && multiplayerWsRef?.current?.readyState === WebSocket.OPEN) {\n        multiplayerWsRef.current.send(JSON.stringify({\n          type: 'player_message',\n          playerId,\n          text: messageToSend,\n          sender: \"user\",\n          timestamp\n        }));\n        \n        // Notify opponent that it's their turn to answer\n        multiplayerWsRef.current.send(JSON.stringify({\n          type: 'player_turn_complete',\n          playerId,\n          turnPhase: \"user-answer\"\n        }));\n        \n        // Wait for opponent's answer\n        setTurnPhase(\"bot-answer\");\n        currentTurnPhaseRef.current = \"bot-answer\";\n        shouldCountRef.current = false;\n      } else {\n        // For AI: use bot answer mutation\n        setTurnPhase(\"bot-answer\");\n        currentTurnPhaseRef.current = \"bot-answer\";\n        botAnswerMutation.mutate(messageToSend);\n      }\n      resetInactivity();\n    }\n  };\n\n  const handleDontKnow = () => {\n    shouldCountRef.current = false;\n    setSkippedQuestions(prev => prev + 1);\n    \n    if (turnPhase === \"user-answer\") {\n      setMessages(prev => [...prev, { sender: \"user\", text: \"(Skipped)\", timestamp: Date.now() }]);\n      setTurnPhase(\"user-question\");\n      currentTurnPhaseRef.current = \"user-question\";\n      setTimeLeft(getTimerDuration());\n      shouldCountRef.current = true;\n      resetInactivity();\n    } else if (turnPhase === \"user-question\") {\n      setMessages(prev => [...prev, { sender: \"user\", text: \"(Skipped)\", timestamp: Date.now() }]);\n      setTurnPhase(\"bot-answer\");\n      currentTurnPhaseRef.current = \"bot-answer\";\n      const defaultQuestion = language === \"Chinese\" ? \"请告诉我更多\" : \n                             language === \"Spanish\" ? \"Cuéntame más\" : \n                             \"Raccontami di più\";\n      botAnswerMutation.mutate(defaultQuestion);\n      resetInactivity();\n    }\n  };\n\n  const handleForfeit = () => {\n    shouldCountRef.current = false;\n    inactivityCountRef.current = false;\n    \n    // Notify opponent if multiplayer\n    if (!isBot && multiplayerWsRef?.current?.readyState === WebSocket.OPEN && matchId && playerId) {\n      multiplayerWsRef.current.send(JSON.stringify({\n        type: 'player_forfeit',\n        playerId,\n        matchId\n      }));\n    }\n    \n    onForfeit?.();\n  };\n\n  const handleOpponentForfeit = () => {\n    shouldCountRef.current = false;\n    inactivityCountRef.current = false;\n    \n    // When opponent forfeits, complete the match with a win for the current player\n    // Set opponent scores to 0 and user scores high to ensure a win\n    onComplete?.({\n      grammar: 90,\n      fluency: 90,\n      vocabulary: 90,\n      naturalness: 90,\n      overall: 90,\n      botGrammar: 0,\n      botFluency: 0,\n      botVocabulary: 0,\n      botNaturalness: 0,\n      botOverall: 0,\n      botElo: opponentElo,\n      feedback: [],\n      isForfeit: true // Match ended by forfeit, show forfeit message for both players\n    });\n  };\n\n  const handleAccentClick = (accent: string) => {\n    const cursorPosition = inputRef.current?.selectionStart || input.length;\n    const newInput = input.slice(0, cursorPosition) + accent + input.slice(cursorPosition);\n    setInput(newInput);\n    \n    // Focus input and set cursor position after the inserted accent\n    setTimeout(() => {\n      inputRef.current?.focus();\n      inputRef.current?.setSelectionRange(cursorPosition + accent.length, cursorPosition + accent.length);\n    }, 0);\n  };\n\n  const progress = (round / maxRounds) * 100;\n  const isUserTurn = turnPhase === \"user-answer\" || turnPhase === \"user-question\";\n\n  return (\n    <div className=\"fixed inset-0 flex flex-col bg-background\" style={{ top: '4rem' }}>\n      {/* Desktop Header - opponent info, timer, forfeit, user info */}\n      <div className=\"border-b bg-card p-2 md:p-4 shadow-sm hidden md:block\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between gap-2 md:gap-4\">\n          <div className=\"flex items-center gap-2 md:gap-3 min-w-0\">\n            <Avatar className=\"w-8 h-8 md:w-10 md:h-10 border-2 border-primary flex-shrink-0\">\n              <AvatarFallback className=\"bg-primary text-primary-foreground font-semibold text-xs md:text-sm\">\n                {opponentName.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"min-w-0\">\n              <div className=\"font-semibold flex items-center gap-1 md:gap-2 text-sm md:text-base truncate\" data-testid=\"text-opponent-name\">\n                <span className=\"truncate\">{opponentName}</span>\n                {isBot && <Badge className=\"text-xs flex-shrink-0 bg-accent/20 text-accent border-accent/30\">Bot</Badge>}\n              </div>\n              {!isPracticeMode && difficulty !== \"Beginner\" ? (\n                <div className=\"text-xs text-muted-foreground font-mono\">{opponentElo} Fluency</div>\n              ) : isPracticeMode || difficulty === \"Beginner\" ? (\n                <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                  <Info className=\"w-3 h-3\" />\n                  Hover over bot messages for translations\n                </div>\n              ) : (\n                <div className=\"text-xs text-muted-foreground font-mono\">{opponentElo} Fluency</div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2 md:gap-4 flex-shrink-0\">\n            <div className=\"flex flex-col items-center min-w-[80px]\">\n              <div className=\"flex items-center gap-1 md:gap-2 mb-1\">\n                <Clock className=\"w-4 h-4 text-primary\" />\n                <span className={`font-mono font-bold text-lg ${timeLeft <= 10 ? 'text-destructive' : 'text-primary'}`} data-testid=\"text-timer\">\n                  {timeLeft}s\n                </span>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                Round: {round}/{maxRounds}\n              </div>\n            </div>\n\n            <Button \n              variant=\"destructive\" \n              onClick={handleForfeit}\n              disabled={isGrading}\n              data-testid=\"button-forfeit\"\n              className=\"flex-shrink-0 min-h-[48px] md:min-h-[40px] px-4\"\n            >\n              <Flag className=\"w-4 h-4 md:mr-2\" />\n              <span className=\"hidden md:inline\">Forfeit</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile-only compact header with timer and forfeit */}\n      <div className=\"md:hidden bg-card px-2 py-1.5 flex items-center justify-between flex-shrink-0 border-b border-card-border/50\">\n        <div className=\"flex items-center gap-2\">\n          <Clock className=\"w-3 h-3 text-primary\" />\n          <span className={`font-mono font-bold text-sm ${timeLeft <= 10 ? 'text-destructive' : 'text-primary'}`}>\n            {timeLeft}s\n          </span>\n          <span className=\"text-xs text-muted-foreground\">R{round}/{maxRounds}</span>\n        </div>\n        <Button \n          variant=\"destructive\" \n          onClick={handleForfeit}\n          disabled={isGrading}\n          size=\"sm\"\n          className=\"h-7 px-2 text-xs\"\n        >\n          <Flag className=\"w-3 h-3\" />\n        </Button>\n      </div>\n\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto h-full flex flex-col md:flex-row\">\n          <div className=\"flex-1 flex flex-col min-h-0\">\n            {/* Topic Header */}\n            <div className=\"bg-card flex-shrink-0 border-b border-card-border/50\">\n              <button \n                className=\"w-full p-1.5 md:p-4 flex items-center justify-between cursor-pointer hover-elevate text-left\"\n                onClick={() => setShowTopicHeader(!showTopicHeader)}\n                data-testid=\"button-toggle-topic-header\"\n                aria-expanded={showTopicHeader}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg bg-accent items-center justify-center hidden md:flex\">\n                    <Swords className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div>\n                    <span className=\"font-semibold text-xs md:text-base\">Topic:</span>\n                    <Badge className=\"ml-1 md:ml-2 text-[10px] md:text-sm bg-accent/20 text-accent border-accent/30\">{topic}</Badge>\n                  </div>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  {showTopicHeader ? <ChevronUp className=\"w-3 h-3 md:w-4 md:h-4\" /> : <ChevronDown className=\"w-3 h-3 md:w-4 md:h-4\" />}\n                </div>\n              </button>\n              \n              {showTopicHeader && (\n                <>\n                  <div className=\"px-1.5 md:px-4 pb-1.5 md:pb-2 flex flex-wrap gap-1 md:gap-2\">\n                    {vocabulary.map((vocabItem) => {\n                      const isUsed = usedVocabulary.has(vocabItem.word);\n                      return (\n                        <div \n                          key={vocabItem.word}\n                          className={`transition-all ${isUsed ? 'opacity-40 line-through' : ''}`}\n                          data-testid={`vocab-badge-${vocabItem.word}`}\n                          aria-label={isUsed ? 'used' : 'unused'}\n                        >\n                          <VocabularyBadge \n                            chinese={vocabItem.word}\n                            pinyin={vocabItem.romanization}\n                            language={language}\n                            className=\"text-[10px] md:text-xs\"\n                            definition={vocabItem.definition}\n                          />\n                        </div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"px-1.5 md:px-4 pb-1.5 md:pb-2 text-[10px] md:text-sm font-medium\">\n                    {turnPhase === \"user-answer\" && (\n                      <>\n                        <span className=\"md:hidden text-primary\">⏳ Answer</span>\n                        <span className=\"hidden md:inline text-primary\">⏳ Your turn to answer the question</span>\n                      </>\n                    )}\n                    {turnPhase === \"user-question\" && (\n                      <>\n                        <span className=\"md:hidden text-accent\">❓ Ask</span>\n                        <span className=\"hidden md:inline text-accent\">❓ Your turn to ask a question using vocabulary</span>\n                      </>\n                    )}\n                    {turnPhase === \"bot-question\" && (\n                      <span className=\"text-muted-foreground\">\n                        <span className=\"md:hidden\">{isBot ? \"🤖\" : \"⏳\"}</span>\n                        <span className=\"hidden md:inline\">{isBot ? \"🤖 Bot is thinking...\" : \"⏳ Opponent is thinking...\"}</span>\n                      </span>\n                    )}\n                    {turnPhase === \"bot-answer\" && (\n                      <span className=\"text-success\">\n                        <span className=\"md:hidden\">{isBot ? \"🤖\" : \"💬\"}</span>\n                        <span className=\"hidden md:inline\">{isBot ? \"🤖 Bot is answering...\" : \"💬 Opponent is answering...\"}</span>\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n\n            {/* Messages */}\n            <div className=\"flex-1 overflow-y-auto p-1.5 md:p-6 space-y-1.5 md:space-y-4\" data-testid=\"chat-messages\">\n              {messages.map((msg, idx) => {\n                const isBotMessage = msg.sender === \"opponent\";\n                const shouldShowTranslation = isBotMessage && (isPracticeMode || difficulty === \"Beginner\");\n                const isHovered = hoveredMessageIndex === idx;\n                const translation = translations[idx];\n\n                return (\n                  <div\n                    key={idx}\n                    className={`flex ${msg.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                  >\n                    <div\n                      className={`inline-block max-w-[85%] md:max-w-2xl px-2 py-1.5 md:px-4 md:py-3 rounded-md text-sm md:text-base ${\n                        msg.sender === \"user\"\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"bg-muted text-muted-foreground\"\n                      } ${shouldShowTranslation ? \"cursor-help transition-all\" : \"\"}`}\n                      onMouseEnter={() => {\n                        if (shouldShowTranslation && msg.text !== \"(Skipped)\" && msg.text !== \"(Ran out of time)\") {\n                          setHoveredMessageIndex(idx);\n                          // Fetch translation if not already cached\n                          if (!translations[idx]) {\n                            translateMutation.mutate(\n                              { text: msg.text, fromLanguage: language },\n                              {\n                                onSuccess: (data) => {\n                                  setTranslations(prev => ({ ...prev, [idx]: data.translation }));\n                                }\n                              }\n                            );\n                          }\n                        }\n                      }}\n                      onMouseLeave={() => {\n                        if (shouldShowTranslation) {\n                          setHoveredMessageIndex(null);\n                        }\n                      }}\n                    >\n                      {msg.text === \"(Skipped)\" ? (\n                        <span className=\"italic opacity-60\">Skipped question</span>\n                      ) : msg.text === \"(Ran out of time)\" ? (\n                        <span className=\"italic opacity-60 text-destructive\">Ran out of time</span>\n                      ) : (\n                        <div className=\"flex flex-col gap-2\">\n                          <div>\n                            <TextWithPinyin text={msg.text} language={language} />\n                          </div>\n                          {shouldShowTranslation && isHovered && translation && (\n                            <div className=\"pt-2 border-t border-primary/20 text-sm italic opacity-80\">\n                              {translation}\n                            </div>\n                          )}\n                          {shouldShowTranslation && isHovered && !translation && translateMutation.isPending && (\n                            <div className=\"pt-2 border-t border-primary/20 text-sm italic opacity-60\">\n                              Translating...\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n              {isGrading && (\n                <div className=\"flex justify-center\">\n                  <Badge className=\"animate-pulse text-xs md:text-sm bg-accent/20 text-accent border-accent/30\">\n                    AI is grading your performance...\n                  </Badge>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* Input Area - Sticky to bottom */}\n            <div className=\"sticky bottom-0 border-t bg-card pb-safe-bottom z-10 flex-shrink-0\">\n              {/* Help Area Toggle */}\n              <button \n                className=\"w-full p-1.5 md:p-3 flex items-center justify-between border-b cursor-pointer hover-elevate text-left\"\n                onClick={() => setShowHelpArea(!showHelpArea)}\n                data-testid=\"button-toggle-help-area\"\n                aria-expanded={showHelpArea}\n              >\n                <span className=\"text-xs text-muted-foreground\">Help & Tools</span>\n                <div className=\"flex-shrink-0\">\n                  {showHelpArea ? <ChevronDown className=\"w-3 h-3\" /> : <ChevronUp className=\"w-3 h-3\" />}\n                </div>\n              </button>\n\n              {showHelpArea && (\n                <div className=\"p-2 md:p-4 border-b\">\n                  {/* Buttons row - Accent keyboard toggle and Need help side by side */}\n                  <div className=\"flex gap-1.5 md:gap-2 mb-1.5 md:mb-2\">\n                    {/* Accent Keyboard Toggle - Now available on mobile */}\n                    {(language === \"Spanish\" || language === \"Italian\") && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setShowAccentKeyboard(!showAccentKeyboard)}\n                        data-testid=\"button-toggle-accent-keyboard\"\n                        className=\"h-8 md:h-9 flex-1 text-xs\"\n                      >\n                        <Type className=\"w-3 h-3 mr-1\" />\n                        <span className=\"text-xs\">{showAccentKeyboard ? \"Hide\" : \"Show\"} accents</span>\n                      </Button>\n                    )}\n                    \n                    {/* Need Help Button */}\n                    {isUserTurn && !isGrading && !showExample && !helpUsedThisTurn && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => exampleMutation.mutate()}\n                        disabled={exampleMutation.isPending || helpUsedThisTurn}\n                        data-testid=\"button-need-help\"\n                        className=\"h-8 md:h-9 flex-1 text-xs\"\n                      >\n                        <HelpCircle className=\"w-3 h-3 md:w-4 md:h-4 mr-1\" />\n                        <span className=\"text-xs md:text-sm\">{exampleMutation.isPending ? \"Generating...\" : \"Need help? (-10pts)\"}</span>\n                      </Button>\n                    )}\n                  </div>\n                  \n                  {/* Accent Keyboard - Now available on mobile when toggled */}\n                  {showAccentKeyboard && (\n                    <div>\n                      <AccentKeyboard language={language} onAccentClick={handleAccentClick} />\n                    </div>\n                  )}\n                </div>\n              )}\n\n              <div className=\"p-2 md:p-4\">\n                {/* Example Display */}\n                {showExample && exampleText && (\n                  <Card className=\"mb-2 md:mb-3 border-highlight/30 bg-highlight/5\">\n                    <CardHeader className=\"pb-1.5 md:pb-2 pt-2 md:pt-6 px-3 md:px-6\">\n                      <CardTitle className=\"text-xs md:text-sm flex items-center gap-1.5 md:gap-2\">\n                        <HelpCircle className=\"w-3 h-3 md:w-4 md:h-4\" />\n                        Example {turnPhase === \"user-question\" ? \"Question\" : \"Answer\"}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"pt-1.5 md:pt-0 px-3 pb-3 md:px-6 md:pb-6\">\n                      <div className=\"text-xs md:text-sm text-foreground\">\n                        <TextWithPinyin text={exampleText} language={language} />\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {validationError && (\n                  <div className=\"mb-1.5 md:mb-2 p-1.5 md:p-2 rounded-md bg-destructive/10 border border-destructive/30 text-xs md:text-sm\" data-testid=\"validation-error\">\n                    {validationError}\n                  </div>\n                )}\n                <div className=\"flex gap-1.5 md:gap-2 items-end\">\n                <Input\n                  ref={inputRef}\n                  value={input}\n                  onChange={(e) => {\n                    const newInput = e.target.value;\n                    setInput(newInput);\n                    resetInactivity();\n                    if (validationError) setValidationError(\"\");\n                    \n                    // Check for vocabulary words in real-time with fuzzy matching\n                    const newUsedVocab = new Set(usedVocabulary); // Start with already used words\n                    \n                    vocabulary.forEach((vocabItem) => {\n                      if (isVocabWordUsed(newInput, vocabItem.word)) {\n                        newUsedVocab.add(vocabItem.word);\n                      }\n                    });\n                    \n                    setUsedVocabulary(newUsedVocab);\n                  }}\n                  onFocus={() => {\n                    // Lock scroll position when keyboard opens (only if not already locked)\n                    if (!scrollLockActiveRef.current) {\n                      const scrollY = window.scrollY;\n                      document.body.style.position = 'fixed';\n                      document.body.style.top = `-${scrollY}px`;\n                      document.body.style.width = '100%';\n                      document.body.style.overflow = 'hidden';\n                      scrollLockActiveRef.current = true;\n                    }\n                  }}\n                  onBlur={() => {\n                    // Restore scroll position when keyboard closes\n                    if (scrollLockActiveRef.current) {\n                      const scrollY = document.body.style.top;\n                      document.body.style.position = '';\n                      document.body.style.top = '';\n                      document.body.style.width = '';\n                      document.body.style.overflow = '';\n                      if (scrollY) {\n                        window.scrollTo(0, parseInt(scrollY || '0') * -1);\n                      }\n                      scrollLockActiveRef.current = false;\n                    }\n                  }}\n                  onKeyDown={(e) => e.key === \"Enter\" && handleSend()}\n                  placeholder={\n                    turnPhase === \"user-answer\" \n                      ? `Answer in ${language}...` \n                      : `Ask a question in ${language}...`\n                  }\n                  className=\"flex-1 text-sm md:text-base min-h-[40px] md:min-h-[40px]\"\n                  disabled={!isUserTurn || isGrading || validateQuestionMutation.isPending || botQuestionMutation.isPending || botAnswerMutation.isPending}\n                  data-testid=\"input-message\"\n                />\n                {turnPhase === \"user-answer\" && (\n                  <Button \n                    variant=\"outline\"\n                    onClick={handleDontKnow} \n                    disabled={isGrading || validateQuestionMutation.isPending || botQuestionMutation.isPending || botAnswerMutation.isPending}\n                    data-testid=\"button-dont-know\"\n                    className=\"flex-shrink-0 min-h-[40px] md:min-h-[40px] px-2 md:px-4\"\n                  >\n                    <HelpCircle className=\"w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2\" />\n                    <span className=\"text-xs md:text-sm\">Skip (-20 pts)</span>\n                  </Button>\n                )}\n                <Button \n                  onClick={handleSend} \n                  disabled={!isUserTurn || isGrading || validateQuestionMutation.isPending || botQuestionMutation.isPending || botAnswerMutation.isPending}\n                  data-testid=\"button-send\"\n                  className=\"flex-shrink-0 min-h-[40px] md:min-h-[40px] px-3 md:px-4\"\n                >\n                  <Send className=\"w-3 h-3 md:w-4 md:h-4 md:mr-2\" />\n                  <span className=\"hidden md:inline\">Send</span>\n                </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Side Panel - Progress */}\n          <div className=\"hidden md:block md:w-64 md:border-l bg-card p-3 md:p-4\">\n            <div className=\"mb-4 hidden md:block\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-semibold\">Match Progress</span>\n                <span className=\"text-xs text-muted-foreground\">{Math.round(progress)}%</span>\n              </div>\n              <Progress value={progress} className=\"h-2\" />\n            </div>\n\n            <Card className=\"border-accent/30 bg-accent/5 hidden md:block\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Difficulty</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Badge className={`\n                  ${difficulty === 'Easy' ? 'bg-success/20 text-success border-success/30' : ''}\n                  ${difficulty === 'Medium' ? 'bg-highlight/20 text-highlight-foreground border-highlight/30' : ''}\n                  ${difficulty === 'Hard' ? 'bg-destructive/20 text-destructive border-destructive/30' : ''}\n                `}>\n                  {difficulty}\n                </Badge>\n                <div className=\"mt-3 text-xs text-muted-foreground space-y-1\">\n                  <div>• {getTimerDuration()}s per turn</div>\n                  <div>• {maxRounds} rounds total</div>\n                  <div>• {skippedQuestions} questions skipped</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {!isPracticeMode && (\n              <Card className=\"mt-3 border-primary/30 bg-primary/5 hidden md:block\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Fluency Score</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold font-mono text-primary\">{userElo}</div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":45482},"client/src/components/examples/MatchFinder.tsx":{"content":"import MatchFinder from '../MatchFinder';\n\nexport default function MatchFinderExample() {\n  return (\n    <MatchFinder \n      onMatchFound={(opponent, isBot) => console.log('Match found:', opponent, 'Bot:', isBot)} \n    />\n  );\n}\n","size_bytes":229},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n// Stripe webhook needs raw body for signature verification - must come before express.json()\napp.use('/api/stripe-webhook', express.raw({ type: 'application/json' }));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Replit Auth is setup in registerRoutes\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2278},"client/src/components/MatchFinder.tsx":{"content":"import { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Bot, Loader2, Target, BookOpen, AlertCircle, Swords, Trophy, Zap, X, Lock, Crown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { THEMES } from \"@shared/themes\";\nimport { useMatchmaking } from \"@/hooks/useMatchmaking\";\nimport { canGuestPlayMatch, getRemainingGuestMatches, getGuestMatchLimit } from \"@/utils/guestRateLimit\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport BotSelection from \"./BotSelection\";\n\nexport type Language = \"Chinese\" | \"Spanish\" | \"Italian\";\nexport type Difficulty = \"Beginner\" | \"Easy\" | \"Medium\" | \"Hard\";\n\nconst BOT_NAMES = [\n  \"Emma Chen\",\n  \"Lucas Rodriguez\",\n  \"Sofia Rossi\",\n  \"James Wang\",\n  \"Maria Garcia\",\n  \"Alex Zhang\",\n  \"Isabella Martinez\",\n  \"Noah Li\",\n  \"Olivia Romano\",\n  \"Ethan Liu\",\n  \"Mia Fernandez\",\n  \"Liam Zhang\",\n  \"Ava Moretti\",\n  \"Oliver Wang\",\n  \"Charlotte Hu\",\n];\n\ninterface MatchFinderProps {\n  onMatchFound?: (opponent: string, isBot: boolean, language: Language, difficulty: Difficulty, topic?: string, opponentElo?: number, isPracticeMode?: boolean, startsFirst?: boolean, matchId?: string, vocabularyFromServer?: any[], botId?: string) => void;\n  currentLanguage?: Language;\n  userElo?: number;\n  userWins?: number;\n  userLosses?: number;\n  username?: string;\n  isGuest?: boolean;\n  isPremium?: boolean;\n  userId?: string; // Authenticated user ID (not session ID)\n}\n\nexport default function MatchFinder({ \n  onMatchFound,\n  currentLanguage = \"Chinese\",\n  userElo = 1000,\n  userWins = 0,\n  userLosses = 0,\n  username = \"Player\",\n  isGuest = false,\n  isPremium = false,\n  userId\n}: MatchFinderProps) {\n  // Load difficulty from localStorage, default to \"Medium\"\n  const [selectedDifficulty, setSelectedDifficulty] = useState<Difficulty>(() => {\n    const saved = localStorage.getItem('selectedDifficulty');\n    return (saved as Difficulty) || \"Medium\";\n  });\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"random\");\n  const [isPracticeLoading, setIsPracticeLoading] = useState(false);\n  const practiceLoadingRef = useRef(false);\n  const { resumeAudio } = useSound();\n  const [showBotSelection, setShowBotSelection] = useState(false);\n  const [selectedBot, setSelectedBot] = useState<{ id: string; name: string } | null>(null);\n\n  // Save difficulty to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('selectedDifficulty', selectedDifficulty);\n  }, [selectedDifficulty]);\n  \n  // Premium access tracking\n  const [difficultyAccess, setDifficultyAccess] = useState<{\n    allowed: boolean;\n    isPremium: boolean;\n    remaining?: number;\n    limit?: number;\n    message?: string;\n  }>({ allowed: true, isPremium: false });\n  const [isCheckingAccess, setIsCheckingAccess] = useState(false);\n  \n  const canPlay = !isGuest || canGuestPlayMatch();\n  const remainingMatches = isGuest ? getRemainingGuestMatches() : null;\n\n  // Check if user can play selected difficulty (medium/hard have limits for free users)\n  useEffect(() => {\n    const checkDifficultyAccess = async () => {\n      if (selectedDifficulty === \"Beginner\" || selectedDifficulty === \"Easy\") {\n        setDifficultyAccess({ allowed: true, isPremium: false });\n        return;\n      }\n\n      // Guest users can't play medium/hard\n      if (isGuest) {\n        setDifficultyAccess({ \n          allowed: false, \n          isPremium: false, \n          message: \"Sign in required for Medium/Hard modes\" \n        });\n        return;\n      }\n\n      setIsCheckingAccess(true);\n      try {\n        const response = await apiRequest(\"POST\", \"/api/user/check-difficulty-access\", {\n          difficulty: selectedDifficulty\n        });\n        const data = await response.json();\n        setDifficultyAccess(data);\n      } catch (error) {\n        console.error(\"Error checking difficulty access:\", error);\n        setDifficultyAccess({ allowed: true, isPremium: false });\n      } finally {\n        setIsCheckingAccess(false);\n      }\n    };\n\n    checkDifficultyAccess();\n  }, [selectedDifficulty, isGuest]);\n\n  // Reset loading ref when component unmounts or practice completes\n  useEffect(() => {\n    if (!isPracticeLoading) {\n      practiceLoadingRef.current = false;\n    }\n  }, [isPracticeLoading]);\n\n  const getSessionId = () => {\n    if (typeof window === 'undefined') {\n      return `temp-session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    let sessionId = localStorage.getItem('matchmaking_session_id');\n    if (!sessionId) {\n      sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('matchmaking_session_id', sessionId);\n    }\n    return sessionId;\n  };\n\n  // Use authenticated userId if available, otherwise use session ID for guests\n  const playerId = userId || getSessionId();\n\n  const handleWebSocketMatch = useCallback((matchData: any) => {\n    // Convert server vocabulary to VocabWord format if provided\n    let vocabulary: any[] | undefined = undefined;\n    if (matchData.vocabulary && matchData.vocabulary.length > 0) {\n      vocabulary = matchData.vocabulary.map((item: any) => ({\n        word: item.word,\n        romanization: item.pinyin || item.word,\n        definition: `${item.english} (${item.type})`\n      }));\n    }\n    \n    onMatchFound?.(\n      matchData.opponent.username,\n      matchData.isAI,\n      matchData.language as Language,\n      matchData.difficulty as Difficulty,\n      matchData.topic,\n      matchData.opponent.elo,\n      false,\n      matchData.startsFirst,\n      matchData.matchId,\n      vocabulary\n    );\n  }, [onMatchFound]);\n\n  const { isConnected, isSearching, findMatch, cancelSearch } = useMatchmaking({\n    playerId,\n    username,\n    elo: userElo,\n    onMatchFound: handleWebSocketMatch,\n  });\n\n  const handleFindMatch = () => {\n    // Resume audio on user interaction\n    resumeAudio();\n    \n    if (isSearching) {\n      cancelSearch();\n    } else {\n      if (isGuest && !canGuestPlayMatch()) {\n        return;\n      }\n      \n      // Check difficulty access before starting match\n      if (!difficultyAccess.allowed) {\n        return;\n      }\n      \n      // Server-side tracking happens when joining queue\n      findMatch(currentLanguage, selectedDifficulty);\n    }\n  };\n\n  const handleChooseBot = () => {\n    // Resume audio on user interaction\n    resumeAudio();\n    \n    // Show bot selection dialog\n    setShowBotSelection(true);\n  };\n\n  const handlePractice = async () => {\n    // Resume audio on user interaction\n    resumeAudio();\n    \n    // Immediate double-click prevention using ref\n    if (practiceLoadingRef.current) return;\n    practiceLoadingRef.current = true;\n    \n    if (isGuest && !canGuestPlayMatch()) {\n      practiceLoadingRef.current = false;\n      return;\n    }\n    \n    setIsPracticeLoading(true);\n    \n    try {\n      let botId = selectedBot?.id;\n      let botName = selectedBot?.name;\n      \n      // If no bot selected, pick a random one\n      if (!botId) {\n        const response = await fetch(`/api/bots?language=${currentLanguage}`);\n        const bots = await response.json();\n        \n        if (bots.length > 0) {\n          const randomBot = bots[Math.floor(Math.random() * bots.length)];\n          botId = randomBot.id;\n          botName = randomBot.name;\n        } else {\n          // Fallback to hardcoded bot name\n          botName = BOT_NAMES[Math.floor(Math.random() * BOT_NAMES.length)];\n        }\n      }\n      \n      const topic = selectedTopic === \"random\" ? undefined : selectedTopic;\n      onMatchFound?.(botName!, true, currentLanguage, selectedDifficulty, topic, 1000, true, undefined, undefined, undefined, botId);\n    } catch (err) {\n      console.error('Error starting practice:', err);\n      // Fallback\n      const randomBotName = BOT_NAMES[Math.floor(Math.random() * BOT_NAMES.length)];\n      const topic = selectedTopic === \"random\" ? undefined : selectedTopic;\n      onMatchFound?.(randomBotName, true, currentLanguage, selectedDifficulty, topic, 1000, true);\n    } finally {\n      setIsPracticeLoading(false);\n      practiceLoadingRef.current = false;\n    }\n  };\n\n  const handleBotSelected = async (botId: string) => {\n    try {\n      // Fetch bot details\n      const response = await fetch(`/api/bots/${botId}`);\n      const bot = await response.json();\n      \n      // Save selected bot\n      setSelectedBot({ id: botId, name: bot.name });\n      setShowBotSelection(false);\n    } catch (err) {\n      console.error('Error fetching bot:', err);\n      setShowBotSelection(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-[calc(100vh-4rem)] w-full\">\n      <div className=\"container mx-auto px-6 md:px-8 lg:px-12 py-12 lg:py-16\">\n        {/* Guest Rate Limit Alerts */}\n        {isGuest && !canPlay && (\n          <Alert variant=\"destructive\" className=\"max-w-4xl mx-auto mb-8\" data-testid=\"alert-rate-limit\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              You've reached the daily limit of {getGuestMatchLimit()} matches for guest accounts.\n              <a href=\"/api/login\" className=\"underline ml-2 font-semibold\">Sign in</a> for unlimited matches!\n            </AlertDescription>\n          </Alert>\n        )}\n        {isGuest && canPlay && remainingMatches !== null && (\n          <Alert className=\"max-w-4xl mx-auto mb-8 border-primary/50 bg-primary/10\" data-testid=\"alert-remaining-matches\">\n            <AlertCircle className=\"h-4 w-4 text-primary\" />\n            <AlertDescription>\n              Guest account: {remainingMatches} {remainingMatches === 1 ? 'match' : 'matches'} remaining today.\n              <a href=\"/api/login\" className=\"underline ml-2 font-semibold text-primary\">Sign in</a> for unlimited access!\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Premium Feature Alerts */}\n        {!difficultyAccess.allowed && !difficultyAccess.isPremium && (selectedDifficulty === \"Medium\" || selectedDifficulty === \"Hard\") && (\n          <Alert variant=\"destructive\" className=\"max-w-4xl mx-auto mb-8\" data-testid=\"alert-premium-required\">\n            <Lock className=\"h-4 w-4\" />\n            <AlertDescription>\n              {difficultyAccess.message || `You've reached the daily limit of ${difficultyAccess.limit || 3} ${selectedDifficulty} matches. Upgrade to Premium for unlimited access!`}\n              <a href=\"/subscribe\" className=\"ml-2 font-semibold underline hover:no-underline\" data-testid=\"button-upgrade\">\n                Upgrade to Premium\n              </a>\n            </AlertDescription>\n          </Alert>\n        )}\n        {difficultyAccess.allowed && !difficultyAccess.isPremium && difficultyAccess.remaining !== undefined && (selectedDifficulty === \"Medium\" || selectedDifficulty === \"Hard\") && (\n          <Alert className=\"max-w-4xl mx-auto mb-8 border-accent/50 bg-accent/10\" data-testid=\"alert-premium-remaining\">\n            <Crown className=\"h-4 w-4 text-accent\" />\n            <AlertDescription>\n              Free tier: {difficultyAccess.remaining} {selectedDifficulty} {difficultyAccess.remaining === 1 ? 'match' : 'matches'} remaining today.\n              <a href=\"/subscribe\" className=\"ml-2 font-semibold underline text-accent hover:no-underline\" data-testid=\"button-upgrade-accent\">\n                Upgrade to Premium\n              </a>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Main Content - Split Layout */}\n        <div className=\"grid lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n          {/* Left Side - Stats */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            <Card className=\"border-primary/20 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-12 h-12 rounded-xl bg-primary/10 flex items-center justify-center\">\n                    <Trophy className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Fluency Score</p>\n                    <p className=\"text-3xl font-bold font-mono text-primary\" data-testid=\"text-user-elo\">{userElo}</p>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 pt-4 border-t\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-success\" data-testid=\"text-user-wins\">{userWins}</p>\n                    <p className=\"text-sm text-muted-foreground\">Wins</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-user-losses\">{userLosses}</p>\n                    <p className=\"text-sm text-muted-foreground\">Losses</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-accent/20 hidden md:block\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <div className=\"w-10 h-10 rounded-lg bg-accent/10 flex items-center justify-center\">\n                    <Zap className=\"w-5 h-5 text-accent\" />\n                  </div>\n                  <h3 className=\"font-semibold\">Quick Tips</h3>\n                </div>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Practice mode doesn't affect Fluency Score</li>\n                  <li>• Use vocabulary definitions freely - no penalties!</li>\n                  <li>• Avoid skipping questions (-20 pts each)</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Side - Match Controls */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Difficulty Selection */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Target className=\"w-5 h-5 text-muted-foreground\" />\n                  <h3 className=\"font-semibold\">Select Difficulty</h3>\n                </div>\n                <Select value={selectedDifficulty} onValueChange={(value) => setSelectedDifficulty(value as Difficulty)} disabled={isSearching || isPracticeLoading}>\n                  <SelectTrigger className=\"w-full\" data-testid=\"select-difficulty\">\n                    <SelectValue placeholder=\"Select difficulty\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Beginner\" data-testid=\"option-beginner\">⭐ Beginner - First steps</SelectItem>\n                    <SelectItem value=\"Easy\" data-testid=\"option-easy\">🟢 Easy - Simple vocabulary</SelectItem>\n                    <SelectItem value=\"Medium\" data-testid=\"option-medium\">🟡 Medium - Conversational</SelectItem>\n                    <SelectItem value=\"Hard\" data-testid=\"option-hard\">🔴 Hard - Advanced & Complex</SelectItem>\n                  </SelectContent>\n                </Select>\n              </CardContent>\n            </Card>\n\n            {/* Competitive Mode */}\n            <Card className=\"border-primary/30 shadow-lg\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  <h3 className=\"text-2xl font-bold mb-2\">Competitive Match</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Random topics • Fluency Score changes apply\n                    {!isConnected && <span className=\"text-destructive ml-2\">(Connecting...)</span>}\n                  </p>\n                </div>\n                <Button\n                  className=\"w-full text-lg font-semibold min-h-[56px] md:min-h-[48px]\"\n                  variant=\"default\"\n                  onClick={handleFindMatch}\n                  disabled={!isConnected || !canPlay || !difficultyAccess.allowed}\n                  data-testid=\"button-find-match\"\n                >\n                  {isSearching ? (\n                    <>\n                      <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                      Finding match...\n                    </>\n                  ) : (\n                    <>\n                      <Swords className=\"w-5 h-5 mr-2\" />\n                      Find Match\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Practice Mode */}\n            <Card className=\"border-accent/50\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  <h3 className=\"text-2xl font-bold mb-2\">Practice Mode</h3>\n                  <p className=\"text-sm text-muted-foreground\">Perfect native-level AI • {isPremium ? 'Choose your topic' : 'Random topics only'} • No scoring or competition</p>\n                </div>\n                \n                {/* Bot Selection */}\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Bot className=\"w-5 h-5 text-muted-foreground\" />\n                  <div className=\"flex-1 flex items-center gap-2\">\n                    <div className=\"flex-1 px-3 py-2 rounded-md border bg-background text-sm\">\n                      {selectedBot ? (\n                        <span className=\"font-medium\" data-testid=\"text-selected-bot\">{selectedBot.name}</span>\n                      ) : (\n                        <span className=\"text-muted-foreground\" data-testid=\"text-random-bot\">Random Bot</span>\n                      )}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleChooseBot}\n                      disabled={isPracticeLoading || isSearching}\n                      data-testid=\"button-choose-bot\"\n                    >\n                      Choose Bot\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Topic Selection */}\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <BookOpen className=\"w-5 h-5 text-muted-foreground\" />\n                  <div className=\"flex-1 relative\">\n                    <Select value={selectedTopic} onValueChange={setSelectedTopic} disabled={isSearching || isPracticeLoading || !isPremium}>\n                      <SelectTrigger className=\"flex-1\" data-testid=\"select-topic\">\n                        <SelectValue placeholder=\"Select topic\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"random\">🎲 Random Topic</SelectItem>\n                        {THEMES.map((theme) => (\n                          <SelectItem key={theme.id} value={theme.id}>\n                            {theme.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {!isPremium && (\n                      <div className=\"absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none\">\n                        <Lock className=\"w-4 h-4 text-muted-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                </div>\n                {!isPremium && (\n                  <p className=\"text-xs text-muted-foreground mb-4 flex items-center gap-1.5\">\n                    <Crown className=\"w-3.5 h-3.5 text-accent\" />\n                    <span>Topic selection is a Premium feature</span>\n                  </p>\n                )}\n                <Button\n                  className=\"w-full text-lg min-h-[56px] md:min-h-[48px]\"\n                  variant=\"default\"\n                  style={{ backgroundColor: 'hsl(var(--accent))', color: 'hsl(var(--accent-foreground))', borderColor: 'hsl(var(--accent))' }}\n                  onClick={handlePractice}\n                  disabled={isPracticeLoading || isSearching || !canPlay}\n                  data-testid=\"button-practice\"\n                >\n                  {isPracticeLoading ? (\n                    <>\n                      <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                      Starting practice...\n                    </>\n                  ) : (\n                    <>\n                      <Bot className=\"w-5 h-5 mr-2\" />\n                      Start Practice\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Bot Selection Dialog */}\n      <BotSelection\n        open={showBotSelection}\n        onClose={() => setShowBotSelection(false)}\n        language={currentLanguage}\n        onSelectBot={handleBotSelected}\n      />\n    </div>\n  );\n}\n","size_bytes":21042},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/examples/VocabularyBadge.tsx":{"content":"import VocabularyBadge from '../VocabularyBadge';\n\nexport default function VocabularyBadgeExample() {\n  return (\n    <div className=\"flex gap-2 p-4\">\n      <VocabularyBadge chinese=\"旅行\" pinyin=\"lǚxíng\" />\n      <VocabularyBadge chinese=\"目的地\" pinyin=\"mùdìdì\" />\n      <VocabularyBadge chinese=\"探索\" pinyin=\"tànsuǒ\" />\n    </div>\n  );\n}\n","size_bytes":355},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE - Blue/Violet Tech Theme */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(37, 99, 235, .08);\n  --elevate-2: rgba(37, 99, 235, .15);\n\n  /* Main Colors */\n  --background: 210 40% 98%;           /* #F8FAFC - very light gray */\n  --foreground: 222 47% 11%;            /* #0F172A - near-black */\n\n  --border: 214 32% 91%;\n  \n  --card: 0 0% 100%;                    /* #FFFFFF - pure white */\n  --card-foreground: 222 47% 11%;\n  --card-border: 214 32% 91%;\n\n  --sidebar: 210 40% 98%;\n  --sidebar-foreground: 222 47% 11%;\n  --sidebar-border: 214 32% 91%;\n  --sidebar-primary: 217 81% 53%;      /* Primary blue */\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 211 92% 68%;       /* Accent light blue */\n  --sidebar-accent-foreground: 0 0% 100%;\n  --sidebar-ring: 217 81% 53%;\n\n  --popover: 0 0% 100%;\n  --popover-foreground: 222 47% 11%;\n  --popover-border: 214 32% 91%;\n\n  --primary: 217 81% 53%;              /* #2563EB - crisp tech blue */\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 214 32% 91%;\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 210 40% 96%;\n  --muted-foreground: 215 16% 47%;     /* #64748B - soft gray */\n\n  --accent: 211 92% 68%;               /* #60A5FA - light blue */\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 72% 60%;            /* #EF4444 - red */\n  --destructive-foreground: 0 0% 100%;\n\n  /* Custom semantic colors */\n  --success: 160 84% 39%;              /* #10B981 - green */\n  --success-foreground: 0 0% 100%;\n\n  --highlight: 45 93% 53%;             /* #FACC15 - muted gold */\n  --highlight-foreground: 222 47% 11%;\n\n  --input: 214 32% 91%;\n  --ring: 217 81% 53%;\n  \n  --chart-1: 217 81% 53%;\n  --chart-2: 211 92% 68%;\n  --chart-3: 160 84% 39%;\n  --chart-4: 45 93% 53%;\n  --chart-5: 0 72% 60%;\n\n  --font-sans: Inter, -apple-system, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Courier New', monospace;\n  --radius: .375rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(217 81% 53% / 0.08);\n  --shadow-xs: 0px 1px 3px 0px hsl(217 81% 53% / 0.1);\n  --shadow-sm: 0px 2px 4px -1px hsl(217 81% 53% / 0.08), 0px 1px 2px -1px hsl(217 81% 53% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(217 81% 53% / 0.12), 0px 2px 4px -1px hsl(217 81% 53% / 0.08);\n  --shadow-md: 0px 6px 12px -2px hsl(217 81% 53% / 0.14), 0px 3px 6px -2px hsl(217 81% 53% / 0.1);\n  --shadow-lg: 0px 10px 20px -4px hsl(217 81% 53% / 0.18), 0px 4px 8px -2px hsl(217 81% 53% / 0.12);\n  --shadow-xl: 0px 20px 30px -6px hsl(217 81% 53% / 0.22), 0px 8px 12px -4px hsl(217 81% 53% / 0.14);\n  --shadow-2xl: 0px 25px 50px -12px hsl(217 81% 53% / 0.28);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(96, 165, 250, .12);\n  --elevate-2: rgba(96, 165, 250, .20);\n\n  /* Main Colors */\n  --background: 222 47% 11%;            /* Dark version of text primary */\n  --foreground: 210 40% 98%;\n\n  --border: 215 20% 25%;\n  \n  --card: 215 28% 17%;\n  --card-foreground: 210 40% 98%;\n  --card-border: 215 20% 25%;\n\n  --sidebar: 222 47% 11%;\n  --sidebar-foreground: 210 40% 98%;\n  --sidebar-border: 215 20% 25%;\n  --sidebar-primary: 217 81% 53%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 211 92% 68%;\n  --sidebar-accent-foreground: 0 0% 100%;\n  --sidebar-ring: 217 81% 53%;\n\n  --popover: 215 28% 17%;\n  --popover-foreground: 210 40% 98%;\n  --popover-border: 215 20% 25%;\n\n  --primary: 217 81% 53%;\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 215 20% 25%;\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 215 28% 17%;\n  --muted-foreground: 215 16% 65%;     /* Lighter version for dark mode */\n\n  --accent: 211 92% 68%;\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 72% 60%;\n  --destructive-foreground: 0 0% 100%;\n\n  /* Custom semantic colors */\n  --success: 160 84% 39%;\n  --success-foreground: 0 0% 100%;\n\n  --highlight: 45 93% 53%;\n  --highlight-foreground: 222 47% 11%;\n\n  --input: 215 20% 30%;\n  --ring: 217 81% 53%;\n  \n  --chart-1: 217 81% 60%;\n  --chart-2: 211 92% 75%;\n  --chart-3: 160 84% 50%;\n  --chart-4: 45 93% 60%;\n  --chart-5: 0 72% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.4);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.5);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.5), 0px 1px 2px -1px hsl(0 0% 0% / 0.4);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.6), 0px 2px 4px -1px hsl(0 0% 0% / 0.5);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.6), 0px 3px 6px -2px hsl(0 0% 0% / 0.5);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.7), 0px 4px 8px -2px hsl(0 0% 0% / 0.6);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.8), 0px 8px 12px -4px hsl(0 0% 0% / 0.7);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.9);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html {\n    @apply bg-background;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  /* Safe area padding for mobile devices with gesture bars */\n  .pb-safe-bottom {\n    padding-bottom: max(0.75rem, env(safe-area-inset-bottom));\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n\n/* Mobile keyboard handling - prevent iOS zoom on input focus */\ninput, textarea, select, button {\n  font-size: 16px;\n}\n\n/* iOS safe area insets */\n.pb-safe-bottom {\n  padding-bottom: env(safe-area-inset-bottom);\n}\n","size_bytes":12646},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/examples/MatchResults.tsx":{"content":"import MatchResults from '../MatchResults';\n\nexport default function MatchResultsExample() {\n  return (\n    <MatchResults \n      isWinner={true}\n      eloChange={15}\n      newElo={1562}\n      scores={{\n        grammar: 85,\n        fluency: 78,\n        vocabulary: 92,\n        naturalness: 81\n      }}\n      feedback={[\n        \"Great use of 'destination' and 'adventure' in context\",\n        \"Minor grammar issue: 'yo visitar' should be 'yo visito'\",\n        \"Natural conversation flow maintained throughout\"\n      ]}\n      onContinue={() => console.log('Continue clicked')}\n    />\n  );\n}\n","size_bytes":589},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return <Header username=\"Alex\" elo={1547} onNavigate={(page) => console.log('Navigate to:', page)} currentPage=\"duel\" />;\n}\n","size_bytes":201},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp, index, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Passport.js authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table with Google OAuth and username/password auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  googleId: varchar(\"google_id\").unique(), // Google OAuth user ID\n  username: varchar(\"username\").unique(), // For username/password auth\n  password: varchar(\"password\"), // Hashed password\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isOnline: integer(\"is_online\").notNull().default(0), // 0 = offline, 1 = online\n  lastSeenAt: timestamp(\"last_seen_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  // Premium subscription fields\n  isPremium: integer(\"is_premium\").notNull().default(0), // 0 = free, 1 = premium\n  subscriptionEndDate: timestamp(\"subscription_end_date\"), // When premium expires\n  // Daily match tracking for free users (Medium/Hard limit)\n  dailyMediumHardCount: integer(\"daily_medium_hard_count\").notNull().default(0),\n  lastMediumHardDate: varchar(\"last_medium_hard_date\"), // Store as YYYY-MM-DD\n  // Daily premium feedback tracking for free users (2 per day limit)\n  dailyPremiumFeedbackCount: integer(\"daily_premium_feedback_count\").notNull().default(0),\n  lastPremiumFeedbackDate: varchar(\"last_premium_feedback_date\"), // Store as YYYY-MM-DD\n  // Stripe integration fields (from blueprint:javascript_stripe)\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  // Initial onboarding tracking\n  hasSelectedInitialLanguage: integer(\"has_selected_initial_language\").notNull().default(0) // 0 = not selected, 1 = selected\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Language-specific stats for each user\nexport const userLanguageStats = pgTable(\n  \"user_language_stats\",\n  {\n    id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n    userId: varchar(\"user_id\").notNull().references(() => users.id),\n    language: varchar(\"language\").notNull(), // 'Chinese', 'Spanish', 'Italian'\n    elo: integer(\"elo\").notNull().default(1000),\n    wins: integer(\"wins\").notNull().default(0),\n    losses: integer(\"losses\").notNull().default(0),\n    winStreak: integer(\"win_streak\").notNull().default(0),\n    bestWinStreak: integer(\"best_win_streak\").notNull().default(0),\n    dailyLoginStreak: integer(\"daily_login_streak\").notNull().default(0),\n    lastLoginDate: varchar(\"last_login_date\"), // Store as YYYY-MM-DD for easy comparison\n    monthlyWins: integer(\"monthly_wins\").notNull().default(0), // Wins this month/season\n    monthlyResetDate: varchar(\"monthly_reset_date\"), // Store as YYYY-MM for monthly reset tracking\n    highestFluencyLevel: varchar(\"highest_fluency_level\").default(\"A1\"), // A1, A2, B1, B2, C1, C2\n    initialLevelSelected: integer(\"initial_level_selected\").notNull().default(0), // 0 = not selected, 1 = selected\n    createdAt: timestamp(\"created_at\").defaultNow(),\n    updatedAt: timestamp(\"updated_at\").defaultNow(),\n  },\n  (table) => [unique(\"unique_user_language\").on(table.userId, table.language)],\n);\n\nexport type UserLanguageStats = typeof userLanguageStats.$inferSelect;\nexport type InsertUserLanguageStats = typeof userLanguageStats.$inferInsert;\n\n// Match history for tracking individual matches\nexport const matches = pgTable(\"matches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  opponent: varchar(\"opponent\").notNull(),\n  result: varchar(\"result\").notNull(), // 'win' or 'loss'\n  eloChange: integer(\"elo_change\").notNull(),\n  language: varchar(\"language\").notNull(),\n  difficulty: varchar(\"difficulty\").notNull(),\n  grammarScore: integer(\"grammar_score\").notNull(),\n  fluencyScore: integer(\"fluency_score\").notNull(),\n  vocabularyScore: integer(\"vocabulary_score\").notNull(),\n  naturalnessScore: integer(\"naturalness_score\").notNull(),\n  overallScore: integer(\"overall_score\").notNull(),\n  isForfeit: integer(\"is_forfeit\").notNull().default(0), // 0 = false, 1 = true (SQLite boolean)\n  isPracticeMode: integer(\"is_practice_mode\").notNull().default(0), // 0 = competitive, 1 = practice\n  conversation: jsonb(\"conversation\"), // Full chat log as array of Message objects\n  detailedFeedback: jsonb(\"detailed_feedback\"), // Detailed AI feedback with corrections and suggestions\n  topic: varchar(\"topic\"), // Match topic for context\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type Match = typeof matches.$inferSelect;\nexport type InsertMatch = typeof matches.$inferInsert;\n\n// Friends table for managing friend relationships\nexport const friends = pgTable(\n  \"friends\",\n  {\n    id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n    userId: varchar(\"user_id\").notNull().references(() => users.id),\n    friendId: varchar(\"friend_id\").notNull().references(() => users.id),\n    status: varchar(\"status\").notNull().default(\"pending\"), // 'pending', 'accepted', 'rejected'\n    createdAt: timestamp(\"created_at\").defaultNow(),\n  },\n  (table) => [unique(\"unique_friendship\").on(table.userId, table.friendId)],\n);\n\nexport type Friend = typeof friends.$inferSelect;\nexport type InsertFriend = typeof friends.$inferInsert;\n\n// Private match invites for friend challenges\nexport const privateMatchInvites = pgTable(\"private_match_invites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inviteCode: varchar(\"invite_code\").unique(), // Optional for code-based invites\n  recipientId: varchar(\"recipient_id\").references(() => users.id), // Direct friend challenges\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id),\n  language: varchar(\"language\").notNull(),\n  difficulty: varchar(\"difficulty\").notNull(),\n  topic: varchar(\"topic\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // 'pending', 'accepted', 'rejected', 'expired'\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type PrivateMatchInvite = typeof privateMatchInvites.$inferSelect;\nexport type InsertPrivateMatchInvite = typeof privateMatchInvites.$inferInsert;\n\n// Premium whitelist for automatic premium access without payment\nexport const premiumWhitelist = pgTable(\"premium_whitelist\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  addedBy: varchar(\"added_by\"), // Admin user who added this email\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type PremiumWhitelist = typeof premiumWhitelist.$inferSelect;\nexport type InsertPremiumWhitelist = typeof premiumWhitelist.$inferInsert;\n\n// Match/Duel schemas\nexport const messageSchema = z.object({\n  sender: z.enum([\"user\", \"opponent\"]),\n  text: z.string(),\n  timestamp: z.number(),\n});\n\nexport const gradingRequestSchema = z.object({\n  messages: z.array(messageSchema),\n  topic: z.string(),\n  vocabulary: z.array(z.string()),\n  language: z.string().default(\"Chinese\"),\n  difficulty: z.string().default(\"Medium\"),\n  skippedQuestions: z.number().default(0),\n});\n\n// Detailed feedback for individual messages\nexport const messageAnalysisSchema = z.object({\n  messageIndex: z.number(),\n  sender: z.enum([\"user\", \"opponent\"]),\n  originalText: z.string(),\n  grammarCorrections: z.array(z.object({\n    original: z.string(),\n    corrected: z.string(),\n    explanation: z.string(),\n  })).optional(),\n  vocabularySuggestions: z.array(z.object({\n    word: z.string(),\n    betterAlternative: z.string(),\n    reason: z.string(),\n  })).optional(),\n  sentenceImprovement: z.object({\n    original: z.string(),\n    improved: z.string(),\n    explanation: z.string(),\n  }),\n  strengths: z.array(z.string()).optional(),\n  improvements: z.array(z.string()).optional(),\n});\n\nexport const gradingResultSchema = z.object({\n  grammar: z.number().min(0).max(100),\n  fluency: z.number().min(0).max(100),\n  vocabulary: z.number().min(0).max(100),\n  naturalness: z.number().min(0).max(100),\n  feedback: z.array(z.string()),\n  overall: z.number().min(0).max(100),\n  // Bot scores\n  botGrammar: z.number().min(0).max(100).optional(),\n  botFluency: z.number().min(0).max(100).optional(),\n  botVocabulary: z.number().min(0).max(100).optional(),\n  botNaturalness: z.number().min(0).max(100).optional(),\n  botOverall: z.number().min(0).max(100).optional(),\n  botElo: z.number().optional(),\n  isForfeit: z.boolean().optional(), // Track if match was forfeited\n  // Detailed per-message analysis\n  messageAnalysis: z.array(messageAnalysisSchema).optional(),\n});\n\nexport type Message = z.infer<typeof messageSchema>;\nexport type GradingRequest = z.infer<typeof gradingRequestSchema>;\nexport type GradingResult = z.infer<typeof gradingResultSchema>;\nexport type MessageAnalysis = z.infer<typeof messageAnalysisSchema>;\n","size_bytes":9451},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ProfileStats.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, Trophy, Target, Calendar, Flame, Zap, Eye, MessageSquare, BookOpen } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Match } from \"@shared/schema\";\nimport MatchDetails from \"@/components/MatchDetails\";\nimport { getFluencyLevel } from \"@shared/fluencyLevels\";\n\ninterface ProfileStatsProps {\n  username?: string;\n  elo?: number;\n  totalMatches?: number;\n  wins?: number;\n  losses?: number;\n  currentLanguage?: string;\n  isAuthenticated?: boolean;\n  winStreak?: number;\n  bestWinStreak?: number;\n  dailyLoginStreak?: number;\n}\n\nexport default function ProfileStats({\n  username = \"Alex\",\n  elo = 1000,\n  totalMatches = 0,\n  wins = 0,\n  losses = 0,\n  currentLanguage = \"Chinese\",\n  isAuthenticated = false,\n  winStreak = 0,\n  bestWinStreak = 0,\n  dailyLoginStreak = 0,\n}: ProfileStatsProps) {\n  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);\n  const winRate = totalMatches > 0 ? Math.round((wins / totalMatches) * 100) : 0;\n  const fluencyLevel = getFluencyLevel(elo);\n\n  // Fetch recent matches - explicitly pass language parameter\n  const { data: matches } = useQuery<Match[]>({\n    queryKey: [`/api/user/matches`, currentLanguage],\n    queryFn: async () => {\n      const response = await fetch(`/api/user/matches?language=${currentLanguage}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch matches');\n      return response.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  // Fetch skill progress\n  const { data: skillProgress } = useQuery<{\n    grammar: number;\n    fluency: number;\n    vocabulary: number;\n    naturalness: number;\n  }>({\n    queryKey: [`/api/user/skill-progress?language=${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"w-16 h-16 border-2 border-border\">\n              <AvatarFallback className=\"bg-muted text-muted-foreground font-bold text-xl\">\n                {username.slice(0, 2).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-2xl\" data-testid=\"text-username\">{username}</CardTitle>\n              <div className=\"flex items-center gap-3 mt-1 flex-wrap\">\n                <Badge variant=\"outline\" className=\"font-bold text-base\" data-testid=\"badge-fluency-level-profile\">\n                  {fluencyLevel.level} • {fluencyLevel.name}\n                </Badge>\n                <Badge variant=\"outline\" className=\"font-mono font-semibold text-base\">\n                  {elo} Fluency\n                </Badge>\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  <TrendingUp className=\"w-3 h-3\" />\n                  {currentLanguage}\n                </Badge>\n                {bestWinStreak > 0 && (\n                  <Badge variant=\"outline\" className=\"gap-1 bg-orange-500/10 border-orange-500/20 text-orange-500\">\n                    <Trophy className=\"w-3 h-3\" />\n                    Best: {bestWinStreak}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"border-card-border\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-primary/10 flex items-center justify-center\">\n                <Trophy className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold font-mono\">{wins}</div>\n                <div className=\"text-sm text-muted-foreground\">Wins</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-destructive/10 flex items-center justify-center\">\n                <Target className=\"w-5 h-5 text-destructive\" />\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold font-mono\">{losses}</div>\n                <div className=\"text-sm text-muted-foreground\">Losses</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-orange-500/10 flex items-center justify-center\">\n                <Flame className=\"w-5 h-5 text-orange-500\" />\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold font-mono\">{winStreak}</div>\n                <div className=\"text-sm text-muted-foreground\">Win Streak</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-blue-500/10 flex items-center justify-center\">\n                <Zap className=\"w-5 h-5 text-blue-500\" />\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold font-mono\">{dailyLoginStreak}</div>\n                <div className=\"text-sm text-muted-foreground\">Day Streak</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {isAuthenticated && (\n        <>\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle>Recent Matches</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {matches && matches.filter((m: any) => m.isPracticeMode === 0).length > 0 ? (\n                <div className=\"space-y-3\">\n                  {matches.filter((m: any) => m.isPracticeMode === 0).map((match) => (\n                        <div\n                          key={match.id}\n                          className=\"flex items-center gap-4 p-3 rounded-md hover-elevate cursor-pointer transition-all\"\n                          onClick={() => setSelectedMatch(match)}\n                          data-testid={`match-history-${match.id}`}\n                        >\n                          <Badge\n                            variant={match.result === \"win\" ? \"default\" : \"destructive\"}\n                            className=\"w-12 justify-center font-semibold\"\n                          >\n                            {match.result === \"win\" ? \"W\" : \"L\"}\n                          </Badge>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium flex items-center gap-2\">\n                              <span>vs {match.opponent}</span>\n                              {(match.isForfeit === 1 || (match as any).is_forfeit === 1) && (\n                                <Badge variant=\"outline\" className=\"hidden md:inline-flex text-xs px-1.5 py-0 h-4\">\n                                  Forfeit\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground flex items-center gap-2 flex-wrap\">\n                              <span>\n                                {match.createdAt ? formatDistanceToNow(new Date(match.createdAt), { addSuffix: true }) : \"Unknown\"}\n                                {match.topic && ` • ${match.topic}`}\n                              </span>\n                              {match.fluencyScore !== undefined && match.fluencyScore !== null && (\n                                <span className=\"flex items-center gap-1\">\n                                  <MessageSquare className=\"w-3 h-3\" />\n                                  {match.fluencyScore}\n                                </span>\n                              )}\n                              {match.vocabularyScore !== undefined && match.vocabularyScore !== null && (\n                                <span className=\"flex items-center gap-1\">\n                                  <BookOpen className=\"w-3 h-3\" />\n                                  {match.vocabularyScore}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`font-mono font-bold ${\n                              match.result === \"win\" ? \"text-success\" : \"text-destructive\"\n                            }`}>\n                              {match.result === \"win\" ? \"+\" : \"\"}{match.eloChange}\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"gap-1\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setSelectedMatch(match);\n                              }}\n                              data-testid={`button-view-match-${match.id}`}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                              View\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center text-muted-foreground py-8\">\n                      No competitive matches yet. Start a competitive match to see your history!\n                    </p>\n                  )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle>Skill Progress</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {skillProgress ? (\n                <>\n                  <div>\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Grammar</span>\n                      <span className=\"font-mono font-semibold text-sm\">{skillProgress.grammar}%</span>\n                    </div>\n                    <Progress value={skillProgress.grammar} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Fluency</span>\n                      <span className=\"font-mono font-semibold text-sm\">{skillProgress.fluency}%</span>\n                    </div>\n                    <Progress value={skillProgress.fluency} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Vocabulary</span>\n                      <span className=\"font-mono font-semibold text-sm\">{skillProgress.vocabulary}%</span>\n                    </div>\n                    <Progress value={skillProgress.vocabulary} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Naturalness</span>\n                      <span className=\"font-mono font-semibold text-sm\">{skillProgress.naturalness}%</span>\n                    </div>\n                    <Progress value={skillProgress.naturalness} className=\"h-2\" />\n                  </div>\n                </>\n              ) : (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No skill data yet. Complete matches to see your progress!\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </>\n      )}\n      \n      {selectedMatch && (\n        <MatchDetails\n          match={selectedMatch}\n          onClose={() => setSelectedMatch(null)}\n          language={currentLanguage}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":12876},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/storage.ts":{"content":"import { \n  type User, \n  type UpsertUser, \n  type UserLanguageStats, \n  type InsertUserLanguageStats,\n  type Match,\n  type InsertMatch,\n  type Friend,\n  type InsertFriend,\n  type PrivateMatchInvite,\n  type InsertPrivateMatchInvite,\n  type PremiumWhitelist,\n  type InsertPremiumWhitelist,\n  users,\n  userLanguageStats,\n  matches,\n  friends,\n  privateMatchInvites,\n  premiumWhitelist\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, or, sql, inArray } from \"drizzle-orm\";\n\n// Storage interface for Replit Auth\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUserActivity(userId: string): Promise<void>;\n  \n  // Language-specific stats\n  getUserLanguageStats(userId: string, language: string): Promise<UserLanguageStats | undefined>;\n  upsertUserLanguageStats(stats: InsertUserLanguageStats): Promise<UserLanguageStats>;\n  getAllLanguageStats(language: string): Promise<UserLanguageStats[]>;\n  setInitialLevel(userId: string, language: string, elo: number): Promise<UserLanguageStats>;\n  markInitialLanguageSelected(userId: string): Promise<void>;\n  \n  // Match history\n  createMatch(match: InsertMatch): Promise<Match>;\n  getUserMatches(userId: string, language?: string, limit?: number): Promise<Match[]>;\n  getUserSkillProgress(userId: string, language?: string): Promise<{\n    grammar: number;\n    fluency: number;\n    vocabulary: number;\n    naturalness: number;\n  }>;\n  \n  // Streaks\n  updateWinStreak(userId: string, language: string, isWin: boolean, isForfeit: boolean): Promise<UserLanguageStats>;\n  updateDailyLoginStreak(userId: string, language: string): Promise<UserLanguageStats>;\n  \n  // Friend system\n  sendFriendRequest(userId: string, friendUsername: string): Promise<Friend>;\n  getFriendshipById(friendshipId: string): Promise<Friend | undefined>;\n  acceptFriendRequest(friendshipId: string): Promise<Friend>;\n  rejectFriendRequest(friendshipId: string): Promise<void>;\n  removeFriend(friendshipId: string): Promise<void>;\n  getFriends(userId: string): Promise<Array<Friend & { friendUser: User; friendStats?: UserLanguageStats }>>;\n  getPendingFriendRequests(userId: string): Promise<Array<Friend & { requesterUser: User }>>;\n  \n  // Private match invites\n  createPrivateMatchInvite(invite: InsertPrivateMatchInvite): Promise<PrivateMatchInvite>;\n  getPrivateMatchInvite(inviteCode: string): Promise<PrivateMatchInvite | undefined>;\n  updatePrivateMatchInviteStatus(inviteCode: string, status: string): Promise<void>;\n  \n  // Premium features\n  checkDailyMediumHardLimit(userId: string, today: string): Promise<{ allowed: boolean; remaining: number; limit: number }>;\n  incrementDailyMediumHardCount(userId: string, today: string): Promise<void>;\n  checkDailyPremiumFeedbackLimit(userId: string, today: string): Promise<{ allowed: boolean; remaining: number; limit: number }>;\n  incrementDailyPremiumFeedbackCount(userId: string, today: string): Promise<void>;\n  \n  // Stripe integration (from blueprint:javascript_stripe)\n  updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User>;\n  \n  // Premium whitelist management\n  addToWhitelist(email: string, addedBy?: string): Promise<PremiumWhitelist>;\n  removeFromWhitelist(email: string): Promise<void>;\n  isEmailWhitelisted(email: string): Promise<boolean>;\n  getAllWhitelistedEmails(): Promise<PremiumWhitelist[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private languageStats: Map<string, UserLanguageStats>; // key: `${userId}-${language}`\n  private matches: Map<string, Match>;\n  private friendships: Map<string, Friend>;\n  private privateInvites: Map<string, PrivateMatchInvite>; // key: inviteCode\n\n  constructor() {\n    this.users = new Map();\n    this.languageStats = new Map();\n    this.matches = new Map();\n    this.friendships = new Map();\n    this.privateInvites = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const allUsers = Array.from(this.users.values());\n    return allUsers.find(user => user.email === email);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id!);\n    const user: User = {\n      id: userData.id || \"\",\n      googleId: userData.googleId !== undefined ? userData.googleId : (existingUser?.googleId || null),\n      username: userData.username !== undefined ? userData.username : (existingUser?.username || null),\n      password: userData.password !== undefined ? userData.password : (existingUser?.password || null),\n      email: userData.email !== undefined ? userData.email : (existingUser?.email || null),\n      firstName: userData.firstName !== undefined ? userData.firstName : (existingUser?.firstName || null),\n      lastName: userData.lastName !== undefined ? userData.lastName : (existingUser?.lastName || null),\n      profileImageUrl: userData.profileImageUrl !== undefined ? userData.profileImageUrl : (existingUser?.profileImageUrl || null),\n      isOnline: existingUser?.isOnline ?? 0,\n      lastSeenAt: existingUser?.lastSeenAt || new Date(),\n      createdAt: existingUser?.createdAt || new Date(),\n      updatedAt: new Date(),\n      isPremium: existingUser?.isPremium ?? 0,\n      subscriptionEndDate: existingUser?.subscriptionEndDate || null,\n      dailyMediumHardCount: existingUser?.dailyMediumHardCount ?? 0,\n      lastMediumHardDate: existingUser?.lastMediumHardDate || null,\n      dailyPremiumFeedbackCount: existingUser?.dailyPremiumFeedbackCount ?? 0,\n      lastPremiumFeedbackDate: existingUser?.lastPremiumFeedbackDate || null,\n      stripeCustomerId: existingUser?.stripeCustomerId || null,\n      stripeSubscriptionId: existingUser?.stripeSubscriptionId || null,\n      hasSelectedInitialLanguage: existingUser?.hasSelectedInitialLanguage ?? 0,\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async updateUserActivity(userId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      user.isOnline = 1;\n      user.lastSeenAt = new Date();\n      this.users.set(userId, user);\n    }\n  }\n\n  async getUserLanguageStats(userId: string, language: string): Promise<UserLanguageStats | undefined> {\n    return this.languageStats.get(`${userId}-${language}`);\n  }\n\n  async upsertUserLanguageStats(statsData: InsertUserLanguageStats): Promise<UserLanguageStats> {\n    const key = `${statsData.userId}-${statsData.language}`;\n    const existing = this.languageStats.get(key);\n    const stats: UserLanguageStats = {\n      id: existing?.id || crypto.randomUUID(),\n      userId: statsData.userId!,\n      language: statsData.language!,\n      elo: statsData.elo ?? existing?.elo ?? 1000,\n      wins: statsData.wins ?? existing?.wins ?? 0,\n      losses: statsData.losses ?? existing?.losses ?? 0,\n      winStreak: statsData.winStreak ?? existing?.winStreak ?? 0,\n      bestWinStreak: statsData.bestWinStreak ?? existing?.bestWinStreak ?? 0,\n      dailyLoginStreak: statsData.dailyLoginStreak ?? existing?.dailyLoginStreak ?? 0,\n      lastLoginDate: statsData.lastLoginDate ?? existing?.lastLoginDate ?? null,\n      monthlyWins: statsData.monthlyWins ?? existing?.monthlyWins ?? 0,\n      monthlyResetDate: statsData.monthlyResetDate ?? existing?.monthlyResetDate ?? null,\n      highestFluencyLevel: statsData.highestFluencyLevel ?? existing?.highestFluencyLevel ?? \"A1\",\n      initialLevelSelected: existing?.initialLevelSelected ?? 0,\n      createdAt: existing?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    this.languageStats.set(key, stats);\n    return stats;\n  }\n\n  async getAllLanguageStats(language: string): Promise<UserLanguageStats[]> {\n    return Array.from(this.languageStats.values()).filter(stats => stats.language === language);\n  }\n\n  async markInitialLanguageSelected(userId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      this.users.set(userId, { ...user, hasSelectedInitialLanguage: 1 });\n    }\n  }\n\n  async setInitialLevel(userId: string, language: string, elo: number): Promise<UserLanguageStats> {\n    const key = `${userId}-${language}`;\n    const existing = this.languageStats.get(key);\n    const stats: UserLanguageStats = {\n      id: existing?.id || crypto.randomUUID(),\n      userId,\n      language,\n      elo,\n      wins: existing?.wins ?? 0,\n      losses: existing?.losses ?? 0,\n      winStreak: existing?.winStreak ?? 0,\n      bestWinStreak: existing?.bestWinStreak ?? 0,\n      dailyLoginStreak: existing?.dailyLoginStreak ?? 0,\n      lastLoginDate: existing?.lastLoginDate ?? null,\n      monthlyWins: existing?.monthlyWins ?? 0,\n      monthlyResetDate: existing?.monthlyResetDate ?? null,\n      highestFluencyLevel: existing?.highestFluencyLevel ?? \"A1\",\n      initialLevelSelected: 1,\n      createdAt: existing?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    this.languageStats.set(key, stats);\n    return stats;\n  }\n\n  async createMatch(matchData: InsertMatch): Promise<Match> {\n    const match: Match = {\n      id: crypto.randomUUID(),\n      userId: matchData.userId!,\n      opponent: matchData.opponent!,\n      result: matchData.result!,\n      eloChange: matchData.eloChange!,\n      language: matchData.language!,\n      difficulty: matchData.difficulty!,\n      grammarScore: matchData.grammarScore!,\n      fluencyScore: matchData.fluencyScore!,\n      vocabularyScore: matchData.vocabularyScore!,\n      naturalnessScore: matchData.naturalnessScore!,\n      overallScore: matchData.overallScore!,\n      isForfeit: matchData.isForfeit ?? 0,\n      isPracticeMode: matchData.isPracticeMode ?? 0,\n      conversation: matchData.conversation ?? null,\n      detailedFeedback: matchData.detailedFeedback ?? null,\n      topic: matchData.topic ?? null,\n      createdAt: new Date(),\n    };\n    this.matches.set(match.id, match);\n    return match;\n  }\n\n  async getUserMatches(userId: string, language?: string, limit: number = 10): Promise<Match[]> {\n    const userMatches = Array.from(this.matches.values())\n      .filter(match => match.userId === userId && (!language || match.language === language))\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0))\n      .slice(0, limit);\n    return userMatches;\n  }\n\n  async getUserSkillProgress(userId: string, language?: string): Promise<{\n    grammar: number;\n    fluency: number;\n    vocabulary: number;\n    naturalness: number;\n  }> {\n    const userMatches = await this.getUserMatches(userId, language, 20);\n    \n    // Filter out practice matches - only count competitive matches for skill progress\n    const competitiveMatches = userMatches.filter(match => match.isPracticeMode === 0);\n    \n    if (competitiveMatches.length === 0) {\n      return { grammar: 0, fluency: 0, vocabulary: 0, naturalness: 0 };\n    }\n\n    const totals = competitiveMatches.reduce(\n      (acc, match) => ({\n        grammar: acc.grammar + match.grammarScore,\n        fluency: acc.fluency + match.fluencyScore,\n        vocabulary: acc.vocabulary + match.vocabularyScore,\n        naturalness: acc.naturalness + match.naturalnessScore,\n      }),\n      { grammar: 0, fluency: 0, vocabulary: 0, naturalness: 0 }\n    );\n\n    return {\n      grammar: Math.round(totals.grammar / competitiveMatches.length),\n      fluency: Math.round(totals.fluency / competitiveMatches.length),\n      vocabulary: Math.round(totals.vocabulary / competitiveMatches.length),\n      naturalness: Math.round(totals.naturalness / competitiveMatches.length),\n    };\n  }\n\n  async updateWinStreak(userId: string, language: string, isWin: boolean, isForfeit: boolean): Promise<UserLanguageStats> {\n    const stats = await this.getUserLanguageStats(userId, language) || await this.upsertUserLanguageStats({ userId, language });\n    \n    if (isForfeit) {\n      // Forfeits don't affect win streaks\n      return stats;\n    }\n    \n    if (isWin) {\n      const newStreak = stats.winStreak + 1;\n      const newBestStreak = Math.max(newStreak, stats.bestWinStreak);\n      return this.upsertUserLanguageStats({\n        ...stats,\n        winStreak: newStreak,\n        bestWinStreak: newBestStreak,\n      });\n    } else {\n      return this.upsertUserLanguageStats({\n        ...stats,\n        winStreak: 0,\n      });\n    }\n  }\n\n  async updateDailyLoginStreak(userId: string, language: string): Promise<UserLanguageStats> {\n    const stats = await this.getUserLanguageStats(userId, language) || await this.upsertUserLanguageStats({ userId, language });\n    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n    \n    if (stats.lastLoginDate === today) {\n      // Already logged in today, no update needed\n      return stats;\n    }\n    \n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    const isConsecutive = stats.lastLoginDate === yesterday;\n    \n    return this.upsertUserLanguageStats({\n      ...stats,\n      dailyLoginStreak: isConsecutive ? stats.dailyLoginStreak + 1 : 1,\n      lastLoginDate: today,\n    });\n  }\n\n  async updateHighestFluencyLevel(userId: string, language: string, level: string): Promise<UserLanguageStats> {\n    const stats = await this.getUserLanguageStats(userId, language) || await this.upsertUserLanguageStats({ userId, language });\n    return this.upsertUserLanguageStats({\n      ...stats,\n      highestFluencyLevel: level,\n    });\n  }\n\n  async sendFriendRequest(userId: string, friendUsername: string): Promise<Friend> {\n    // Find friend by username (email in guest mode)\n    const friendUser = Array.from(this.users.values()).find(u => \n      u.email === friendUsername || u.firstName === friendUsername\n    );\n    \n    if (!friendUser) {\n      throw new Error(\"User not found\");\n    }\n    \n    if (friendUser.id === userId) {\n      throw new Error(\"Cannot add yourself as a friend\");\n    }\n    \n    // Check if friendship already exists\n    const existing = Array.from(this.friendships.values()).find(f => \n      (f.userId === userId && f.friendId === friendUser.id) ||\n      (f.userId === friendUser.id && f.friendId === userId)\n    );\n    \n    if (existing) {\n      throw new Error(\"Friend request already exists\");\n    }\n    \n    const friendship: Friend = {\n      id: crypto.randomUUID(),\n      userId,\n      friendId: friendUser.id,\n      status: \"pending\",\n      createdAt: new Date(),\n    };\n    \n    this.friendships.set(friendship.id, friendship);\n    return friendship;\n  }\n\n  async getFriendshipById(friendshipId: string): Promise<Friend | undefined> {\n    return this.friendships.get(friendshipId);\n  }\n\n  async acceptFriendRequest(friendshipId: string): Promise<Friend> {\n    const friendship = this.friendships.get(friendshipId);\n    if (!friendship) {\n      throw new Error(\"Friend request not found\");\n    }\n    \n    const updated = { ...friendship, status: \"accepted\" };\n    this.friendships.set(friendshipId, updated);\n    return updated;\n  }\n\n  async rejectFriendRequest(friendshipId: string): Promise<void> {\n    this.friendships.delete(friendshipId);\n  }\n\n  async removeFriend(friendshipId: string): Promise<void> {\n    this.friendships.delete(friendshipId);\n  }\n\n  async getFriends(userId: string): Promise<Array<Friend & { friendUser: User; friendStats?: UserLanguageStats }>> {\n    const accepted = Array.from(this.friendships.values()).filter(f => \n      (f.userId === userId || f.friendId === userId) && f.status === \"accepted\"\n    );\n    \n    return accepted.map(friendship => {\n      const friendId = friendship.userId === userId ? friendship.friendId : friendship.userId;\n      const friendUser = this.users.get(friendId)!;\n      return {\n        ...friendship,\n        friendUser,\n        friendStats: undefined, // In-memory storage doesn't track this\n      };\n    });\n  }\n\n  async getPendingFriendRequests(userId: string): Promise<Array<Friend & { requesterUser: User }>> {\n    const pending = Array.from(this.friendships.values()).filter(f => \n      f.friendId === userId && f.status === \"pending\"\n    );\n    \n    return pending.map(friendship => ({\n      ...friendship,\n      requesterUser: this.users.get(friendship.userId)!,\n    }));\n  }\n\n  async createPrivateMatchInvite(inviteData: InsertPrivateMatchInvite): Promise<PrivateMatchInvite> {\n    const invite: PrivateMatchInvite = {\n      id: crypto.randomUUID(),\n      inviteCode: inviteData.inviteCode || null,\n      recipientId: inviteData.recipientId || null,\n      creatorId: inviteData.creatorId!,\n      language: inviteData.language!,\n      difficulty: inviteData.difficulty!,\n      topic: inviteData.topic || null,\n      status: inviteData.status || \"pending\",\n      expiresAt: inviteData.expiresAt!,\n      createdAt: new Date(),\n    };\n    \n    // Store by inviteCode if provided, otherwise by id\n    const key = invite.inviteCode || invite.id;\n    this.privateInvites.set(key, invite);\n    return invite;\n  }\n\n  async getPrivateMatchInvite(inviteCode: string): Promise<PrivateMatchInvite | undefined> {\n    return this.privateInvites.get(inviteCode);\n  }\n\n  async getPendingMatchChallenges(userId: string): Promise<Array<PrivateMatchInvite & { creatorUser: User }>> {\n    const pending = Array.from(this.privateInvites.values()).filter(invite =>\n      invite.recipientId === userId && invite.status === \"pending\"\n    );\n    \n    return pending.map(invite => ({\n      ...invite,\n      creatorUser: this.users.get(invite.creatorId)!,\n    }));\n  }\n\n  async updatePrivateMatchInviteStatus(inviteId: string, status: string): Promise<void> {\n    const invite = this.privateInvites.get(inviteId);\n    if (invite) {\n      invite.status = status;\n      this.privateInvites.set(inviteId, invite);\n    }\n  }\n\n  async checkDailyMediumHardLimit(userId: string, today: string): Promise<{ allowed: boolean; remaining: number; limit: number }> {\n    const user = this.users.get(userId);\n    const limit = 3;\n    \n    if (!user) {\n      return { allowed: false, remaining: 0, limit };\n    }\n    \n    // Reset count if it's a new day\n    if (user.lastMediumHardDate !== today) {\n      user.dailyMediumHardCount = 0;\n      user.lastMediumHardDate = today;\n      this.users.set(userId, user);\n    }\n    \n    const remaining = Math.max(0, limit - user.dailyMediumHardCount);\n    return {\n      allowed: user.dailyMediumHardCount < limit,\n      remaining,\n      limit\n    };\n  }\n\n  async incrementDailyMediumHardCount(userId: string, today: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      // Reset count if it's a new day\n      if (user.lastMediumHardDate !== today) {\n        user.dailyMediumHardCount = 0;\n      }\n      user.dailyMediumHardCount += 1;\n      user.lastMediumHardDate = today;\n      this.users.set(userId, user);\n    }\n  }\n\n  async checkDailyPremiumFeedbackLimit(userId: string, today: string): Promise<{ allowed: boolean; remaining: number; limit: number }> {\n    const user = this.users.get(userId);\n    const limit = 2; // Free users get 2 premium feedback matches per day\n    \n    if (!user) {\n      return { allowed: false, remaining: 0, limit };\n    }\n    \n    // Premium users have unlimited\n    if (user.isPremium === 1) {\n      return { allowed: true, remaining: 999, limit: 999 };\n    }\n    \n    // Reset count if it's a new day\n    if (user.lastPremiumFeedbackDate !== today) {\n      user.dailyPremiumFeedbackCount = 0;\n      user.lastPremiumFeedbackDate = today;\n      this.users.set(userId, user);\n    }\n    \n    const remaining = Math.max(0, limit - user.dailyPremiumFeedbackCount);\n    return {\n      allowed: user.dailyPremiumFeedbackCount < limit,\n      remaining,\n      limit\n    };\n  }\n\n  async incrementDailyPremiumFeedbackCount(userId: string, today: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      // Reset count if it's a new day\n      if (user.lastPremiumFeedbackDate !== today) {\n        user.dailyPremiumFeedbackCount = 0;\n      }\n      user.dailyPremiumFeedbackCount += 1;\n      user.lastPremiumFeedbackDate = today;\n      this.users.set(userId, user);\n    }\n  }\n\n  async updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) {\n      throw new Error(`User ${userId} not found`);\n    }\n    user.stripeCustomerId = customerId;\n    user.stripeSubscriptionId = subscriptionId;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  // Premium whitelist methods (MemStorage - in-memory only)\n  private whitelist: Map<string, PremiumWhitelist> = new Map();\n\n  async addToWhitelist(email: string, addedBy?: string): Promise<PremiumWhitelist> {\n    const entry: PremiumWhitelist = {\n      id: crypto.randomUUID(),\n      email: email.toLowerCase(),\n      addedBy: addedBy || null,\n      createdAt: new Date(),\n    };\n    this.whitelist.set(email.toLowerCase(), entry);\n    return entry;\n  }\n\n  async removeFromWhitelist(email: string): Promise<void> {\n    this.whitelist.delete(email.toLowerCase());\n  }\n\n  async isEmailWhitelisted(email: string): Promise<boolean> {\n    return this.whitelist.has(email.toLowerCase());\n  }\n\n  async getAllWhitelistedEmails(): Promise<PremiumWhitelist[]> {\n    return Array.from(this.whitelist.values());\n  }\n}\n\n// Database storage implementation using Drizzle ORM\nexport class DbStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const result = await db\n      .insert(users)\n      .values({\n        id: userData.id,\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        profileImageUrl: userData.profileImageUrl,\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          email: userData.email,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          profileImageUrl: userData.profileImageUrl,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUserActivity(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        isOnline: 1,\n        lastSeenAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async getUserLanguageStats(userId: string, language: string): Promise<UserLanguageStats | undefined> {\n    const result = await db\n      .select()\n      .from(userLanguageStats)\n      .where(and(eq(userLanguageStats.userId, userId), eq(userLanguageStats.language, language)))\n      .limit(1);\n    return result[0];\n  }\n\n  async upsertUserLanguageStats(statsData: InsertUserLanguageStats): Promise<UserLanguageStats> {\n    // Check if stats already exist\n    const existing = await this.getUserLanguageStats(statsData.userId!, statsData.language!);\n    \n    if (existing) {\n      // Update existing stats\n      const result = await db\n        .update(userLanguageStats)\n        .set({\n          elo: statsData.elo ?? existing.elo,\n          wins: statsData.wins ?? existing.wins,\n          losses: statsData.losses ?? existing.losses,\n          updatedAt: new Date(),\n        })\n        .where(and(\n          eq(userLanguageStats.userId, statsData.userId!),\n          eq(userLanguageStats.language, statsData.language!)\n        ))\n        .returning();\n      return result[0];\n    } else {\n      // Insert new stats\n      const result = await db\n        .insert(userLanguageStats)\n        .values({\n          userId: statsData.userId,\n          language: statsData.language,\n          elo: statsData.elo ?? 1000,\n          wins: statsData.wins ?? 0,\n          losses: statsData.losses ?? 0,\n        })\n        .returning();\n      return result[0];\n    }\n  }\n\n  async getAllLanguageStats(language: string): Promise<UserLanguageStats[]> {\n    return await db\n      .select()\n      .from(userLanguageStats)\n      .where(eq(userLanguageStats.language, language))\n      .orderBy(desc(userLanguageStats.elo));\n  }\n\n  async markInitialLanguageSelected(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ hasSelectedInitialLanguage: 1 })\n      .where(eq(users.id, userId));\n  }\n\n  async setInitialLevel(userId: string, language: string, elo: number): Promise<UserLanguageStats> {\n    // Check if stats already exist\n    const existing = await this.getUserLanguageStats(userId, language);\n    \n    if (existing) {\n      // Update existing stats with initial ELO and mark as selected\n      const result = await db\n        .update(userLanguageStats)\n        .set({\n          elo,\n          initialLevelSelected: 1,\n          updatedAt: new Date(),\n        })\n        .where(and(\n          eq(userLanguageStats.userId, userId),\n          eq(userLanguageStats.language, language)\n        ))\n        .returning();\n      return result[0];\n    } else {\n      // Insert new stats with initial ELO\n      const result = await db\n        .insert(userLanguageStats)\n        .values({\n          userId,\n          language,\n          elo,\n          initialLevelSelected: 1,\n        })\n        .returning();\n      return result[0];\n    }\n  }\n\n  async createMatch(matchData: InsertMatch): Promise<Match> {\n    const result = await db.insert(matches).values(matchData).returning();\n    \n    // Keep only the last 20 matches per user per language\n    if (matchData.userId && matchData.language) {\n      const allUserMatches = await db\n        .select()\n        .from(matches)\n        .where(and(\n          eq(matches.userId, matchData.userId),\n          eq(matches.language, matchData.language)\n        ))\n        .orderBy(desc(matches.createdAt));\n      \n      // If more than 20 matches, delete the oldest ones\n      if (allUserMatches.length > 20) {\n        const matchesToDelete = allUserMatches.slice(20);\n        const idsToDelete = matchesToDelete.map(m => m.id);\n        \n        await db\n          .delete(matches)\n          .where(inArray(matches.id, idsToDelete));\n      }\n    }\n    \n    return result[0];\n  }\n\n  async getUserMatches(userId: string, language?: string, limit: number = 10): Promise<Match[]> {\n    const conditions = language \n      ? and(eq(matches.userId, userId), eq(matches.language, language))\n      : eq(matches.userId, userId);\n      \n    return await db\n      .select()\n      .from(matches)\n      .where(conditions)\n      .orderBy(desc(matches.createdAt))\n      .limit(limit);\n  }\n\n  async getUserSkillProgress(userId: string, language?: string): Promise<{\n    grammar: number;\n    fluency: number;\n    vocabulary: number;\n    naturalness: number;\n  }> {\n    const userMatches = await this.getUserMatches(userId, language, 20);\n    \n    // Filter out practice matches - only count competitive matches for skill progress\n    const competitiveMatches = userMatches.filter(match => match.isPracticeMode === 0);\n    \n    if (competitiveMatches.length === 0) {\n      return { grammar: 0, fluency: 0, vocabulary: 0, naturalness: 0 };\n    }\n\n    const totals = competitiveMatches.reduce(\n      (acc, match) => ({\n        grammar: acc.grammar + match.grammarScore,\n        fluency: acc.fluency + match.fluencyScore,\n        vocabulary: acc.vocabulary + match.vocabularyScore,\n        naturalness: acc.naturalness + match.naturalnessScore,\n      }),\n      { grammar: 0, fluency: 0, vocabulary: 0, naturalness: 0 }\n    );\n\n    return {\n      grammar: Math.round(totals.grammar / competitiveMatches.length),\n      fluency: Math.round(totals.fluency / competitiveMatches.length),\n      vocabulary: Math.round(totals.vocabulary / competitiveMatches.length),\n      naturalness: Math.round(totals.naturalness / competitiveMatches.length),\n    };\n  }\n\n  async updateWinStreak(userId: string, language: string, isWin: boolean, isForfeit: boolean): Promise<UserLanguageStats> {\n    const stats = await this.getUserLanguageStats(userId, language) || await this.upsertUserLanguageStats({ userId, language });\n    \n    if (isForfeit) {\n      // Forfeits don't affect win streaks or monthly wins\n      return stats;\n    }\n    \n    // Check if we need to reset monthly wins (new month)\n    const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n    const needsMonthlyReset = stats.monthlyResetDate !== currentMonth;\n    \n    if (isWin) {\n      const newStreak = stats.winStreak + 1;\n      const newBestStreak = Math.max(newStreak, stats.bestWinStreak);\n      const newMonthlyWins = needsMonthlyReset ? 1 : (stats.monthlyWins ?? 0) + 1;\n      \n      const result = await db\n        .update(userLanguageStats)\n        .set({\n          winStreak: newStreak,\n          bestWinStreak: newBestStreak,\n          monthlyWins: newMonthlyWins,\n          monthlyResetDate: currentMonth,\n          updatedAt: new Date(),\n        })\n        .where(and(\n          eq(userLanguageStats.userId, userId),\n          eq(userLanguageStats.language, language)\n        ))\n        .returning();\n      return result[0];\n    } else {\n      const updateData: any = {\n        winStreak: 0,\n        updatedAt: new Date(),\n      };\n      \n      // Reset monthly wins if it's a new month\n      if (needsMonthlyReset) {\n        updateData.monthlyWins = 0;\n        updateData.monthlyResetDate = currentMonth;\n      }\n      \n      const result = await db\n        .update(userLanguageStats)\n        .set(updateData)\n        .where(and(\n          eq(userLanguageStats.userId, userId),\n          eq(userLanguageStats.language, language)\n        ))\n        .returning();\n      return result[0];\n    }\n  }\n\n  async updateDailyLoginStreak(userId: string, language: string): Promise<UserLanguageStats> {\n    const stats = await this.getUserLanguageStats(userId, language) || await this.upsertUserLanguageStats({ userId, language });\n    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n    \n    if (stats.lastLoginDate === today) {\n      // Already logged in today, no update needed\n      return stats;\n    }\n    \n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    const isConsecutive = stats.lastLoginDate === yesterday;\n    const newStreak = isConsecutive ? stats.dailyLoginStreak + 1 : 1;\n    \n    const result = await db\n      .update(userLanguageStats)\n      .set({\n        dailyLoginStreak: newStreak,\n        lastLoginDate: today,\n        updatedAt: new Date(),\n      })\n      .where(and(\n        eq(userLanguageStats.userId, userId),\n        eq(userLanguageStats.language, language)\n      ))\n      .returning();\n    return result[0];\n  }\n\n  async updateHighestFluencyLevel(userId: string, language: string, level: string): Promise<UserLanguageStats> {\n    const result = await db\n      .update(userLanguageStats)\n      .set({\n        highestFluencyLevel: level,\n        updatedAt: new Date(),\n      })\n      .where(and(\n        eq(userLanguageStats.userId, userId),\n        eq(userLanguageStats.language, language)\n      ))\n      .returning();\n    return result[0];\n  }\n\n  async sendFriendRequest(userId: string, friendUsername: string): Promise<Friend> {\n    // Find friend by username (email)\n    const friendUsers = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, friendUsername))\n      .limit(1);\n    \n    if (friendUsers.length === 0) {\n      throw new Error(\"User not found\");\n    }\n    \n    const friendUser = friendUsers[0];\n    \n    if (friendUser.id === userId) {\n      throw new Error(\"Cannot add yourself as a friend\");\n    }\n    \n    // Check if friendship already exists\n    const existing = await db\n      .select()\n      .from(friends)\n      .where(\n        or(\n          and(eq(friends.userId, userId), eq(friends.friendId, friendUser.id)),\n          and(eq(friends.userId, friendUser.id), eq(friends.friendId, userId))\n        )\n      )\n      .limit(1);\n    \n    if (existing.length > 0) {\n      throw new Error(\"Friend request already exists\");\n    }\n    \n    const result = await db\n      .insert(friends)\n      .values({\n        userId,\n        friendId: friendUser.id,\n        status: \"pending\",\n      })\n      .returning();\n    \n    return result[0];\n  }\n\n  async getFriendshipById(friendshipId: string): Promise<Friend | undefined> {\n    const result = await db\n      .select()\n      .from(friends)\n      .where(eq(friends.id, friendshipId))\n      .limit(1);\n    return result[0];\n  }\n\n  async acceptFriendRequest(friendshipId: string): Promise<Friend> {\n    const result = await db\n      .update(friends)\n      .set({ status: \"accepted\" })\n      .where(eq(friends.id, friendshipId))\n      .returning();\n    \n    if (result.length === 0) {\n      throw new Error(\"Friend request not found\");\n    }\n    \n    return result[0];\n  }\n\n  async rejectFriendRequest(friendshipId: string): Promise<void> {\n    await db.delete(friends).where(eq(friends.id, friendshipId));\n  }\n\n  async removeFriend(friendshipId: string): Promise<void> {\n    await db.delete(friends).where(eq(friends.id, friendshipId));\n  }\n\n  async getFriends(userId: string): Promise<Array<Friend & { friendUser: User; friendStats?: UserLanguageStats }>> {\n    const friendships = await db\n      .select()\n      .from(friends)\n      .where(\n        and(\n          or(eq(friends.userId, userId), eq(friends.friendId, userId)),\n          eq(friends.status, \"accepted\")\n        )\n      );\n    \n    const result = [];\n    for (const friendship of friendships) {\n      const friendId = friendship.userId === userId ? friendship.friendId : friendship.userId;\n      const friendUser = await this.getUser(friendId);\n      \n      if (friendUser) {\n        result.push({\n          ...friendship,\n          friendUser,\n          friendStats: undefined,\n        });\n      }\n    }\n    \n    return result;\n  }\n\n  async getPendingFriendRequests(userId: string): Promise<Array<Friend & { requesterUser: User }>> {\n    const requests = await db\n      .select()\n      .from(friends)\n      .where(\n        and(\n          eq(friends.friendId, userId),\n          eq(friends.status, \"pending\")\n        )\n      );\n    \n    const result = [];\n    for (const request of requests) {\n      const requesterUser = await this.getUser(request.userId);\n      \n      if (requesterUser) {\n        result.push({\n          ...request,\n          requesterUser,\n        });\n      }\n    }\n    \n    return result;\n  }\n\n  async createPrivateMatchInvite(inviteData: InsertPrivateMatchInvite): Promise<PrivateMatchInvite> {\n    const result = await db\n      .insert(privateMatchInvites)\n      .values(inviteData)\n      .returning();\n    return result[0];\n  }\n\n  async getPrivateMatchInvite(inviteCode: string): Promise<PrivateMatchInvite | undefined> {\n    const result = await db\n      .select()\n      .from(privateMatchInvites)\n      .where(eq(privateMatchInvites.inviteCode, inviteCode))\n      .limit(1);\n    return result[0];\n  }\n\n  async getPendingMatchChallenges(userId: string): Promise<Array<PrivateMatchInvite & { creatorUser: User }>> {\n    const challenges = await db\n      .select()\n      .from(privateMatchInvites)\n      .where(\n        and(\n          eq(privateMatchInvites.recipientId, userId),\n          eq(privateMatchInvites.status, \"pending\")\n        )\n      );\n    \n    const result = [];\n    for (const challenge of challenges) {\n      const creatorUser = await this.getUser(challenge.creatorId);\n      \n      if (creatorUser) {\n        result.push({\n          ...challenge,\n          creatorUser,\n        });\n      }\n    }\n    \n    return result;\n  }\n\n  async updatePrivateMatchInviteStatus(inviteId: string, status: string): Promise<void> {\n    await db\n      .update(privateMatchInvites)\n      .set({ status })\n      .where(eq(privateMatchInvites.id, inviteId));\n  }\n\n  async checkDailyMediumHardLimit(userId: string, today: string): Promise<{ allowed: boolean; remaining: number; limit: number }> {\n    const user = await this.getUser(userId);\n    const limit = 3;\n    \n    if (!user) {\n      return { allowed: false, remaining: 0, limit };\n    }\n    \n    // Reset count if it's a new day\n    if (user.lastMediumHardDate !== today) {\n      await db\n        .update(users)\n        .set({\n          dailyMediumHardCount: 0,\n          lastMediumHardDate: today,\n        })\n        .where(eq(users.id, userId));\n      \n      return { allowed: true, remaining: limit, limit };\n    }\n    \n    const remaining = Math.max(0, limit - user.dailyMediumHardCount);\n    return {\n      allowed: user.dailyMediumHardCount < limit,\n      remaining,\n      limit\n    };\n  }\n\n  async incrementDailyMediumHardCount(userId: string, today: string): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n    \n    // Reset count if it's a new day\n    if (user.lastMediumHardDate !== today) {\n      await db\n        .update(users)\n        .set({\n          dailyMediumHardCount: 1,\n          lastMediumHardDate: today,\n        })\n        .where(eq(users.id, userId));\n    } else {\n      await db\n        .update(users)\n        .set({\n          dailyMediumHardCount: user.dailyMediumHardCount + 1,\n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  async checkDailyPremiumFeedbackLimit(userId: string, today: string): Promise<{ allowed: boolean; remaining: number; limit: number }> {\n    const user = await this.getUser(userId);\n    const limit = 2; // Free users get 2 premium feedback matches per day\n    \n    if (!user) {\n      return { allowed: false, remaining: 0, limit };\n    }\n    \n    // Premium users have unlimited\n    if (user.isPremium === 1) {\n      return { allowed: true, remaining: 999, limit: 999 };\n    }\n    \n    // Reset count if it's a new day\n    if (user.lastPremiumFeedbackDate !== today) {\n      await db\n        .update(users)\n        .set({\n          dailyPremiumFeedbackCount: 0,\n          lastPremiumFeedbackDate: today,\n        })\n        .where(eq(users.id, userId));\n      \n      return { allowed: true, remaining: limit, limit };\n    }\n    \n    const remaining = Math.max(0, limit - user.dailyPremiumFeedbackCount);\n    return {\n      allowed: user.dailyPremiumFeedbackCount < limit,\n      remaining,\n      limit\n    };\n  }\n\n  async incrementDailyPremiumFeedbackCount(userId: string, today: string): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n    \n    // Reset count if it's a new day\n    if (user.lastPremiumFeedbackDate !== today) {\n      await db\n        .update(users)\n        .set({\n          dailyPremiumFeedbackCount: 1,\n          lastPremiumFeedbackDate: today,\n        })\n        .where(eq(users.id, userId));\n    } else {\n      await db\n        .update(users)\n        .set({\n          dailyPremiumFeedbackCount: user.dailyPremiumFeedbackCount + 1,\n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  async updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User> {\n    const result = await db\n      .update(users)\n      .set({\n        stripeCustomerId: customerId,\n        stripeSubscriptionId: subscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!result[0]) {\n      throw new Error(`User ${userId} not found`);\n    }\n    \n    return result[0];\n  }\n\n  // Premium whitelist methods (DbStorage - database-backed)\n  async addToWhitelist(email: string, addedBy?: string): Promise<PremiumWhitelist> {\n    const result = await db\n      .insert(premiumWhitelist)\n      .values({\n        email: email.toLowerCase(),\n        addedBy: addedBy || null,\n      })\n      .returning();\n    return result[0];\n  }\n\n  async removeFromWhitelist(email: string): Promise<void> {\n    await db\n      .delete(premiumWhitelist)\n      .where(eq(premiumWhitelist.email, email.toLowerCase()));\n  }\n\n  async isEmailWhitelisted(email: string): Promise<boolean> {\n    const result = await db\n      .select()\n      .from(premiumWhitelist)\n      .where(eq(premiumWhitelist.email, email.toLowerCase()))\n      .limit(1);\n    return result.length > 0;\n  }\n\n  async getAllWhitelistedEmails(): Promise<PremiumWhitelist[]> {\n    return await db.select().from(premiumWhitelist);\n  }\n}\n\n// Use database storage for persistent data\nexport const storage = new DbStorage();\n","size_bytes":40706},"client/src/components/examples/DuelInterface.tsx":{"content":"import DuelInterface from '../DuelInterface';\n\nexport default function DuelInterfaceExample() {\n  return (\n    <DuelInterface \n      topic=\"Travel & Tourism\"\n      vocabulary={[\"journey\", \"destination\", \"explore\", \"adventure\", \"culture\"]}\n      opponentName=\"Maria García\"\n      opponentElo={1520}\n      userElo={1547}\n      onComplete={() => console.log('Duel completed')}\n    />\n  );\n}\n","size_bytes":389},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/TextWithPinyin.tsx":{"content":"import { pinyin } from \"pinyin-pro\";\n\ninterface TextWithPinyinProps {\n  text: string;\n  language: string;\n  className?: string;\n}\n\nexport default function TextWithPinyin({ text, language, className = \"\" }: TextWithPinyinProps) {\n  // Only show pinyin for Chinese\n  if (language !== \"Chinese\") {\n    return <span className={className}>{text}</span>;\n  }\n\n  // Split text into characters for display\n  const chars = text.split('');\n  const words: Array<{ char: string; pinyin: string }> = [];\n  \n  chars.forEach((char) => {\n    // Check if character is Chinese\n    if (/[\\u4e00-\\u9fa5]/.test(char)) {\n      const pinyinForChar = pinyin(char, { toneType: 'symbol' });\n      words.push({ char, pinyin: pinyinForChar });\n    } else {\n      words.push({ char, pinyin: '' });\n    }\n  });\n\n  return (\n    <span className={`inline-flex flex-wrap gap-x-1 ${className}`}>\n      {words.map((word, idx) => (\n        <span key={idx} className=\"inline-flex flex-col items-center\">\n          {word.pinyin && (\n            <span className=\"text-[10px] leading-tight opacity-70 whitespace-nowrap\">\n              {word.pinyin}\n            </span>\n          )}\n          <span>{word.char}</span>\n        </span>\n      ))}\n    </span>\n  );\n}\n","size_bytes":1221},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/pages/Landing.tsx":{"content":"import { Trophy, Users, Zap, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  const handleSignIn = () => {\n    window.location.href = \"/signin\";\n  };\n\n  const handleGuestPlay = () => {\n    window.location.href = \"/?guest=true\";\n  };\n\n  return (\n    <div className=\"min-h-screen w-full\">\n      {/* Header */}\n      <div className=\"border-b border-border/40 bg-card/30 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-6 md:px-8 lg:px-12 py-6\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <img \n                src=\"/favicon.png\" \n                alt=\"Verbio\" \n                className=\"w-12 h-12\"\n              />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Verbio</h2>\n                <p className=\"text-sm text-muted-foreground\">Competitive Language Learning</p>\n              </div>\n            </div>\n            \n            {/* External Link Placeholder */}\n            <a\n              href=\"#\"\n              className=\"flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"link-external\"\n            >\n              <span>Learn More</span>\n              <ExternalLink className=\"w-4 h-4\" />\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col items-center justify-center min-h-screen px-4 py-12\">\n        <div className=\"w-full max-w-6xl\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-6xl lg:text-7xl font-bold text-foreground mb-6\">\n              Welcome to Verbio\n            </h1>\n            <p className=\"text-xl lg:text-2xl text-muted-foreground mb-10 max-w-3xl mx-auto\">\n              Master languages through competitive duels. Track your progress with Fluency Score ratings and compete against players worldwide.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                className=\"text-lg font-semibold\"\n                onClick={handleSignIn}\n                data-testid=\"button-sign-in\"\n              >\n                Sign In to Compete\n              </Button>\n              <Button \n                size=\"lg\"\n                className=\"text-lg font-semibold\"\n                variant=\"default\"\n                style={{ backgroundColor: 'hsl(var(--accent))', color: 'hsl(var(--accent-foreground))', borderColor: 'hsl(var(--accent))' }}\n                onClick={handleGuestPlay}\n                data-testid=\"button-guest-play\"\n              >\n                Play as Guest\n              </Button>\n            </div>\n          </div>\n\n          {/* Feature Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mt-20\">\n            <Card className=\"border-primary/20 shadow-md\">\n              <CardContent className=\"pt-8 pb-8\">\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"w-16 h-16 rounded-xl bg-primary flex items-center justify-center shadow-lg\">\n                    <Trophy className=\"w-8 h-8 text-primary-foreground\" />\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-bold text-center mb-3\">Competitive Ranking</h3>\n                <p className=\"text-muted-foreground text-center\">\n                  Track your progress with Fluency Score ratings. Compete against players at your skill level and climb the leaderboard.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-accent/50 shadow-md\">\n              <CardContent className=\"pt-8 pb-8\">\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"w-16 h-16 rounded-xl bg-accent flex items-center justify-center shadow-lg\">\n                    <Zap className=\"w-8 h-8 text-white\" />\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-bold text-center mb-3\">AI-Powered Feedback</h3>\n                <p className=\"text-muted-foreground text-center\">\n                  Get instant grading on grammar, fluency, vocabulary, and naturalness from advanced AI.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-success/20 shadow-md\">\n              <CardContent className=\"pt-8 pb-8\">\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"w-16 h-16 rounded-xl bg-success flex items-center justify-center shadow-lg\">\n                    <Users className=\"w-8 h-8 text-white\" />\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-bold text-center mb-3\">Multiple Languages</h3>\n                <p className=\"text-muted-foreground text-center\">\n                  Practice Chinese, Spanish, or Italian with themed conversation topics and varied difficulty levels.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5321},"client/src/components/examples/Leaderboard.tsx":{"content":"import Leaderboard from '../Leaderboard';\n\nexport default function LeaderboardExample() {\n  return <Leaderboard />;\n}\n","size_bytes":118},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { gradingRequestSchema, users } from \"@shared/schema\";\nimport { gradeConversation, generateBotQuestion, generateBotAnswer, validateQuestion, generateVocabulary, translateText, generateExampleResponse } from \"./openai\";\nimport { setupMatchmaking } from \"./matchmaking\";\nimport { vocabularyCache } from \"./vocabularyCache\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport Stripe from \"stripe\";\nimport { setupAuth, isAuthenticated } from \"./googleAuth\";\n\n// Initialize Stripe\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Google OAuth authentication\n  await setupAuth(app);\n\n  // Auth route - get current user (protected by isAuthenticated)\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      \n      if (!userId) {\n        return res.json(null);\n      }\n      \n      const user = await storage.getUser(userId);\n      \n      // Update user's online status and last seen\n      if (user) {\n        await storage.updateUserActivity(userId);\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Heartbeat endpoint to keep user marked as online\n  app.post('/api/user/heartbeat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      await storage.updateUserActivity(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating user activity:\", error);\n      res.status(500).json({ message: \"Failed to update activity\" });\n    }\n  });\n\n  // Check if user can play medium/hard mode\n  app.post('/api/user/check-difficulty-access', async (req: any, res) => {\n    try {\n      const { difficulty } = req.body;\n      \n      // Beginner and Easy are always allowed\n      if (difficulty === 'Beginner' || difficulty === 'Easy') {\n        return res.json({ allowed: true, isPremium: false });\n      }\n      \n      // Check if user is authenticated and premium\n      const userId = req.user?.id;\n      if (userId) {\n        const user = await storage.getUser(userId);\n        \n        // Premium users have unlimited access\n        if (user?.isPremium === 1) {\n          return res.json({ allowed: true, isPremium: true });\n        }\n        \n        // Free users: check daily limit (3 matches for Medium/Hard)\n        const today = new Date().toISOString().split('T')[0];\n        const canPlay = await storage.checkDailyMediumHardLimit(userId, today);\n        \n        return res.json({ \n          allowed: canPlay.allowed, \n          isPremium: false,\n          remaining: canPlay.remaining,\n          limit: canPlay.limit\n        });\n      }\n      \n      // Guest users cannot play Medium/Hard\n      return res.json({ allowed: false, isPremium: false, message: \"Sign in required for Medium/Hard modes\" });\n    } catch (error) {\n      console.error(\"Error checking difficulty access:\", error);\n      res.status(500).json({ message: \"Failed to check access\" });\n    }\n  });\n\n  // Track medium/hard match start\n  app.post('/api/user/track-medium-hard-match', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      \n      const today = new Date().toISOString().split('T')[0];\n      \n      await storage.incrementDailyMediumHardCount(userId, today);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error tracking match:\", error);\n      res.status(500).json({ message: \"Failed to track match\" });\n    }\n  });\n\n  // Get practice bots by language (for bot selection in practice mode)\n  app.get(\"/api/bots\", async (req, res) => {\n    try {\n      const { language } = req.query;\n      const { getPracticeBotsByLanguage } = await import('./botProfiles.js');\n      \n      if (!language || typeof language !== 'string') {\n        return res.status(400).json({ message: \"Language parameter is required\" });\n      }\n      \n      const bots = getPracticeBotsByLanguage(language);\n      res.json(bots);\n    } catch (error) {\n      console.error(\"Error fetching bots:\", error);\n      res.status(500).json({ message: \"Failed to fetch bots\" });\n    }\n  });\n\n  // Get single bot by ID\n  app.get(\"/api/bots/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { getBotById } = await import('./botProfiles.js');\n      \n      const bot = getBotById(id);\n      if (!bot) {\n        return res.status(404).json({ message: \"Bot not found\" });\n      }\n      \n      res.json(bot);\n    } catch (error) {\n      console.error(\"Error fetching bot:\", error);\n      res.status(500).json({ message: \"Failed to fetch bot\" });\n    }\n  });\n\n  // Grade conversation\n  app.post(\"/api/grade\", async (req: any, res) => {\n    try {\n      const request = gradingRequestSchema.parse(req.body);\n      \n      // Check if user is premium (for detailed feedback)\n      let isPremium = false;\n      const userId = req.user?.id;\n      const today = new Date().toISOString().split('T')[0];\n      \n      if (userId) {\n        const user = await storage.getUser(userId);\n        isPremium = user?.isPremium === 1;\n        \n        // For free users, check daily premium feedback limit\n        if (!isPremium) {\n          const feedbackLimit = await storage.checkDailyPremiumFeedbackLimit(userId, today);\n          \n          // If allowed, give premium feedback and increment counter\n          if (feedbackLimit.allowed) {\n            isPremium = true; // Give them premium feedback\n            await storage.incrementDailyPremiumFeedbackCount(userId, today);\n          }\n          // Otherwise isPremium stays false, they get basic feedback\n        }\n      }\n      \n      const result = await gradeConversation(request, isPremium);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Grading error:\", error);\n      res.status(500).json({ \n        error: \"Failed to grade conversation\",\n        message: error.message \n      });\n    }\n  });\n\n  // Generate bot question\n  app.post(\"/api/bot-question\", async (req, res) => {\n    try {\n      const { topic, vocabulary, language = \"Chinese\", difficulty = \"Medium\", previousQuestions = [], isPracticeMode = false, botId } = req.body;\n      \n      let botPersonality: string | undefined = undefined;\n      let botBackstory: string | undefined = undefined;\n      if (botId) {\n        const { getBotById } = await import('./botProfiles.js');\n        const bot = getBotById(botId);\n        if (bot) {\n          botPersonality = bot.personality;\n          botBackstory = bot.backstory;\n        }\n      }\n      \n      const question = await generateBotQuestion(topic, vocabulary, language, difficulty, previousQuestions, isPracticeMode, botPersonality, botBackstory);\n      res.json({ question });\n    } catch (error: any) {\n      console.error(\"Bot question error:\", error);\n      res.status(500).json({ \n        error: \"Failed to generate question\",\n        message: error.message \n      });\n    }\n  });\n\n  // Generate bot answer\n  app.post(\"/api/bot-answer\", async (req, res) => {\n    try {\n      const { userQuestion, topic, vocabulary, language = \"Chinese\", difficulty = \"Medium\", isPracticeMode = false, botId } = req.body;\n      \n      let botPersonality: string | undefined = undefined;\n      let botBackstory: string | undefined = undefined;\n      if (botId) {\n        const { getBotById } = await import('./botProfiles.js');\n        const bot = getBotById(botId);\n        if (bot) {\n          botPersonality = bot.personality;\n          botBackstory = bot.backstory;\n        }\n      }\n      \n      const answer = await generateBotAnswer(userQuestion, topic, vocabulary, language, difficulty, isPracticeMode, botPersonality, botBackstory);\n      res.json({ answer });\n    } catch (error: any) {\n      console.error(\"Bot answer error:\", error);\n      res.status(500).json({ \n        error: \"Failed to generate answer\",\n        message: error.message \n      });\n    }\n  });\n\n  // Validate user question with AI\n  app.post(\"/api/validate-question\", async (req, res) => {\n    try {\n      const { question, topic, vocabulary, language = \"Chinese\", messages = [] } = req.body;\n      \n      // Normalize text for comparison (remove diacritics, spaces, punctuation, convert to lowercase)\n      const normalizeText = (text: string) => \n        text.normalize('NFD') // Decompose combined characters\n          .replace(/[\\u0300-\\u036f]/g, '') // Remove diacritical marks\n          .toLowerCase()\n          .replace(/[^a-z0-9\\u4e00-\\u9fff]/g, '') // Remove all non-letter/number characters\n          .trim();\n      \n      const normalizedNewQuestion = normalizeText(question);\n      \n      // Check if user is repeating their own previous question\n      const userQuestions = messages\n        .filter((m: any) => m.sender === \"user\")\n        .map((m: any) => m.text || \"\");\n      \n      for (const prevQuestion of userQuestions) {\n        const normalizedPrevQuestion = normalizeText(prevQuestion || \"\");\n        \n        if (normalizedNewQuestion && normalizedPrevQuestion) {\n          const similarity = normalizedNewQuestion === normalizedPrevQuestion ||\n                           normalizedNewQuestion.includes(normalizedPrevQuestion) ||\n                           normalizedPrevQuestion.includes(normalizedNewQuestion);\n          \n          if (similarity) {\n            return res.json({\n              isValid: false,\n              message: \"You already asked this question. Please ask something different.\"\n            });\n          }\n        }\n      }\n      \n      // Check for duplicate questions (copying opponent's question)\n      const opponentMessages = messages.filter((m: any) => m.sender === \"opponent\");\n      if (opponentMessages.length > 0) {\n        const lastOpponentQuestion = opponentMessages[opponentMessages.length - 1]?.text || \"\";\n        const normalizedOpponentQuestion = normalizeText(lastOpponentQuestion || \"\");\n        \n        // Check if questions are too similar (exact match or substring match)\n        if (normalizedNewQuestion && normalizedOpponentQuestion) {\n          const similarity = normalizedNewQuestion === normalizedOpponentQuestion ||\n                           normalizedNewQuestion.includes(normalizedOpponentQuestion) ||\n                           normalizedOpponentQuestion.includes(normalizedNewQuestion);\n          \n          if (similarity) {\n            return res.json({\n              isValid: false,\n              message: \"Please ask your own original question. Don't copy your opponent's question.\"\n            });\n          }\n        }\n      }\n      \n      const result = await validateQuestion(question, topic, vocabulary, language);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Question validation error:\", error);\n      res.status(500).json({ \n        error: \"Failed to validate question\",\n        message: error.message \n      });\n    }\n  });\n\n  // Translate text to English (for beginner mode hover translation)\n  app.post(\"/api/translate\", async (req, res) => {\n    try {\n      const { text, fromLanguage } = req.body;\n      const translation = await translateText(text, fromLanguage);\n      res.json({ translation });\n    } catch (error: any) {\n      console.error(\"Translation error:\", error);\n      res.status(500).json({ \n        error: \"Failed to translate text\",\n        message: error.message \n      });\n    }\n  });\n\n  // Generate example response for beginner mode help\n  app.post(\"/api/generate-example\", async (req, res) => {\n    try {\n      const { language, difficulty, topic, vocabulary, phase, context } = req.body;\n      const example = await generateExampleResponse({\n        language,\n        difficulty,\n        topic,\n        vocabulary,\n        phase,\n        context\n      });\n      res.json({ example });\n    } catch (error: any) {\n      console.error(\"Example generation error:\", error);\n      res.status(500).json({ \n        error: \"Failed to generate example\",\n        message: error.message \n      });\n    }\n  });\n\n  // Generate vocabulary words with AI (with caching)\n  app.post(\"/api/generate-vocabulary\", async (req, res) => {\n    try {\n      const { topic, language, difficulty = \"Medium\" } = req.body;\n      \n      // Check cache first\n      const cachedVocabulary = vocabularyCache.get({ topic, language, difficulty });\n      \n      if (cachedVocabulary) {\n        console.log(`Cache hit for ${topic}/${language}/${difficulty}`);\n        return res.json({ vocabulary: cachedVocabulary, cached: true });\n      }\n      \n      // Generate new vocabulary if not in cache\n      console.log(`Cache miss for ${topic}/${language}/${difficulty} - generating new vocabulary`);\n      const vocabulary = await generateVocabulary(topic, language, difficulty);\n      \n      // Store in cache for future use\n      vocabularyCache.set({ topic, language, difficulty }, vocabulary);\n      \n      res.json({ vocabulary, cached: false });\n    } catch (error: any) {\n      console.error(\"Vocabulary generation error:\", error);\n      res.status(500).json({ \n        error: \"Failed to generate vocabulary\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get user stats for a language\n  app.get(\"/api/user/stats/:language\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const language = req.params.language;\n      \n      // Update daily login streak\n      const stats = await storage.updateDailyLoginStreak(userId, language);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  // Update user stats for a language\n  app.post(\"/api/user/stats\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { language, elo, wins, losses } = req.body;\n      \n      if (!language) {\n        return res.status(400).json({ message: \"Language is required\" });\n      }\n\n      const updatedStats = await storage.upsertUserLanguageStats({\n        userId,\n        language,\n        elo,\n        wins,\n        losses,\n      });\n\n      res.json(updatedStats);\n    } catch (error) {\n      console.error(\"Error updating user stats:\", error);\n      res.status(500).json({ message: \"Failed to update user stats\" });\n    }\n  });\n\n  // Mark that user has selected their initial language\n  app.post(\"/api/user/mark-initial-language-selected\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      await storage.markInitialLanguageSelected(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking initial language selected:\", error);\n      res.status(500).json({ message: \"Failed to mark initial language selected\" });\n    }\n  });\n\n  // Set initial proficiency level for a language\n  app.post(\"/api/user/set-initial-level\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { language, elo } = req.body;\n      \n      if (!language || !elo) {\n        return res.status(400).json({ message: \"Language and ELO are required\" });\n      }\n\n      // Validate ELO is one of the allowed values\n      const allowedElos = [700, 1000, 1300];\n      if (!allowedElos.includes(elo)) {\n        return res.status(400).json({ message: \"Invalid ELO value\" });\n      }\n\n      // Get or create stats\n      let stats = await storage.getUserLanguageStats(userId, language);\n      \n      // Update the stats with the initial ELO and mark as selected\n      const updatedStats = await storage.setInitialLevel(userId, language, elo);\n\n      res.json(updatedStats);\n    } catch (error) {\n      console.error(\"Error setting initial level:\", error);\n      res.status(500).json({ message: \"Failed to set initial level\" });\n    }\n  });\n\n  // Save match result\n  app.post(\"/api/match/save\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { opponent, result, language, difficulty, scores, isForfeit, conversation, detailedFeedback, topic, isPracticeMode, botElo, botScore } = req.body;\n      \n      // Get current stats\n      const currentStats = await storage.getUserLanguageStats(userId, language);\n      if (!currentStats) {\n        return res.status(400).json({ message: \"User stats not found\" });\n      }\n\n      // Calculate ELO change with streak multiplier (only for competitive matches)\n      let eloChange = 0;\n      let streakMultiplier = null;\n      \n      if (!isPracticeMode) {\n        const userScore = scores.overall;\n        const opponentElo = botElo || 1000;\n        const opponentScore = botScore || 0;\n        \n        // Import ELO calculator\n        const { calculateComparativeElo } = await import(\"./eloCalculator\");\n        \n        // Calculate ELO with streak multiplier\n        const eloResult = calculateComparativeElo(\n          currentStats.elo,\n          opponentElo,\n          userScore,\n          opponentScore,\n          currentStats.dailyLoginStreak,\n          currentStats.winStreak\n        );\n        \n        eloChange = eloResult.eloChange;\n        streakMultiplier = eloResult.streakMultiplier;\n      }\n      \n      // Get level-up info (only for competitive matches)\n      let levelUpInfo = null;\n      if (!isPracticeMode && eloChange !== 0) {\n        const oldElo = currentStats.elo;\n        const newElo = oldElo + eloChange;\n        \n        // Check if user leveled up\n        const { checkLevelUp, getFluencyLevel } = await import(\"@shared/fluencyLevels\");\n        const levelCheck = checkLevelUp(oldElo, newElo);\n        \n        if (levelCheck.leveledUp) {\n          // Update highest fluency level achieved\n          const newLevel = getFluencyLevel(newElo);\n          await storage.updateHighestFluencyLevel(userId, language, newLevel.level);\n          \n          levelUpInfo = {\n            leveledUp: true,\n            oldLevel: levelCheck.oldLevel,\n            newLevel: levelCheck.newLevel,\n          };\n        }\n      }\n      \n      const match = await storage.createMatch({\n        userId,\n        opponent,\n        result,\n        eloChange,\n        language,\n        difficulty,\n        grammarScore: scores.grammar,\n        fluencyScore: scores.fluency,\n        vocabularyScore: scores.vocabulary,\n        naturalnessScore: scores.naturalness,\n        overallScore: scores.overall,\n        isForfeit: isForfeit ? 1 : 0, // Convert boolean to integer for SQLite-style storage\n        isPracticeMode: isPracticeMode ? 1 : 0, // 0 = competitive, 1 = practice\n        conversation: conversation || null, // Full chat log\n        detailedFeedback: detailedFeedback || null, // Detailed AI feedback with corrections\n        topic: topic || null, // Match topic\n      });\n\n      // Update win streak (only for competitive matches, not practice)\n      if (!isPracticeMode) {\n        await storage.updateWinStreak(userId, language, result === 'win', isForfeit || false);\n      }\n\n      res.json({ ...match, levelUpInfo, eloChange, streakMultiplier });\n    } catch (error) {\n      console.error(\"Error saving match:\", error);\n      res.status(500).json({ message: \"Failed to save match\" });\n    }\n  });\n\n  // Get user matches\n  app.get(\"/api/user/matches\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const language = req.query.language as string | undefined;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      \n      const matches = await storage.getUserMatches(userId, language, limit);\n      res.json(matches);\n    } catch (error) {\n      console.error(\"Error fetching matches:\", error);\n      res.status(500).json({ message: \"Failed to fetch matches\" });\n    }\n  });\n\n  // Get user skill progress\n  app.get(\"/api/user/skill-progress\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const language = req.query.language as string | undefined;\n      \n      const progress = await storage.getUserSkillProgress(userId, language);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching skill progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch skill progress\" });\n    }\n  });\n\n  // Get study recommendations based on aggregated match feedback\n  app.get(\"/api/user/study-recommendations\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const language = req.query.language as string | undefined;\n      \n      // Fetch recent matches (last 20 matches)\n      const matches = await storage.getUserMatches(userId, language, 20);\n      \n      // Filter matches that have any feedback AND are competitive (exclude practice mode and forfeited matches)\n      const matchesWithFeedback = matches.filter(m => m.detailedFeedback && m.isPracticeMode === 0 && m.isForfeit === 0);\n      \n      if (matchesWithFeedback.length === 0) {\n        return res.json({\n          grammarIssues: [],\n          vocabularyTips: [],\n          generalAdvice: [],\n          totalMatches: 0\n        });\n      }\n      \n      // Aggregate feedback\n      const grammarPatterns = new Map<string, number>();\n      const vocabularyPatterns = new Map<string, number>();\n      const improvementPatterns = new Map<string, number>();\n      \n      matchesWithFeedback.forEach(match => {\n        const feedback = match.detailedFeedback as any;\n        \n        // Handle new format: { messageAnalysis: [...], generalFeedback: [...] }\n        if (feedback.messageAnalysis && Array.isArray(feedback.messageAnalysis)) {\n          // Premium users: detailed message-by-message analysis\n          feedback.messageAnalysis.forEach((analysis: any) => {\n            // Aggregate grammar corrections\n            if (analysis.grammarCorrections) {\n              analysis.grammarCorrections.forEach((correction: any) => {\n                const key = correction.explanation || correction.corrected;\n                grammarPatterns.set(key, (grammarPatterns.get(key) || 0) + 1);\n              });\n            }\n            \n            // Aggregate vocabulary suggestions\n            if (analysis.vocabularySuggestions) {\n              analysis.vocabularySuggestions.forEach((suggestion: any) => {\n                const key = `${suggestion.word} → ${suggestion.betterAlternative}: ${suggestion.reason}`;\n                vocabularyPatterns.set(key, (vocabularyPatterns.get(key) || 0) + 1);\n              });\n            }\n            \n            // Aggregate improvement suggestions\n            if (analysis.improvements) {\n              analysis.improvements.forEach((improvement: string) => {\n                improvementPatterns.set(improvement, (improvementPatterns.get(improvement) || 0) + 1);\n              });\n            }\n          });\n        }\n        \n        // Handle general feedback (free users)\n        if (feedback.generalFeedback && Array.isArray(feedback.generalFeedback)) {\n          feedback.generalFeedback.forEach((tip: string) => {\n            improvementPatterns.set(tip, (improvementPatterns.get(tip) || 0) + 1);\n          });\n        }\n        \n        // Handle legacy format (old matches with array directly)\n        if (Array.isArray(feedback) && !(feedback as any).messageAnalysis) {\n          (feedback as any[]).forEach((analysis: any) => {\n            if (analysis.grammarCorrections) {\n              analysis.grammarCorrections.forEach((correction: any) => {\n                const key = correction.explanation || correction.corrected;\n                grammarPatterns.set(key, (grammarPatterns.get(key) || 0) + 1);\n              });\n            }\n            if (analysis.vocabularySuggestions) {\n              analysis.vocabularySuggestions.forEach((suggestion: any) => {\n                const key = `${suggestion.word} → ${suggestion.betterAlternative}: ${suggestion.reason}`;\n                vocabularyPatterns.set(key, (vocabularyPatterns.get(key) || 0) + 1);\n              });\n            }\n            if (analysis.improvements) {\n              analysis.improvements.forEach((improvement: string) => {\n                improvementPatterns.set(improvement, (improvementPatterns.get(improvement) || 0) + 1);\n              });\n            }\n          });\n        }\n      });\n      \n      // Sort and get top recommendations\n      const topGrammar = Array.from(grammarPatterns.entries())\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5)\n        .map(([issue, count]) => ({ issue, count }));\n      \n      const topVocabulary = Array.from(vocabularyPatterns.entries())\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5)\n        .map(([tip, count]) => ({ tip, count }));\n      \n      const topImprovements = Array.from(improvementPatterns.entries())\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5)\n        .map(([advice, count]) => ({ advice, count }));\n      \n      res.json({\n        grammarIssues: topGrammar,\n        vocabularyTips: topVocabulary,\n        generalAdvice: topImprovements,\n        totalMatches: matchesWithFeedback.length\n      });\n    } catch (error) {\n      console.error(\"Error fetching study recommendations:\", error);\n      res.status(500).json({ message: \"Failed to fetch study recommendations\" });\n    }\n  });\n\n  // Get leaderboard for a specific language and month\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    try {\n      const language = (req.query.language as string) || \"Chinese\";\n      const month = req.query.month as string; // Format: \"YYYY-MM\"\n      \n      const allUsers = await storage.getAllUsers();\n      const userMap = new Map(allUsers.map(user => [user.id, user]));\n      \n      // If month is specified, calculate leaderboard based on that month's matches\n      if (month) {\n        const [year, monthNum] = month.split('-');\n        const startDate = new Date(parseInt(year), parseInt(monthNum) - 1, 1);\n        const endDate = new Date(parseInt(year), parseInt(monthNum), 0, 23, 59, 59);\n        \n        // Get all users' matches for this language\n        const userMonthlyStats = new Map<string, { wins: number; losses: number; elo: number }>();\n        \n        for (const user of allUsers) {\n          // Use higher limit for monthly leaderboards to avoid truncation\n          const matches = await storage.getUserMatches(user.id, language, 500);\n          \n          // Filter matches by month and exclude practice matches\n          const monthMatches = matches.filter(match => {\n            if (!match.createdAt) return false;\n            if (match.isPracticeMode === 1) return false; // Exclude practice matches\n            const matchDate = new Date(match.createdAt);\n            return matchDate >= startDate && matchDate <= endDate;\n          });\n          \n          if (monthMatches.length > 0) {\n            const wins = monthMatches.filter(m => m.result === \"win\").length;\n            const losses = monthMatches.filter(m => m.result === \"loss\").length;\n            // Use current ELO as approximation (we don't track historical ELO)\n            const stats = await storage.getUserLanguageStats(user.id, language);\n            const elo = stats?.elo || 1000;\n            \n            userMonthlyStats.set(user.id, { wins, losses, elo });\n          }\n        }\n        \n        // Sort by Elo and create leaderboard\n        const leaderboard = Array.from(userMonthlyStats.entries())\n          .sort((a, b) => b[1].elo - a[1].elo)\n          .map(([userId, stats]) => {\n            const user = userMap.get(userId);\n            return {\n              username: user?.firstName || user?.email?.split('@')[0] || \"Unknown\",\n              elo: stats.elo,\n              wins: stats.wins,\n              losses: stats.losses,\n            };\n          });\n        \n        res.json(leaderboard);\n      } else {\n        // No month specified, use current aggregated stats\n        const allStats = await storage.getAllLanguageStats(language);\n        \n        const leaderboard = allStats\n          .filter(stats => stats.wins + stats.losses > 0)\n          .sort((a, b) => b.elo - a.elo)\n          .map(stats => {\n            const user = userMap.get(stats.userId);\n            return {\n              username: user?.firstName || user?.email?.split('@')[0] || \"Unknown\",\n              elo: stats.elo,\n              wins: stats.wins,\n              losses: stats.losses,\n            };\n          });\n        \n        res.json(leaderboard);\n      }\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Get monthly wins leaderboard for a specific language\n  app.get(\"/api/leaderboard/monthly-wins\", async (req, res) => {\n    try {\n      const language = (req.query.language as string) || \"Chinese\";\n      \n      const allUsers = await storage.getAllUsers();\n      const userMap = new Map(allUsers.map(user => [user.id, user]));\n      const allStats = await storage.getAllLanguageStats(language);\n      \n      // Get current month to check for reset\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n      \n      const leaderboard = allStats\n        .map(stats => {\n          // Reset monthly wins if it's a new month (defensive check)\n          const monthlyWins = stats.monthlyResetDate === currentMonth ? (stats.monthlyWins ?? 0) : 0;\n          return {\n            ...stats,\n            monthlyWins,\n          };\n        })\n        .filter(stats => stats.monthlyWins > 0) // Only show users with wins this month\n        .sort((a, b) => b.monthlyWins - a.monthlyWins) // Sort by monthly wins\n        .map(stats => {\n          const user = userMap.get(stats.userId);\n          return {\n            username: user?.firstName || user?.email?.split('@')[0] || \"Unknown\",\n            monthlyWins: stats.monthlyWins,\n            elo: stats.elo,\n            wins: stats.wins,\n            losses: stats.losses,\n          };\n        });\n      \n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching monthly wins leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch monthly wins leaderboard\" });\n    }\n  });\n\n  // Send friend request\n  app.post(\"/api/friends/request\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { friendUsername } = req.body;\n      \n      if (!friendUsername) {\n        return res.status(400).json({ message: \"Friend username is required\" });\n      }\n      \n      const friendship = await storage.sendFriendRequest(userId, friendUsername);\n      res.json(friendship);\n    } catch (error: any) {\n      console.error(\"Error sending friend request:\", error);\n      res.status(400).json({ message: error.message || \"Failed to send friend request\" });\n    }\n  });\n\n  // Accept friend request\n  app.post(\"/api/friends/accept/:friendshipId\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { friendshipId } = req.params;\n      \n      // Verify user is the recipient of this friend request\n      const existingFriendship = await storage.getFriendshipById(friendshipId);\n      if (!existingFriendship) {\n        return res.status(404).json({ message: \"Friend request not found\" });\n      }\n      \n      if (existingFriendship.friendId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized to accept this request\" });\n      }\n      \n      const friendship = await storage.acceptFriendRequest(friendshipId);\n      res.json(friendship);\n    } catch (error: any) {\n      console.error(\"Error accepting friend request:\", error);\n      res.status(400).json({ message: error.message || \"Failed to accept friend request\" });\n    }\n  });\n\n  // Reject friend request\n  app.post(\"/api/friends/reject/:friendshipId\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { friendshipId } = req.params;\n      \n      // Verify user is the recipient of this friend request\n      const existingFriendship = await storage.getFriendshipById(friendshipId);\n      if (!existingFriendship) {\n        return res.status(404).json({ message: \"Friend request not found\" });\n      }\n      \n      if (existingFriendship.friendId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized to reject this request\" });\n      }\n      \n      await storage.rejectFriendRequest(friendshipId);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error rejecting friend request:\", error);\n      res.status(400).json({ message: error.message || \"Failed to reject friend request\" });\n    }\n  });\n\n  // Remove friend\n  app.delete(\"/api/friends/:friendshipId\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { friendshipId } = req.params;\n      \n      // Verify user is a participant in this friendship\n      const existingFriendship = await storage.getFriendshipById(friendshipId);\n      if (!existingFriendship) {\n        return res.status(404).json({ message: \"Friendship not found\" });\n      }\n      \n      if (existingFriendship.userId !== userId && existingFriendship.friendId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized to remove this friendship\" });\n      }\n      \n      await storage.removeFriend(friendshipId);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error removing friend:\", error);\n      res.status(400).json({ message: error.message || \"Failed to remove friend\" });\n    }\n  });\n\n  // Get friends list\n  app.get(\"/api/friends\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const friends = await storage.getFriends(userId);\n      res.json(friends);\n    } catch (error) {\n      console.error(\"Error fetching friends:\", error);\n      res.status(500).json({ message: \"Failed to fetch friends\" });\n    }\n  });\n\n  // Get pending friend requests\n  app.get(\"/api/friends/requests\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const requests = await storage.getPendingFriendRequests(userId);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching friend requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch friend requests\" });\n    }\n  });\n\n  // Create friend challenge (direct, no code)\n  app.post(\"/api/friends/challenge\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { friendId, language, difficulty, topic } = req.body;\n      \n      if (!friendId) {\n        return res.status(400).json({ message: \"Friend ID is required\" });\n      }\n      \n      // Verify friendship\n      const friends = await storage.getFriends(userId);\n      const isFriend = friends.some(f => \n        (f.userId === friendId || f.friendId === friendId) && \n        f.status === \"accepted\"\n      );\n      \n      if (!isFriend) {\n        return res.status(403).json({ message: \"You can only challenge friends\" });\n      }\n      \n      // Challenge expires in 24 hours\n      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);\n      \n      const invite = await storage.createPrivateMatchInvite({\n        recipientId: friendId,\n        creatorId: userId,\n        language: language || \"Chinese\",\n        difficulty: difficulty || \"Medium\",\n        topic: topic || null,\n        status: \"pending\",\n        expiresAt,\n      });\n      \n      res.json(invite);\n    } catch (error) {\n      console.error(\"Error creating friend challenge:\", error);\n      res.status(500).json({ message: \"Failed to create challenge\" });\n    }\n  });\n\n  // Get pending match challenges\n  app.get(\"/api/friends/challenges\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const challenges = await storage.getPendingMatchChallenges(userId);\n      res.json(challenges);\n    } catch (error) {\n      console.error(\"Error fetching challenges:\", error);\n      res.status(500).json({ message: \"Failed to fetch challenges\" });\n    }\n  });\n\n  // Accept friend challenge\n  app.post(\"/api/friends/challenges/:challengeId/accept\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { challengeId } = req.params;\n      const challenge = await storage.getPrivateMatchInvite(challengeId);\n      \n      if (!challenge) {\n        return res.status(404).json({ message: \"Challenge not found\" });\n      }\n      \n      if (challenge.recipientId !== userId) {\n        return res.status(403).json({ message: \"This challenge is not for you\" });\n      }\n      \n      if (challenge.status !== \"pending\") {\n        return res.status(400).json({ message: \"Challenge already responded to\" });\n      }\n      \n      // Check if expired\n      if (new Date() > new Date(challenge.expiresAt)) {\n        return res.status(410).json({ message: \"Challenge expired\" });\n      }\n      \n      await storage.updatePrivateMatchInviteStatus(challengeId, \"accepted\");\n      \n      res.json({\n        success: true,\n        challenge: { ...challenge, status: \"accepted\" }\n      });\n    } catch (error) {\n      console.error(\"Error accepting challenge:\", error);\n      res.status(500).json({ message: \"Failed to accept challenge\" });\n    }\n  });\n\n  // Reject/ignore friend challenge\n  app.post(\"/api/friends/challenges/:challengeId/reject\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { challengeId } = req.params;\n      const challenge = await storage.getPrivateMatchInvite(challengeId);\n      \n      if (!challenge) {\n        return res.status(404).json({ message: \"Challenge not found\" });\n      }\n      \n      if (challenge.recipientId !== userId) {\n        return res.status(403).json({ message: \"This challenge is not for you\" });\n      }\n      \n      await storage.updatePrivateMatchInviteStatus(challengeId, \"rejected\");\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error rejecting challenge:\", error);\n      res.status(500).json({ message: \"Failed to reject challenge\" });\n    }\n  });\n\n  // Create private match invite (legacy code-based system)\n  app.post(\"/api/private-match/create\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { language, difficulty, topic } = req.body;\n      \n      // Generate a random 6-digit number invite code\n      const inviteCode = Math.floor(100000 + Math.random() * 900000).toString();\n      \n      // Invite expires in 24 hours\n      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);\n      \n      const invite = await storage.createPrivateMatchInvite({\n        inviteCode,\n        creatorId: userId,\n        language,\n        difficulty,\n        topic: topic || null,\n        status: \"pending\",\n        expiresAt,\n      });\n      \n      res.json(invite);\n    } catch (error) {\n      console.error(\"Error creating private match invite:\", error);\n      res.status(500).json({ message: \"Failed to create invite\" });\n    }\n  });\n\n  // Get private match invite by code\n  app.get(\"/api/private-match/:inviteCode\", async (req, res) => {\n    try {\n      const { inviteCode } = req.params;\n      const invite = await storage.getPrivateMatchInvite(inviteCode);\n      \n      if (!invite) {\n        return res.status(404).json({ message: \"Invite not found\" });\n      }\n      \n      // Check if expired\n      if (new Date() > new Date(invite.expiresAt)) {\n        return res.status(410).json({ message: \"Invite expired\" });\n      }\n      \n      if (invite.status !== \"pending\") {\n        return res.status(400).json({ message: \"Invite already used\" });\n      }\n      \n      res.json(invite);\n    } catch (error) {\n      console.error(\"Error fetching invite:\", error);\n      res.status(500).json({ message: \"Failed to fetch invite\" });\n    }\n  });\n\n  // Join private match by invite code\n  app.post(\"/api/private-match/join\", async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { inviteCode } = req.body;\n      \n      if (!inviteCode) {\n        return res.status(400).json({ message: \"Invite code is required\" });\n      }\n      \n      const invite = await storage.getPrivateMatchInvite(inviteCode);\n      \n      if (!invite) {\n        return res.status(404).json({ message: \"Invite not found\" });\n      }\n      \n      // Check if user is trying to join their own invite\n      if (invite.creatorId === userId) {\n        return res.status(400).json({ message: \"Cannot join your own invite\" });\n      }\n      \n      // Verify that joiner is friends with creator\n      const friends = await storage.getFriends(userId);\n      const isFriend = friends.some(f => \n        (f.userId === invite.creatorId || f.friendId === invite.creatorId) && \n        f.status === \"accepted\"\n      );\n      \n      if (!isFriend) {\n        return res.status(403).json({ message: \"You must be friends with the creator to join this match\" });\n      }\n      \n      // Check if expired\n      if (new Date() > new Date(invite.expiresAt)) {\n        return res.status(410).json({ message: \"Invite expired\" });\n      }\n      \n      if (invite.status !== \"pending\") {\n        return res.status(400).json({ message: \"Invite already used\" });\n      }\n      \n      // Mark invite as used\n      await storage.updatePrivateMatchInviteStatus(inviteCode, \"used\");\n      \n      // Return match setup data\n      res.json({\n        success: true,\n        matchData: {\n          opponentId: invite.creatorId,\n          language: invite.language,\n          difficulty: invite.difficulty,\n          topic: invite.topic,\n          isPracticeMode: false, // Private matches are always competitive\n        }\n      });\n    } catch (error) {\n      console.error(\"Error joining private match:\", error);\n      res.status(500).json({ message: \"Failed to join private match\" });\n    }\n  });\n\n  // Stripe subscription endpoint (from blueprint:javascript_stripe)\n  app.post('/api/create-subscription', async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: 'Unauthorized' });\n      }\n\n      let user = await storage.getUser(userId);\n\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // If user already has a subscription, return existing client secret\n      if (user.stripeSubscriptionId) {\n        const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId, {\n          expand: ['latest_invoice.payment_intent'],\n        });\n        const latestInvoice: any = subscription.latest_invoice;\n        \n        return res.json({\n          subscriptionId: subscription.id,\n          clientSecret: latestInvoice?.payment_intent?.client_secret,\n        });\n      }\n\n      if (!user.email) {\n        return res.status(400).json({ message: 'User email required' });\n      }\n\n      // Create Stripe customer\n      const customer = await stripe.customers.create({\n        email: user.email,\n        name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,\n        metadata: {\n          userId: userId,\n        },\n      });\n\n      // Create a price for the subscription\n      const price = await stripe.prices.create({\n        currency: 'usd',\n        unit_amount: 999, // $9.99 in cents\n        recurring: {\n          interval: 'month',\n        },\n        product_data: {\n          name: 'Verbio Premium',\n        },\n      });\n\n      // Create subscription\n      const subscription = await stripe.subscriptions.create({\n        customer: customer.id,\n        items: [{ price: price.id }],\n        payment_behavior: 'default_incomplete',\n        payment_settings: { save_default_payment_method: 'on_subscription' },\n        expand: ['latest_invoice.payment_intent'],\n      });\n\n      // Update user with Stripe IDs\n      await storage.updateUserStripeInfo(userId, customer.id, subscription.id);\n\n      const invoice = subscription.latest_invoice as any;\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret: invoice.payment_intent.client_secret,\n      });\n    } catch (error: any) {\n      console.error('Stripe subscription error:', error);\n      res.status(500).json({ message: error.message || 'Failed to create subscription' });\n    }\n  });\n\n  // Admin endpoint to manually grant premium status\n  // WARNING: This endpoint is for DEVELOPMENT ONLY and should be secured or removed in production\n  // TODO: Add proper admin authentication before deploying to production\n  app.post('/api/admin/grant-premium', async (req, res) => {\n    try {\n      // Basic security check - only allow in development\n      if (process.env.NODE_ENV === 'production') {\n        return res.status(403).json({ message: 'Admin endpoints disabled in production' });\n      }\n      \n      const { email, isPremium } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: 'Email required' });\n      }\n\n      const allUsers = await storage.getAllUsers();\n      const user = allUsers.find(u => u.email === email);\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      await db.update(users).set({\n        isPremium: isPremium ? 1 : 0,\n        updatedAt: new Date(),\n      }).where(eq(users.id, user.id));\n\n      res.json({ \n        message: `Premium status ${isPremium ? 'granted' : 'revoked'} for ${email}`,\n        user: { email: user.email, isPremium: isPremium ? 1 : 0 }\n      });\n    } catch (error: any) {\n      console.error('Admin grant premium error:', error);\n      res.status(500).json({ message: error.message || 'Failed to update premium status' });\n    }\n  });\n\n  // Cancel subscription endpoint\n  app.post('/api/cancel-subscription', async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: 'Not authenticated' });\n      }\n\n      const dbUser = await storage.getUser(userId);\n      \n      if (!dbUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      if (!dbUser.stripeSubscriptionId) {\n        return res.status(400).json({ message: 'No active subscription found' });\n      }\n\n      // Cancel the subscription at period end (user keeps access until end of billing period)\n      const subscription = await stripe.subscriptions.update(dbUser.stripeSubscriptionId, {\n        cancel_at_period_end: true,\n      });\n\n      res.json({ \n        message: 'Subscription will be cancelled at the end of the billing period',\n        cancelAt: subscription.cancel_at ? new Date(subscription.cancel_at * 1000) : null\n      });\n    } catch (error: any) {\n      console.error('Cancel subscription error:', error);\n      res.status(500).json({ message: error.message || 'Failed to cancel subscription' });\n    }\n  });\n\n  // Premium whitelist management endpoints (admin only - development mode)\n  app.post('/api/admin/whitelist/add', async (req, res) => {\n    try {\n      // Only allow in development mode\n      if (process.env.NODE_ENV === 'production') {\n        return res.status(403).json({ message: 'This endpoint is disabled in production' });\n      }\n      \n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: 'Email required' });\n      }\n\n      const entry = await storage.addToWhitelist(email, 'admin');\n      res.json({ \n        message: `Email ${email} added to premium whitelist`,\n        entry \n      });\n    } catch (error: any) {\n      console.error('Add to whitelist error:', error);\n      res.status(500).json({ message: error.message || 'Failed to add to whitelist' });\n    }\n  });\n\n  app.post('/api/admin/whitelist/remove', async (req, res) => {\n    try {\n      // Only allow in development mode\n      if (process.env.NODE_ENV === 'production') {\n        return res.status(403).json({ message: 'This endpoint is disabled in production' });\n      }\n      \n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: 'Email required' });\n      }\n\n      await storage.removeFromWhitelist(email);\n      res.json({ \n        message: `Email ${email} removed from premium whitelist`\n      });\n    } catch (error: any) {\n      console.error('Remove from whitelist error:', error);\n      res.status(500).json({ message: error.message || 'Failed to remove from whitelist' });\n    }\n  });\n\n  app.get('/api/admin/whitelist', async (req, res) => {\n    try {\n      // Only allow in development mode\n      if (process.env.NODE_ENV === 'production') {\n        return res.status(403).json({ message: 'This endpoint is disabled in production' });\n      }\n\n      const whitelist = await storage.getAllWhitelistedEmails();\n      res.json({ whitelist });\n    } catch (error: any) {\n      console.error('Get whitelist error:', error);\n      res.status(500).json({ message: error.message || 'Failed to get whitelist' });\n    }\n  });\n\n  // Stripe webhook endpoint (from blueprint:javascript_stripe)\n  app.post('/api/stripe-webhook', async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    \n    if (!sig) {\n      return res.status(400).send('Missing stripe-signature header');\n    }\n\n    try {\n      // req.body is raw Buffer from express.raw() middleware in server/index.ts\n      const event = stripe.webhooks.constructEvent(\n        req.body,\n        sig,\n        process.env.STRIPE_WEBHOOK_SECRET || ''\n      );\n\n      // Handle subscription events\n      if (event.type === 'customer.subscription.updated' || event.type === 'customer.subscription.created') {\n        const subscription = event.data.object as any;\n        \n        // Find user by Stripe customer ID\n        const allUsers = await storage.getAllUsers();\n        const user = allUsers.find(u => u.stripeCustomerId === subscription.customer);\n        \n        if (user) {\n          // Update premium status based on subscription status\n          const isPremium = subscription.status === 'active' ? 1 : 0;\n          const subscriptionEndDate = subscription.current_period_end \n            ? new Date(subscription.current_period_end * 1000) \n            : null;\n          \n          await db.update(users).set({\n            isPremium,\n            subscriptionEndDate,\n            updatedAt: new Date(),\n          }).where(eq(users.id, user.id));\n        }\n      }\n\n      if (event.type === 'customer.subscription.deleted') {\n        const subscription = event.data.object as any;\n        \n        const allUsers = await storage.getAllUsers();\n        const user = allUsers.find(u => u.stripeCustomerId === subscription.customer);\n        \n        if (user) {\n          await db.update(users).set({\n            isPremium: 0,\n            subscriptionEndDate: null,\n            updatedAt: new Date(),\n          }).where(eq(users.id, user.id));\n        }\n      }\n\n      res.json({ received: true });\n    } catch (error: any) {\n      console.error('Webhook error:', error);\n      res.status(400).send(`Webhook Error: ${error.message}`);\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Setup WebSocket matchmaking\n  setupMatchmaking(httpServer);\n\n  return httpServer;\n}\n","size_bytes":53514},"client/src/App.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient, apiRequest } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport Header from \"@/components/Header\";\nimport Landing from \"@/pages/Landing\";\nimport SignIn from \"@/pages/SignIn\";\nimport Subscribe from \"@/pages/Subscribe\";\nimport AdminWhitelist from \"@/pages/AdminWhitelist\";\nimport MatchFinder, { type Language, type Difficulty } from \"@/components/MatchFinder\";\nimport DuelInterface from \"@/components/DuelInterface\";\nimport MatchResults from \"@/components/MatchResults\";\nimport Leaderboard from \"@/components/Leaderboard\";\nimport ProfileStats from \"@/components/ProfileStats\";\nimport AIReview from \"@/components/AIReview\";\nimport Friends from \"@/components/Friends\";\nimport Analytics from \"@/components/Analytics\";\nimport { StreakNotification } from \"@/components/StreakNotification\";\nimport LevelUpDialog from \"@/components/LevelUpDialog\";\nimport InitialLevelDialog from \"@/components/InitialLevelDialog\";\nimport InitialLanguageDialog from \"@/components/InitialLanguageDialog\";\nimport HowToPlayDialog from \"@/components/HowToPlayDialog\";\nimport InstallPrompt from \"@/components/InstallPrompt\";\nimport type { GradingResult, UserLanguageStats } from \"@shared/schema\";\nimport { THEMES, getThemeVocabulary, getThemeTitle } from \"@shared/themes\";\nimport { incrementGuestMatches } from \"@/utils/guestRateLimit\";\nimport { FLUENCY_LEVELS, type FluencyLevel } from \"@shared/fluencyLevels\";\n\ntype Page = \"duel\" | \"leaderboard\" | \"profile\" | \"match\" | \"results\" | \"ai-review\" | \"friends\" | \"analytics\";\n\ninterface VocabWord {\n  word: string;\n  romanization: string;\n  definition?: string;\n}\n\nfunction MainApp() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { playStreak, playDailyStreak } = useSound();\n  const [currentPage, setCurrentPage] = useState<Page>(\"duel\");\n  const [isGuestMode, setIsGuestMode] = useState(false);\n  const [matchData, setMatchData] = useState<{\n    opponent: string;\n    opponentElo: number;\n    isBot: boolean;\n    isPracticeMode: boolean;\n    topic: string;\n    vocabulary: VocabWord[];\n    language: Language;\n    difficulty: Difficulty;\n    startsFirst?: boolean;\n    matchId?: string;\n    playerId?: string;\n    botId?: string;\n  } | null>(null);\n  const [gradingResult, setGradingResult] = useState<GradingResult | null>(null);\n  const [matchMessages, setMatchMessages] = useState<any[]>([]);\n  const multiplayerWsRef = useRef<WebSocket | null>(null);\n  const [waitingForOpponentResult, setWaitingForOpponentResult] = useState(false);\n  const [isSavingMatch, setIsSavingMatch] = useState(false);\n  \n  // Level-up state\n  const [levelUpInfo, setLevelUpInfo] = useState<{\n    oldLevel: import(\"@shared/fluencyLevels\").FluencyLevelInfo;\n    newLevel: import(\"@shared/fluencyLevels\").FluencyLevelInfo;\n    language: string;\n  } | null>(null);\n  \n  // Streak multiplier info\n  const [streakMultiplierInfo, setStreakMultiplierInfo] = useState<{\n    multiplier: number;\n    dayStreakBonus: number;\n    winStreakBonus: number;\n  } | null>(null);\n  \n  // Initial language and level selection state\n  const [showInitialLanguageDialog, setShowInitialLanguageDialog] = useState(false);\n  const [showInitialLevelDialog, setShowInitialLevelDialog] = useState(false);\n  const [showHowToPlayDialog, setShowHowToPlayDialog] = useState(false);\n  \n  // Streak notification state\n  const [streakNotification, setStreakNotification] = useState<{\n    type: \"win\" | \"daily\";\n    count: number;\n    visible: boolean;\n  } | null>(null);\n  const previousStreaksRef = useRef<{ winStreak: number; dailyLoginStreak: number } | null>(null);\n  const streakTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const hasInitializedStreaksRef = useRef(false);\n\n  // Track current language (persisted to localStorage)\n  const [currentLanguage, setCurrentLanguage] = useState<Language>(() => {\n    const saved = localStorage.getItem('currentLanguage');\n    return (saved as Language) || \"Chinese\";\n  });\n\n  // Update localStorage when language changes\n  useEffect(() => {\n    localStorage.setItem('currentLanguage', currentLanguage);\n  }, [currentLanguage]);\n\n  // Fetch language-specific stats for authenticated users\n  const { data: languageStats, refetch: refetchStats } = useQuery<UserLanguageStats>({\n    queryKey: [`/api/user/stats/${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  // Check if user needs to select initial language (first-time users)\n  useEffect(() => {\n    if (isAuthenticated) {\n      // For authenticated users, check database field\n      if (user && user.hasSelectedInitialLanguage === 0) {\n        setShowInitialLanguageDialog(true);\n      }\n    } else if (isGuestMode) {\n      // For guests, check localStorage\n      const hasSelectedLanguage = localStorage.getItem('has_selected_initial_language') === 'true';\n      if (!hasSelectedLanguage) {\n        setShowInitialLanguageDialog(true);\n      }\n    }\n  }, [isAuthenticated, isGuestMode, user]);\n\n  // Check if user needs to select initial level (only after language is selected)\n  useEffect(() => {\n    // Don't check for level if language dialog is showing\n    if (showInitialLanguageDialog) return;\n    \n    if (isAuthenticated && languageStats) {\n      // For authenticated users, check if they've selected initial level\n      if (languageStats.initialLevelSelected === 0) {\n        setShowInitialLevelDialog(true);\n      }\n    } else if (isGuestMode) {\n      // For guests, check localStorage\n      const hasSelected = localStorage.getItem(`initial_level_selected_${currentLanguage}`) === 'true';\n      if (!hasSelected) {\n        setShowInitialLevelDialog(true);\n      }\n    }\n  }, [isAuthenticated, isGuestMode, languageStats, currentLanguage, showInitialLanguageDialog]);\n\n  // Reset streak refs when language or user changes to prevent false notifications\n  useEffect(() => {\n    previousStreaksRef.current = null;\n    hasInitializedStreaksRef.current = false;\n  }, [currentLanguage, user?.id]);\n\n  // Detect streak increases and show notifications\n  useEffect(() => {\n    if (!languageStats || !isAuthenticated) return;\n\n    const currentWinStreak = languageStats.winStreak ?? 0;\n    const currentDailyStreak = languageStats.dailyLoginStreak ?? 0;\n\n    // Initialize previous values on first load\n    if (previousStreaksRef.current === null) {\n      previousStreaksRef.current = {\n        winStreak: currentWinStreak,\n        dailyLoginStreak: currentDailyStreak\n      };\n      hasInitializedStreaksRef.current = true;\n      return;\n    }\n\n    // Don't show notifications on the very first initialization (login/page load)\n    // Only show when streaks actually change after initialization\n    if (!hasInitializedStreaksRef.current) {\n      hasInitializedStreaksRef.current = true;\n      previousStreaksRef.current = {\n        winStreak: currentWinStreak,\n        dailyLoginStreak: currentDailyStreak\n      };\n      return;\n    }\n\n    const previousWinStreak = previousStreaksRef.current.winStreak;\n    const previousDailyStreak = previousStreaksRef.current.dailyLoginStreak;\n\n    // Clear any existing timeout\n    if (streakTimeoutRef.current) {\n      clearTimeout(streakTimeoutRef.current);\n      streakTimeoutRef.current = null;\n    }\n\n    // Check if win streak increased\n    if (currentWinStreak > previousWinStreak && currentWinStreak > 1) {\n      setStreakNotification({\n        type: \"win\",\n        count: currentWinStreak,\n        visible: true\n      });\n      // Auto-hide after 4 seconds\n      streakTimeoutRef.current = setTimeout(() => {\n        setStreakNotification(null);\n        streakTimeoutRef.current = null;\n      }, 4000);\n    }\n    // Check if daily streak increased (only if win streak didn't trigger)\n    else if (currentDailyStreak > previousDailyStreak && currentDailyStreak > 1) {\n      setStreakNotification({\n        type: \"daily\",\n        count: currentDailyStreak,\n        visible: true\n      });\n      // Auto-hide after 4 seconds\n      streakTimeoutRef.current = setTimeout(() => {\n        setStreakNotification(null);\n        streakTimeoutRef.current = null;\n      }, 4000);\n    }\n\n    // Update previous values\n    previousStreaksRef.current = {\n      winStreak: currentWinStreak,\n      dailyLoginStreak: currentDailyStreak\n    };\n  }, [languageStats, isAuthenticated, playStreak]);\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (streakTimeoutRef.current) {\n        clearTimeout(streakTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Get stats from languageStats for authenticated, or localStorage for guest\n  const getGuestStats = (language: Language) => {\n    const saved = localStorage.getItem(`guest_${language}`);\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return { elo: 1000, wins: 0, losses: 0 };\n  };\n\n  const [guestStats, setGuestStats] = useState(() => getGuestStats(currentLanguage));\n\n  useEffect(() => {\n    setGuestStats(getGuestStats(currentLanguage));\n  }, [currentLanguage]);\n\n  const userElo = isAuthenticated ? (languageStats?.elo ?? 1000) : guestStats.elo;\n  const userWins = isAuthenticated ? (languageStats?.wins ?? 0) : guestStats.wins;\n  const userLosses = isAuthenticated ? (languageStats?.losses ?? 0) : guestStats.losses;\n  const username = user?.firstName || user?.email?.split('@')[0] || \"Guest\";\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const storedGuestMode = localStorage.getItem('guestMode') === 'true';\n    \n    if (urlParams.get('guest') === 'true') {\n      setIsGuestMode(true);\n      localStorage.setItem('guestMode', 'true');\n      window.history.replaceState({}, '', '/');\n    } else if (storedGuestMode) {\n      setIsGuestMode(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      localStorage.removeItem('guestMode');\n      setIsGuestMode(false);\n    }\n  }, [isAuthenticated]);\n\n\n  // Set up WebSocket for multiplayer matches\n  useEffect(() => {\n    if (matchData && !matchData.isBot && matchData.matchId && matchData.playerId) {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.host}/matchmaking`;\n      const ws = new WebSocket(wsUrl);\n      \n      ws.onopen = () => {\n        console.log('App.tsx: WebSocket connected for multiplayer match');\n        // Register this WebSocket with the server for this match\n        ws.send(JSON.stringify({\n          type: 'register_match_socket',\n          playerId: matchData.playerId,\n          matchId: matchData.matchId\n        }));\n      };\n      \n      ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          \n          if (data.type === 'opponent_grading_result') {\n            console.log('App.tsx: Received opponent grading result', data.gradingResult);\n            // Store it in sessionStorage for retrieval\n            sessionStorage.setItem(`opponent_result_${matchData.matchId}`, JSON.stringify(data.gradingResult));\n            \n            // If we're already waiting for opponent result, update immediately\n            if (waitingForOpponentResult && gradingResult) {\n              setGradingResult(prev => prev ? {\n                ...prev,\n                botGrammar: data.gradingResult.grammar,\n                botFluency: data.gradingResult.fluency,\n                botVocabulary: data.gradingResult.vocabulary,\n                botNaturalness: data.gradingResult.naturalness,\n                botOverall: data.gradingResult.overall,\n              } : prev);\n              setWaitingForOpponentResult(false);\n              \n              // Close the WebSocket\n              if (multiplayerWsRef.current?.readyState === WebSocket.OPEN) {\n                multiplayerWsRef.current.close();\n                multiplayerWsRef.current = null;\n              }\n            }\n          }\n        } catch (error) {\n          console.error('App.tsx: WebSocket message error:', error);\n        }\n      };\n      \n      ws.onerror = (error) => {\n        console.error('App.tsx: WebSocket error:', error);\n      };\n      \n      ws.onclose = () => {\n        console.log('App.tsx: WebSocket closed');\n      };\n      \n      multiplayerWsRef.current = ws;\n      \n      return () => {\n        // Don't close the WebSocket here - we need it to stay alive\n        // It will be closed when opponent result is received or timeout occurs\n      };\n    }\n  }, [matchData?.matchId, matchData?.playerId]);\n\n  // Handle timeout for waiting for opponent result\n  useEffect(() => {\n    if (waitingForOpponentResult) {\n      const timeout = setTimeout(() => {\n        console.log('App.tsx: Timeout waiting for opponent result');\n        setWaitingForOpponentResult(false);\n        // Close WebSocket on timeout\n        if (multiplayerWsRef.current?.readyState === WebSocket.OPEN) {\n          multiplayerWsRef.current.close();\n          multiplayerWsRef.current = null;\n        }\n      }, 30000);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [waitingForOpponentResult]);\n\n  if (isLoading) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"text-muted-foreground\">Loading...</div>\n    </div>;\n  }\n\n  // Show main app if authenticated OR guest mode\n  const shouldShowMainApp = isAuthenticated || isGuestMode;\n  \n  console.log('[App] Auth state:', {\n    isAuthenticated,\n    isGuestMode,\n    shouldShowMainApp\n  });\n  \n  if (!shouldShowMainApp) {\n    return <Landing />;\n  }\n\n  // Helper to get/generate playerId\n  const getSessionId = () => {\n    let sessionId = localStorage.getItem('matchmaking_session_id');\n    if (!sessionId) {\n      sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('matchmaking_session_id', sessionId);\n    }\n    return sessionId;\n  };\n\n  // Use authenticated userId if available, otherwise use session ID for guests\n  const playerId = user?.id || getSessionId();\n\n  const handleMatchFound = async (opponent: string, isBot: boolean, language: Language, difficulty: Difficulty, topicId?: string, opponentElo?: number, isPracticeMode: boolean = false, startsFirst?: boolean, matchId?: string, vocabularyFromServer?: any[], botId?: string) => {\n    // Use selected topic or random if not specified\n    const theme = topicId ? THEMES.find(t => t.id === topicId) || THEMES[Math.floor(Math.random() * THEMES.length)] : THEMES[Math.floor(Math.random() * THEMES.length)];\n    \n    let vocabulary: VocabWord[];\n    \n    // If vocabulary was provided by server (for multiplayer matches), use it directly\n    if (vocabularyFromServer && vocabularyFromServer.length > 0) {\n      vocabulary = vocabularyFromServer;\n      \n      // Increment guest match counter\n      if (isGuestMode) {\n        incrementGuestMatches();\n      }\n      \n      setMatchData({\n        opponent,\n        opponentElo: opponentElo || (isBot ? 1000 : 1200),\n        isBot,\n        isPracticeMode,\n        topic: getThemeTitle(theme.id),\n        vocabulary,\n        language,\n        difficulty,\n        startsFirst,\n        matchId,\n        playerId: playerId,\n        botId,\n      });\n      setCurrentPage(\"match\");\n      return;\n    }\n    \n    // Otherwise generate vocabulary (for bot matches or practice mode)\n    try {\n      // Generate vocabulary using AI\n      const response = await apiRequest(\"POST\", \"/api/generate-vocabulary\", {\n        topic: getThemeTitle(theme.id),\n        language,\n        difficulty\n      });\n      \n      const data = await response.json();\n      \n      // Convert AI vocabulary to VocabWord format\n      vocabulary = data.vocabulary.map((item: any) => ({\n        word: item.word,\n        romanization: item.pinyin || item.word,\n        definition: `${item.english} (${item.type})`\n      }));\n      \n      // Increment guest match counter now that match is confirmed\n      if (isGuestMode) {\n        incrementGuestMatches();\n      }\n      \n      setMatchData({\n        opponent,\n        opponentElo: opponentElo || (isBot ? 1000 : 1200),\n        isBot,\n        isPracticeMode,\n        topic: getThemeTitle(theme.id),\n        vocabulary,\n        language,\n        difficulty,\n        startsFirst,\n        matchId,\n        playerId: playerId,\n        botId,\n      });\n      setCurrentPage(\"match\");\n    } catch (error) {\n      console.error(\"Failed to generate vocabulary:\", error);\n      // Fallback to static vocabulary if API fails\n      const vocabStrings = getThemeVocabulary(theme.id, difficulty, language);\n      // For Beginner, use Easy vocabulary from theme\n      const effectiveDifficulty = difficulty === \"Beginner\" ? \"Easy\" : difficulty;\n      const themeVocab = theme.vocabulary[effectiveDifficulty];\n      \n      const vocabulary: VocabWord[] = vocabStrings.map((word, i) => {\n        const matchingWord = themeVocab[i];\n        let definition = \"\";\n        let romanization = language === \"Chinese\" ? \"\" : word;\n        \n        if (language === \"Chinese\" && matchingWord?.pinyin) {\n          romanization = matchingWord.pinyin;\n        }\n        \n        if (matchingWord) {\n          definition = matchingWord.english || \"\";\n        }\n        \n        return {\n          word,\n          romanization,\n          definition\n        };\n      });\n      \n      // Increment guest match counter now that match is confirmed (even with fallback vocab)\n      if (isGuestMode) {\n        incrementGuestMatches();\n      }\n      \n      setMatchData({\n        opponent,\n        opponentElo: opponentElo || (isBot ? 1000 : 1200),\n        isBot,\n        isPracticeMode,\n        topic: getThemeTitle(theme.id),\n        vocabulary,\n        language,\n        difficulty,\n        startsFirst,\n        matchId,\n        playerId: playerId,\n        botId,\n      });\n      setCurrentPage(\"match\");\n    }\n  };\n\n  const handleDuelComplete = (result: GradingResult, messages?: any[]) => {\n    // For human vs human matches, try to get opponent's grading result\n    if (matchData && !matchData.isBot && matchData.matchId) {\n      const opponentResultStr = sessionStorage.getItem(`opponent_result_${matchData.matchId}`);\n      if (opponentResultStr) {\n        try {\n          const opponentResult = JSON.parse(opponentResultStr);\n          // Populate opponent scores for comparison\n          result.botGrammar = opponentResult.grammar;\n          result.botFluency = opponentResult.fluency;\n          result.botVocabulary = opponentResult.vocabulary;\n          result.botNaturalness = opponentResult.naturalness;\n          result.botOverall = opponentResult.overall;\n          result.botElo = matchData.opponentElo;\n          \n          // Clean up\n          sessionStorage.removeItem(`opponent_result_${matchData.matchId}`);\n          \n          // Close the WebSocket now that we have the opponent result\n          if (multiplayerWsRef.current?.readyState === WebSocket.OPEN) {\n            multiplayerWsRef.current.close();\n            multiplayerWsRef.current = null;\n          }\n        } catch (error) {\n          console.error('Failed to parse opponent result:', error);\n          result.botElo = matchData.opponentElo;\n        }\n      } else {\n        // Opponent result not yet received, wait for it\n        result.botElo = matchData.opponentElo;\n        setWaitingForOpponentResult(true);\n      }\n    }\n    \n    setGradingResult(result);\n    if (messages) {\n      setMatchMessages(messages);\n    }\n    setCurrentPage(\"results\");\n  };\n\n  const handleAIReview = () => {\n    setCurrentPage(\"ai-review\");\n  };\n\n  const updateStats = async (eloChange: number, isWin: boolean, isLoss: boolean, isForfeit: boolean = false) => {\n    const newElo = userElo + eloChange;\n    // Forfeits count as losses but not as wins\n    const newWins = userWins + (isWin && !isForfeit ? 1 : 0);\n    const newLosses = userLosses + (isLoss ? 1 : 0);\n\n    if (isAuthenticated) {\n      // Update database for authenticated users\n      try {\n        await apiRequest(\"POST\", \"/api/user/stats\", {\n          language: currentLanguage,\n          elo: newElo,\n          wins: newWins,\n          losses: newLosses\n        });\n        // Invalidate and refetch stats to ensure fresh data\n        queryClient.invalidateQueries({ queryKey: [`/api/user/stats/${currentLanguage}`] });\n        await refetchStats();\n        queryClient.invalidateQueries({ queryKey: [`/api/user/matches?language=${currentLanguage}`] });\n        queryClient.invalidateQueries({ queryKey: [`/api/user/skill-progress?language=${currentLanguage}`] });\n        queryClient.invalidateQueries({ queryKey: [`/api/leaderboard?language=${currentLanguage}`] });\n      } catch (error) {\n        console.error(\"Failed to update stats:\", error);\n      }\n    } else {\n      // Update localStorage for guests\n      const newGuestStats = { elo: newElo, wins: newWins, losses: newLosses };\n      setGuestStats(newGuestStats);\n      localStorage.setItem(`guest_${currentLanguage}`, JSON.stringify(newGuestStats));\n    }\n  };\n\n  const handleResultsContinue = async () => {\n    // Prevent duplicate saves\n    if (isSavingMatch) return;\n    setIsSavingMatch(true);\n    \n    try {\n      // Update Elo based on comparative scoring (user vs bot)\n      if (gradingResult && matchData) {\n        const userScore = gradingResult.overall;\n        const botScore = gradingResult.botOverall || 0;\n        const botElo = gradingResult.botElo || 1000;\n        const isForfeit = gradingResult.isForfeit || false;\n        \n        // Determine result based on comparative scoring\n        const hasOpponentScores = botScore > 0;\n        const isWin = userScore > botScore;\n        const isDraw = userScore === botScore;\n        const isLoss = userScore < botScore;\n        \n        // Backend will calculate ELO change with streak multiplier\n        let change = 0;\n        let streakMultiplierInfo = null;\n        \n        // Save match history for authenticated users (both practice and competitive)\n        if (isAuthenticated) {\n          try {\n            const response = await apiRequest(\"POST\", \"/api/match/save\", {\n              opponent: matchData.opponent,\n              result: isWin ? \"win\" : \"loss\",\n              language: matchData.language,\n              difficulty: matchData.difficulty,\n              botElo: botElo, // Send bot ELO to backend for calculation\n              botScore: botScore, // Send bot score to backend for calculation\n              scores: {\n                grammar: gradingResult.grammar,\n                fluency: gradingResult.fluency,\n                vocabulary: gradingResult.vocabulary,\n                naturalness: gradingResult.naturalness,\n                overall: gradingResult.overall,\n              },\n              isForfeit: isForfeit,\n              isPracticeMode: matchData.isPracticeMode || false, // Track if this was a practice match\n              conversation: matchMessages || [], // Full chat log\n              detailedFeedback: {\n                messageAnalysis: gradingResult.messageAnalysis || [], // Detailed AI feedback with corrections (premium)\n                generalFeedback: gradingResult.feedback || [], // General feedback points (free users)\n              },\n              topic: matchData.topic || null, // Match topic\n            });\n            \n            // Get ELO change and streak multiplier from backend\n            const data = await response.json() as any;\n            change = data.eloChange || 0;\n            streakMultiplierInfo = data.streakMultiplier;\n            \n            // Store streak multiplier info for display\n            if (streakMultiplierInfo) {\n              setStreakMultiplierInfo(streakMultiplierInfo);\n            }\n            \n            // Check for level-up\n            if (data.levelUpInfo) {\n              // Convert level strings to FluencyLevelInfo objects\n              const oldLevelInfo = FLUENCY_LEVELS[data.levelUpInfo.oldLevel as FluencyLevel];\n              const newLevelInfo = FLUENCY_LEVELS[data.levelUpInfo.newLevel as FluencyLevel];\n              if (oldLevelInfo && newLevelInfo) {\n                setLevelUpInfo({\n                  oldLevel: oldLevelInfo,\n                  newLevel: newLevelInfo,\n                  language: data.levelUpInfo.language\n                });\n              }\n            }\n            \n            // Invalidate match history and skill progress queries\n            queryClient.invalidateQueries({ queryKey: [`/api/user/matches?language=${matchData.language}`] });\n            queryClient.invalidateQueries({ queryKey: [`/api/user/skill-progress?language=${matchData.language}`] });\n          } catch (error) {\n            console.error(\"Failed to save match:\", error);\n          }\n        }\n        \n        // Only update Elo stats if not in practice mode\n        if (!matchData.isPracticeMode) {\n          await updateStats(change, isWin, isLoss, isForfeit);\n        }\n      }\n      \n      // Store previous match settings before clearing\n      const previousSettings = matchData ? {\n        language: matchData.language,\n        difficulty: matchData.difficulty,\n        isPracticeMode: matchData.isPracticeMode,\n        topic: matchData.topic,\n        botId: matchData.botId,\n        isBot: matchData.isBot,\n      } : null;\n      \n      setMatchData(null);\n      setGradingResult(null);\n      \n      // If we have previous settings, automatically start a new match with the same settings\n      if (previousSettings) {\n        // Find the theme ID based on the topic\n        const matchingTheme = THEMES.find(t => getThemeTitle(t.id) === previousSettings.topic);\n        if (matchingTheme) {\n          // Generate a new opponent name if it was a bot\n          const opponentName = previousSettings.isBot ? \"AI Bot\" : \"Opponent\";\n          \n          // Start a new match with the same settings\n          handleMatchFound(\n            opponentName,\n            previousSettings.isBot,\n            previousSettings.language,\n            previousSettings.difficulty,\n            matchingTheme.id, // topicId\n            undefined, // opponentElo - will be auto-assigned\n            previousSettings.isPracticeMode,\n            Math.random() < 0.5, // startsFirst - randomize\n            undefined, // matchId - will be generated\n            undefined, // vocabularyFromServer - will be generated\n            previousSettings.botId // botId - maintain same bot if practice mode\n          );\n        } else {\n          // If theme not found, fall back to match finder\n          setCurrentPage(\"duel\");\n        }\n      } else {\n        // No previous settings, go back to match finder\n        setCurrentPage(\"duel\");\n      }\n    } finally {\n      // Always reset saving state, even on error\n      setIsSavingMatch(false);\n    }\n  };\n\n  const handleInitialLanguageComplete = async (selectedLanguage: string) => {\n    // Update current language\n    setCurrentLanguage(selectedLanguage as Language);\n    \n    // Mark that user has selected their initial language\n    if (isAuthenticated) {\n      // For authenticated users, update database\n      try {\n        await fetch('/api/user/mark-initial-language-selected', { method: 'POST' });\n      } catch (error) {\n        console.error('Failed to mark initial language selected:', error);\n      }\n    } else {\n      // For guests, use localStorage\n      localStorage.setItem('has_selected_initial_language', 'true');\n    }\n    \n    // Close language dialog\n    setShowInitialLanguageDialog(false);\n    // The level dialog will automatically open via the useEffect\n  };\n\n  const handleInitialLevelComplete = async (selectedElo?: number) => {\n    // For guests, update ELO in localStorage and mark as complete\n    if (isGuestMode && selectedElo) {\n      const newGuestStats = { elo: selectedElo, wins: 0, losses: 0 };\n      setGuestStats(newGuestStats);\n      localStorage.setItem(`guest_${currentLanguage}`, JSON.stringify(newGuestStats));\n      localStorage.setItem(`initial_level_selected_${currentLanguage}`, 'true');\n      setShowInitialLevelDialog(false);\n    } else if (!isGuestMode) {\n      // For authenticated users, refetch stats and close dialog\n      await refetchStats();\n      setShowInitialLevelDialog(false);\n    }\n    \n    // Check if user has seen How to Play dialog\n    const hasSeenHowToPlay = localStorage.getItem('hasSeenHowToPlay') === 'true';\n    if (!hasSeenHowToPlay) {\n      // Show How to Play dialog after a brief delay\n      setTimeout(() => {\n        setShowHowToPlayDialog(true);\n      }, 500);\n    }\n  };\n\n  const handleHowToPlayClose = () => {\n    localStorage.setItem('hasSeenHowToPlay', 'true');\n    setShowHowToPlayDialog(false);\n  };\n\n  const handleHowToPlayOpen = () => {\n    setShowHowToPlayDialog(true);\n  };\n\n  const handleForfeit = async () => {\n    if (!matchData) return;\n    \n    // Capture isPracticeMode before any state changes\n    const isPracticeMode = matchData.isPracticeMode;\n    \n    // Generate varied bot stats (70-95 range for realistic variation)\n    const botGrammar = 70 + Math.floor(Math.random() * 26);\n    const botFluency = 70 + Math.floor(Math.random() * 26);\n    const botVocabulary = 70 + Math.floor(Math.random() * 26);\n    const botNaturalness = 70 + Math.floor(Math.random() * 26);\n    const botOverall = Math.round((botGrammar + botFluency + botVocabulary + botNaturalness) / 4);\n    \n    // Create a forfeit result - set user score lower than bot to count as loss\n    // This ensures forfeit counts as a loss but won't affect skill progress\n    const forfeitResult: GradingResult = {\n      grammar: 0,\n      fluency: 0,\n      vocabulary: 0,\n      naturalness: 0,\n      overall: 0,\n      botGrammar,\n      botFluency,\n      botVocabulary,\n      botNaturalness,\n      botOverall,\n      botElo: matchData.opponentElo || 1000,\n      feedback: isPracticeMode\n        ? [\"Practice session ended. Try again to improve your skills!\"]\n        : [\"Match forfeited. Counts as a loss but won't affect skill progress.\"],\n      isForfeit: true // Mark as forfeit so it doesn't show in skill progress\n    };\n    \n    setGradingResult(forfeitResult);\n    setCurrentPage(\"results\");\n    \n    // Don't update stats here - let handleResultsContinue handle it\n    // This prevents double Elo updates (once here, once on Continue)\n  };\n\n\n  return (\n    <div className={`min-h-screen bg-background text-foreground ${currentPage === \"match\" ? \"h-screen overflow-hidden\" : \"\"}`} style={{ paddingTop: 'env(safe-area-inset-top, 0px)' }}>\n      {/* Streak Notification */}\n      {streakNotification && (\n        <StreakNotification\n          type={streakNotification.type}\n          streakCount={streakNotification.count}\n          isVisible={streakNotification.visible}\n          onClose={() => setStreakNotification(null)}\n          playSound={streakNotification.type === \"win\" ? playStreak : playDailyStreak}\n        />\n      )}\n      \n      {/* Level Up Dialog */}\n      {levelUpInfo && (\n        <LevelUpDialog\n          open={!!levelUpInfo}\n          onClose={() => setLevelUpInfo(null)}\n          oldLevel={levelUpInfo.oldLevel}\n          newLevel={levelUpInfo.newLevel}\n        />\n      )}\n      \n      {/* Initial Language Selection Dialog */}\n      <InitialLanguageDialog\n        open={showInitialLanguageDialog}\n        onComplete={handleInitialLanguageComplete}\n      />\n      \n      {/* Initial Level Selection Dialog */}\n      <InitialLevelDialog\n        open={showInitialLevelDialog}\n        language={currentLanguage}\n        onComplete={handleInitialLevelComplete}\n        isGuestMode={isGuestMode}\n      />\n      \n      {/* How to Play Dialog */}\n      <HowToPlayDialog\n        open={showHowToPlayDialog}\n        onClose={handleHowToPlayClose}\n      />\n      \n      <Header \n        username={username} \n        elo={userElo} \n        onNavigate={(page) => setCurrentPage(page as Page)}\n        currentPage={currentPage}\n        isAuthenticated={isAuthenticated}\n        profileImageUrl={user?.profileImageUrl}\n        currentLanguage={currentLanguage}\n        wins={userWins}\n        losses={userLosses}\n        onLanguageChange={(lang) => setCurrentLanguage(lang as Language)}\n        winStreak={isAuthenticated ? (languageStats?.winStreak ?? 0) : 0}\n        bestWinStreak={isAuthenticated ? (languageStats?.bestWinStreak ?? 0) : 0}\n        dailyLoginStreak={isAuthenticated ? (languageStats?.dailyLoginStreak ?? 0) : 0}\n        bestDailyLoginStreak={0}\n        isPremium={user?.isPremium === 1}\n        onHowToPlayOpen={handleHowToPlayOpen}\n      />\n      \n      <main className=\"pt-16\">\n        {currentPage === \"duel\" && (\n          <MatchFinder \n            onMatchFound={handleMatchFound}\n            currentLanguage={currentLanguage}\n            userElo={userElo}\n            userWins={userWins}\n            userLosses={userLosses}\n            username={username}\n            isGuest={isGuestMode}\n            isPremium={user?.isPremium === 1}\n            userId={user?.id}\n          />\n        )}\n        \n        {currentPage === \"match\" && matchData && (\n          <DuelInterface\n            topic={matchData.topic}\n            vocabulary={matchData.vocabulary}\n            opponentName={matchData.opponent}\n            opponentElo={matchData.opponentElo}\n            userElo={userElo}\n            userName={username}\n            isPremium={user?.isPremium === 1}\n            isBot={matchData.isBot}\n            isPracticeMode={matchData.isPracticeMode}\n            language={matchData.language}\n            difficulty={matchData.difficulty}\n            onComplete={handleDuelComplete}\n            onForfeit={handleForfeit}\n            startsFirst={matchData.startsFirst}\n            matchId={matchData.matchId}\n            botId={matchData.botId}\n            playerId={matchData.playerId}\n            multiplayerWsRef={multiplayerWsRef}\n          />\n        )}\n        \n        {currentPage === \"results\" && gradingResult && matchData && (\n          <MatchResults\n            gradingResult={gradingResult}\n            eloChange={matchData.isPracticeMode ? 0 : undefined}\n            newElo={userElo}\n            isBot={matchData.isBot}\n            opponentName={matchData.opponent}\n            isPracticeMode={matchData.isPracticeMode}\n            onContinue={handleResultsContinue}\n            onAIReview={handleAIReview}\n            isSaving={isSavingMatch}\n            streakMultiplier={streakMultiplierInfo}\n          />\n        )}\n        \n        {currentPage === \"leaderboard\" && (\n          <Leaderboard currentLanguage={currentLanguage} />\n        )}\n        \n        {currentPage === \"profile\" && (\n          <ProfileStats \n            username={username} \n            elo={userElo}\n            wins={userWins}\n            losses={userLosses}\n            totalMatches={userWins + userLosses}\n            currentLanguage={currentLanguage}\n            isAuthenticated={isAuthenticated}\n            winStreak={isAuthenticated ? (languageStats?.winStreak ?? 0) : 0}\n            bestWinStreak={isAuthenticated ? (languageStats?.bestWinStreak ?? 0) : 0}\n            dailyLoginStreak={isAuthenticated ? (languageStats?.dailyLoginStreak ?? 0) : 0}\n          />\n        )}\n        \n        {currentPage === \"friends\" && isAuthenticated && <Friends />}\n        \n        {currentPage === \"analytics\" && (\n          <div className=\"max-w-7xl mx-auto px-4 py-8\">\n            <Analytics currentLanguage={currentLanguage} isAuthenticated={isAuthenticated} />\n          </div>\n        )}\n        \n        {currentPage === \"ai-review\" && matchData && (\n          <AIReview\n            messages={matchMessages}\n            gradingResult={gradingResult || undefined}\n            topic={matchData.topic}\n            language={matchData.language}\n            onBack={() => setCurrentPage(\"results\")}\n          />\n        )}\n      </main>\n      \n      <InstallPrompt />\n      <Toaster />\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/signin\" component={SignIn} />\n      <Route path=\"/subscribe\" component={Subscribe} />\n      <Route path=\"/admin/whitelist\" component={AdminWhitelist} />\n      <Route path=\"/\" component={MainApp} />\n      <Route path=\"/:rest*\" component={MainApp} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":36596},"shared/themes.ts":{"content":"export interface VocabWord {\n  chinese?: string;\n  spanish?: string;\n  italian?: string;\n  pinyin?: string;\n  english?: string;\n}\n\nexport interface ThemeVocabulary {\n  Easy: VocabWord[];\n  Medium: VocabWord[];\n  Hard: VocabWord[];\n}\n\nexport interface Theme {\n  id: string;\n  title: string;\n  vocabulary: ThemeVocabulary;\n}\n\nexport const THEMES: Theme[] = [\n  {\n    id: \"travel\",\n    title: \"Travel & Tourism\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"去\", pinyin: \"qù\", spanish: \"ir\", italian: \"andare\", english: \"go\" },\n        { chinese: \"好\", pinyin: \"hǎo\", spanish: \"bueno\", italian: \"buono\", english: \"good/OK\" },\n        { chinese: \"车\", pinyin: \"chē\", spanish: \"coche\", italian: \"macchina\", english: \"car/vehicle\" },\n      ],\n      Medium: [\n        { chinese: \"去\", pinyin: \"qù\", spanish: \"ir\", italian: \"andare\", english: \"go\" },\n        { chinese: \"飞机\", pinyin: \"fēijī\", spanish: \"avión\", italian: \"aereo\", english: \"airplane\" },\n        { chinese: \"酒店\", pinyin: \"jiǔdiàn\", spanish: \"hotel\", italian: \"hotel\", english: \"hotel\" },\n        { chinese: \"旅行\", pinyin: \"lǚxíng\", spanish: \"viajar\", italian: \"viaggiare\", english: \"travel\" },\n        { chinese: \"护照\", pinyin: \"hùzhào\", spanish: \"pasaporte\", italian: \"passaporto\", english: \"passport\" },\n      ],\n      Hard: [\n        { chinese: \"目的地\", pinyin: \"mùdìdì\", spanish: \"destino\", italian: \"destinazione\", english: \"destination\" },\n        { chinese: \"冒险\", pinyin: \"màoxiǎn\", spanish: \"aventura\", italian: \"avventura\", english: \"adventure\" },\n        { chinese: \"文化\", pinyin: \"wénhuà\", spanish: \"cultura\", italian: \"cultura\", english: \"culture\" },\n        { chinese: \"旅游胜地\", pinyin: \"lǚyóu shèngdì\", spanish: \"destino turístico\", italian: \"meta turistica\", english: \"tourist destination\" },\n        { chinese: \"异国情调\", pinyin: \"yìguó qíngdiào\", spanish: \"exótico\", italian: \"esotico\", english: \"exotic\" },\n        { chinese: \"背包客\", pinyin: \"bēibāokè\", spanish: \"mochilero\", italian: \"zaino in spalla\", english: \"backpacker\" },\n        { chinese: \"观光旅游\", pinyin: \"guānguāng lǚyóu\", spanish: \"turismo\", italian: \"turismo\", english: \"sightseeing\" },\n        { chinese: \"旅游纪念品\", pinyin: \"lǚyóu jìniànpǐn\", spanish: \"recuerdo\", italian: \"souvenir\", english: \"souvenir\" },\n      ],\n    },\n  },\n  {\n    id: \"food\",\n    title: \"Food & Dining\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"水\", pinyin: \"shuǐ\", spanish: \"agua\", italian: \"acqua\", english: \"water\" },\n        { chinese: \"肉\", pinyin: \"ròu\", spanish: \"carne\", italian: \"carne\", english: \"meat\" },\n        { chinese: \"菜\", pinyin: \"cài\", spanish: \"verdura\", italian: \"verdura\", english: \"vegetable/dish\" },\n      ],\n      Medium: [\n        { chinese: \"吃\", pinyin: \"chī\", spanish: \"comer\", italian: \"mangiare\", english: \"eat\" },\n        { chinese: \"喝\", pinyin: \"hē\", spanish: \"beber\", italian: \"bere\", english: \"drink\" },\n        { chinese: \"饭\", pinyin: \"fàn\", spanish: \"arroz\", italian: \"riso\", english: \"rice/meal\" },\n        { chinese: \"美味\", pinyin: \"měiwèi\", spanish: \"delicioso\", italian: \"delizioso\", english: \"delicious\" },\n        { chinese: \"饿\", pinyin: \"è\", spanish: \"hambriento\", italian: \"affamato\", english: \"hungry\" },\n      ],\n      Hard: [\n        { chinese: \"餐厅\", pinyin: \"cāntīng\", spanish: \"restaurante\", italian: \"ristorante\", english: \"restaurant\" },\n        { chinese: \"味道\", pinyin: \"wèidào\", spanish: \"sabor\", italian: \"sapore\", english: \"taste/flavor\" },\n        { chinese: \"点菜\", pinyin: \"diǎncài\", spanish: \"ordenar\", italian: \"ordinare\", english: \"order food\" },\n        { chinese: \"烹饪\", pinyin: \"pēngrèn\", spanish: \"cocinar\", italian: \"cucinare\", english: \"cooking\" },\n        { chinese: \"美食家\", pinyin: \"měishíjiā\", spanish: \"gastrónomo\", italian: \"buongustaio\", english: \"gourmet\" },\n        { chinese: \"佳肴\", pinyin: \"jiāyáo\", spanish: \"manjar\", italian: \"prelibatezza\", english: \"delicacy\" },\n        { chinese: \"烹饪技艺\", pinyin: \"pēngrèn jìyì\", spanish: \"arte culinario\", italian: \"arte culinaria\", english: \"culinary art\" },\n        { chinese: \"营养均衡\", pinyin: \"yíngyǎng jūnhéng\", spanish: \"equilibrio nutricional\", italian: \"equilibrio nutrizionale\", english: \"nutritional balance\" },\n      ],\n    },\n  },\n  {\n    id: \"business\",\n    title: \"Business & Work\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"人\", pinyin: \"rén\", spanish: \"persona\", italian: \"persona\", english: \"person\" },\n        { chinese: \"做\", pinyin: \"zuò\", spanish: \"hacer\", italian: \"fare\", english: \"do/make\" },\n        { chinese: \"买\", pinyin: \"mǎi\", spanish: \"comprar\", italian: \"comprare\", english: \"buy\" },\n      ],\n      Medium: [\n        { chinese: \"工作\", pinyin: \"gōngzuò\", spanish: \"trabajo\", italian: \"lavoro\", english: \"work\" },\n        { chinese: \"老板\", pinyin: \"lǎobǎn\", spanish: \"jefe\", italian: \"capo\", english: \"boss\" },\n        { chinese: \"钱\", pinyin: \"qián\", spanish: \"dinero\", italian: \"denaro\", english: \"money\" },\n        { chinese: \"同事\", pinyin: \"tóngshì\", spanish: \"colega\", italian: \"collega\", english: \"colleague\" },\n        { chinese: \"项目\", pinyin: \"xiàngmù\", spanish: \"proyecto\", italian: \"progetto\", english: \"project\" },\n      ],\n      Hard: [\n        { chinese: \"会议\", pinyin: \"huìyì\", spanish: \"reunión\", italian: \"riunione\", english: \"meeting\" },\n        { chinese: \"客户\", pinyin: \"kèhù\", spanish: \"cliente\", italian: \"cliente\", english: \"client\" },\n        { chinese: \"市场\", pinyin: \"shìchǎng\", spanish: \"mercado\", italian: \"mercato\", english: \"market\" },\n        { chinese: \"截止日期\", pinyin: \"jiézhǐ rìqī\", spanish: \"fecha límite\", italian: \"scadenza\", english: \"deadline\" },\n        { chinese: \"策略\", pinyin: \"cèlüè\", spanish: \"estrategia\", italian: \"strategia\", english: \"strategy\" },\n        { chinese: \"谈判技巧\", pinyin: \"tánpàn jìqiǎo\", spanish: \"habilidades de negociación\", italian: \"abilità negoziali\", english: \"negotiation skills\" },\n        { chinese: \"商业模式\", pinyin: \"shāngyè móshì\", spanish: \"modelo de negocio\", italian: \"modello di business\", english: \"business model\" },\n        { chinese: \"投资回报率\", pinyin: \"tóuzī huíbàolǜ\", spanish: \"retorno de inversión\", italian: \"ritorno sull'investimento\", english: \"ROI\" },\n      ],\n    },\n  },\n  {\n    id: \"family\",\n    title: \"Family & Relationships\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"我\", pinyin: \"wǒ\", spanish: \"yo\", italian: \"io\", english: \"I/me\" },\n        { chinese: \"你\", pinyin: \"nǐ\", spanish: \"tú\", italian: \"tu\", english: \"you\" },\n        { chinese: \"他\", pinyin: \"tā\", spanish: \"él\", italian: \"lui\", english: \"he/him\" },\n      ],\n      Medium: [\n        { chinese: \"爸爸\", pinyin: \"bàba\", spanish: \"papá\", italian: \"papà\", english: \"dad\" },\n        { chinese: \"妈妈\", pinyin: \"māma\", spanish: \"mamá\", italian: \"mamma\", english: \"mom\" },\n        { chinese: \"朋友\", pinyin: \"péngyou\", spanish: \"amigo\", italian: \"amico\", english: \"friend\" },\n        { chinese: \"家庭\", pinyin: \"jiātíng\", spanish: \"familia\", italian: \"famiglia\", english: \"family\" },\n        { chinese: \"关系\", pinyin: \"guānxi\", spanish: \"relación\", italian: \"relazione\", english: \"relationship\" },\n      ],\n      Hard: [\n        { chinese: \"一起\", pinyin: \"yìqǐ\", spanish: \"juntos\", italian: \"insieme\", english: \"together\" },\n        { chinese: \"陪伴\", pinyin: \"péibàn\", spanish: \"acompañar\", italian: \"accompagnare\", english: \"accompany\" },\n        { chinese: \"照顾\", pinyin: \"zhàogù\", spanish: \"cuidar\", italian: \"prendersi cura\", english: \"take care of\" },\n        { chinese: \"血浓于水\", pinyin: \"xuè nóng yú shuǐ\", spanish: \"la sangre tira\", italian: \"il sangue non è acqua\", english: \"blood is thicker than water\" },\n        { chinese: \"代沟\", pinyin: \"dàigōu\", spanish: \"brecha generacional\", italian: \"divario generazionale\", english: \"generation gap\" },\n        { chinese: \"家族传统\", pinyin: \"jiāzú chuántǒng\", spanish: \"tradición familiar\", italian: \"tradizione familiare\", english: \"family tradition\" },\n        { chinese: \"亲密无间\", pinyin: \"qīnmì wújiān\", spanish: \"intimidad\", italian: \"intimità\", english: \"intimacy\" },\n        { chinese: \"和睦相处\", pinyin: \"hémù xiāngchǔ\", spanish: \"convivencia armoniosa\", italian: \"convivenza armoniosa\", english: \"harmonious coexistence\" },\n      ],\n    },\n  },\n  {\n    id: \"technology\",\n    title: \"Technology & Innovation\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"看\", pinyin: \"kàn\", spanish: \"ver\", italian: \"guardare\", english: \"look/watch\" },\n        { chinese: \"用\", pinyin: \"yòng\", spanish: \"usar\", italian: \"usare\", english: \"use\" },\n        { chinese: \"电脑\", pinyin: \"diànnǎo\", spanish: \"computadora\", italian: \"computer\", english: \"computer\" },\n      ],\n      Medium: [\n        { chinese: \"手机\", pinyin: \"shǒujī\", spanish: \"móvil\", italian: \"cellulare\", english: \"phone\" },\n        { chinese: \"网\", pinyin: \"wǎng\", spanish: \"internet\", italian: \"internet\", english: \"internet\" },\n        { chinese: \"游戏\", pinyin: \"yóuxì\", spanish: \"juego\", italian: \"gioco\", english: \"game\" },\n        { chinese: \"设备\", pinyin: \"shèbèi\", spanish: \"dispositivo\", italian: \"dispositivo\", english: \"device\" },\n        { chinese: \"软件\", pinyin: \"ruǎnjiàn\", spanish: \"software\", italian: \"software\", english: \"software\" },\n      ],\n      Hard: [\n        { chinese: \"创新\", pinyin: \"chuàngxīn\", spanish: \"innovación\", italian: \"innovazione\", english: \"innovation\" },\n        { chinese: \"连接\", pinyin: \"liánjiē\", spanish: \"conectar\", italian: \"connettere\", english: \"connect\" },\n        { chinese: \"科技\", pinyin: \"kējì\", spanish: \"tecnología\", italian: \"tecnologia\", english: \"technology\" },\n        { chinese: \"人工智能\", pinyin: \"réngōng zhìnéng\", spanish: \"inteligencia artificial\", italian: \"intelligenza artificiale\", english: \"artificial intelligence\" },\n        { chinese: \"云计算\", pinyin: \"yún jìsuàn\", spanish: \"computación en la nube\", italian: \"cloud computing\", english: \"cloud computing\" },\n        { chinese: \"大数据\", pinyin: \"dà shùjù\", spanish: \"big data\", italian: \"big data\", english: \"big data\" },\n        { chinese: \"虚拟现实\", pinyin: \"xūnǐ xiànshí\", spanish: \"realidad virtual\", italian: \"realtà virtuale\", english: \"virtual reality\" },\n        { chinese: \"区块链\", pinyin: \"qūkuàiliàn\", spanish: \"blockchain\", italian: \"blockchain\", english: \"blockchain\" },\n      ],\n    },\n  },\n  {\n    id: \"health\",\n    title: \"Health & Wellness\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"好\", pinyin: \"hǎo\", spanish: \"bien\", italian: \"bene\", english: \"good/well\" },\n        { chinese: \"累\", pinyin: \"lèi\", spanish: \"cansado\", italian: \"stanco\", english: \"tired\" },\n        { chinese: \"疼\", pinyin: \"téng\", spanish: \"dolor\", italian: \"dolore\", english: \"pain/hurt\" },\n      ],\n      Medium: [\n        { chinese: \"病\", pinyin: \"bìng\", spanish: \"enfermo\", italian: \"malato\", english: \"sick\" },\n        { chinese: \"医生\", pinyin: \"yīshēng\", spanish: \"médico\", italian: \"medico\", english: \"doctor\" },\n        { chinese: \"药\", pinyin: \"yào\", spanish: \"medicina\", italian: \"medicina\", english: \"medicine\" },\n        { chinese: \"锻炼\", pinyin: \"duànliàn\", spanish: \"ejercitar\", italian: \"esercitare\", english: \"exercise\" },\n        { chinese: \"营养\", pinyin: \"yíngyǎng\", spanish: \"nutrición\", italian: \"nutrizione\", english: \"nutrition\" },\n      ],\n      Hard: [\n        { chinese: \"健康\", pinyin: \"jiànkāng\", spanish: \"salud\", italian: \"salute\", english: \"health\" },\n        { chinese: \"健身\", pinyin: \"jiànshēn\", spanish: \"fitness\", italian: \"fitness\", english: \"fitness\" },\n        { chinese: \"体检\", pinyin: \"tǐjiǎn\", spanish: \"chequeo médico\", italian: \"visita medica\", english: \"medical checkup\" },\n        { chinese: \"身心健康\", pinyin: \"shēnxīn jiànkāng\", spanish: \"salud física y mental\", italian: \"salute fisica e mentale\", english: \"physical and mental health\" },\n        { chinese: \"预防保健\", pinyin: \"yùfáng bǎojiàn\", spanish: \"medicina preventiva\", italian: \"medicina preventiva\", english: \"preventive healthcare\" },\n        { chinese: \"有氧运动\", pinyin: \"yǒuyǎng yùndòng\", spanish: \"ejercicio aeróbico\", italian: \"esercizio aerobico\", english: \"aerobic exercise\" },\n        { chinese: \"免疫系统\", pinyin: \"miǎnyì xìtǒng\", spanish: \"sistema inmunológico\", italian: \"sistema immunitario\", english: \"immune system\" },\n        { chinese: \"心理健康\", pinyin: \"xīnlǐ jiànkāng\", spanish: \"salud mental\", italian: \"salute mentale\", english: \"mental health\" },\n      ],\n    },\n  },\n  {\n    id: \"education\",\n    title: \"Education & Learning\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"写\", pinyin: \"xiě\", spanish: \"escribir\", italian: \"scrivere\", english: \"write\" },\n        { chinese: \"读\", pinyin: \"dú\", spanish: \"leer\", italian: \"leggere\", english: \"read\" },\n        { chinese: \"学\", pinyin: \"xué\", spanish: \"estudiar\", italian: \"studiare\", english: \"study\" },\n      ],\n      Medium: [\n        { chinese: \"学\", pinyin: \"xué\", spanish: \"estudiar\", italian: \"studiare\", english: \"study\" },\n        { chinese: \"书\", pinyin: \"shū\", spanish: \"libro\", italian: \"libro\", english: \"book\" },\n        { chinese: \"老师\", pinyin: \"lǎoshī\", spanish: \"profesor\", italian: \"professore\", english: \"teacher\" },\n        { chinese: \"知识\", pinyin: \"zhīshi\", spanish: \"conocimiento\", italian: \"conoscenza\", english: \"knowledge\" },\n        { chinese: \"学习\", pinyin: \"xuéxí\", spanish: \"aprender\", italian: \"imparare\", english: \"learn\" },\n      ],\n      Hard: [\n        { chinese: \"课程\", pinyin: \"kèchéng\", spanish: \"curso\", italian: \"corso\", english: \"course\" },\n        { chinese: \"成绩\", pinyin: \"chéngjì\", spanish: \"calificación\", italian: \"voto\", english: \"grade\" },\n        { chinese: \"教育\", pinyin: \"jiàoyù\", spanish: \"educación\", italian: \"educazione\", english: \"education\" },\n        { chinese: \"终身学习\", pinyin: \"zhōngshēn xuéxí\", spanish: \"aprendizaje permanente\", italian: \"apprendimento permanente\", english: \"lifelong learning\" },\n        { chinese: \"批判性思维\", pinyin: \"pīpàn xìng sīwéi\", spanish: \"pensamiento crítico\", italian: \"pensiero critico\", english: \"critical thinking\" },\n        { chinese: \"学术研究\", pinyin: \"xuéshù yánjiū\", spanish: \"investigación académica\", italian: \"ricerca accademica\", english: \"academic research\" },\n        { chinese: \"教学方法\", pinyin: \"jiàoxuéfǎ\", spanish: \"método pedagógico\", italian: \"metodo pedagogico\", english: \"teaching method\" },\n        { chinese: \"认知能力\", pinyin: \"rènzhī nénglì\", spanish: \"capacidad cognitiva\", italian: \"capacità cognitiva\", english: \"cognitive ability\" },\n      ],\n    },\n  },\n  {\n    id: \"entertainment\",\n    title: \"Entertainment & Hobbies\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"玩\", pinyin: \"wán\", spanish: \"jugar\", italian: \"giocare\", english: \"play\" },\n        { chinese: \"听\", pinyin: \"tīng\", spanish: \"escuchar\", italian: \"ascoltare\", english: \"listen\" },\n        { chinese: \"唱\", pinyin: \"chàng\", spanish: \"cantar\", italian: \"cantare\", english: \"sing\" },\n      ],\n      Medium: [\n        { chinese: \"玩\", pinyin: \"wán\", spanish: \"jugar\", italian: \"giocare\", english: \"play\" },\n        { chinese: \"看\", pinyin: \"kàn\", spanish: \"ver\", italian: \"guardare\", english: \"watch\" },\n        { chinese: \"电影\", pinyin: \"diànyǐng\", spanish: \"película\", italian: \"film\", english: \"movie\" },\n        { chinese: \"娱乐\", pinyin: \"yúlè\", spanish: \"entretenimiento\", italian: \"intrattenimento\", english: \"entertainment\" },\n        { chinese: \"爱好\", pinyin: \"àihào\", spanish: \"pasatiempo\", italian: \"hobby\", english: \"hobby\" },\n      ],\n      Hard: [\n        { chinese: \"兴趣\", pinyin: \"xìngqù\", spanish: \"interés\", italian: \"interesse\", english: \"interest\" },\n        { chinese: \"演出\", pinyin: \"yǎnchū\", spanish: \"espectáculo\", italian: \"spettacolo\", english: \"performance\" },\n        { chinese: \"摄影\", pinyin: \"shèyǐng\", spanish: \"fotografía\", italian: \"fotografia\", english: \"photography\" },\n        { chinese: \"艺术鉴赏\", pinyin: \"yìshù jiànshǎng\", spanish: \"apreciación artística\", italian: \"apprezzamento artistico\", english: \"art appreciation\" },\n        { chinese: \"文化活动\", pinyin: \"wénhuà huódòng\", spanish: \"actividad cultural\", italian: \"attività culturale\", english: \"cultural activity\" },\n        { chinese: \"创意表达\", pinyin: \"chuàngyì biǎodá\", spanish: \"expresión creativa\", italian: \"espressione creativa\", english: \"creative expression\" },\n        { chinese: \"休闲娱乐\", pinyin: \"xiūxián yúlè\", spanish: \"ocio y entretenimiento\", italian: \"svago e intrattenimento\", english: \"leisure and entertainment\" },\n        { chinese: \"精神寄托\", pinyin: \"jīngshén jìtuō\", spanish: \"refugio espiritual\", italian: \"rifugio spirituale\", english: \"spiritual sustenance\" },\n      ],\n    },\n  },\n  {\n    id: \"nature\",\n    title: \"Nature & Environment\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"天\", pinyin: \"tiān\", spanish: \"cielo\", italian: \"cielo\", english: \"sky/day\" },\n        { chinese: \"水\", pinyin: \"shuǐ\", spanish: \"agua\", italian: \"acqua\", english: \"water\" },\n        { chinese: \"风\", pinyin: \"fēng\", spanish: \"viento\", italian: \"vento\", english: \"wind\" },\n      ],\n      Medium: [\n        { chinese: \"花\", pinyin: \"huā\", spanish: \"flor\", italian: \"fiore\", english: \"flower\" },\n        { chinese: \"树\", pinyin: \"shù\", spanish: \"árbol\", italian: \"albero\", english: \"tree\" },\n        { chinese: \"山\", pinyin: \"shān\", spanish: \"montaña\", italian: \"montagna\", english: \"mountain\" },\n        { chinese: \"环境\", pinyin: \"huánjìng\", spanish: \"medio ambiente\", italian: \"ambiente\", english: \"environment\" },\n        { chinese: \"自然\", pinyin: \"zìrán\", spanish: \"naturaleza\", italian: \"natura\", english: \"nature\" },\n      ],\n      Hard: [\n        { chinese: \"保护\", pinyin: \"bǎohù\", spanish: \"proteger\", italian: \"proteggere\", english: \"protect\" },\n        { chinese: \"污染\", pinyin: \"wūrǎn\", spanish: \"contaminación\", italian: \"inquinamento\", english: \"pollution\" },\n        { chinese: \"森林\", pinyin: \"sēnlín\", spanish: \"bosque\", italian: \"foresta\", english: \"forest\" },\n        { chinese: \"生态系统\", pinyin: \"shēngtài xìtǒng\", spanish: \"ecosistema\", italian: \"ecosistema\", english: \"ecosystem\" },\n        { chinese: \"可持续发展\", pinyin: \"kě chíxù fāzhǎn\", spanish: \"desarrollo sostenible\", italian: \"sviluppo sostenibile\", english: \"sustainable development\" },\n        { chinese: \"生物多样性\", pinyin: \"shēngwù duōyàng xìng\", spanish: \"biodiversidad\", italian: \"biodiversità\", english: \"biodiversity\" },\n        { chinese: \"环境保护\", pinyin: \"huánjìng bǎohù\", spanish: \"protección ambiental\", italian: \"protezione ambientale\", english: \"environmental protection\" },\n        { chinese: \"气候变化\", pinyin: \"qìhòu biànhuà\", spanish: \"cambio climático\", italian: \"cambiamento climatico\", english: \"climate change\" },\n      ],\n    },\n  },\n  {\n    id: \"shopping\",\n    title: \"Shopping & Fashion\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"买\", pinyin: \"mǎi\", spanish: \"comprar\", italian: \"comprare\", english: \"buy\" },\n        { chinese: \"卖\", pinyin: \"mài\", spanish: \"vender\", italian: \"vendere\", english: \"sell\" },\n        { chinese: \"贵\", pinyin: \"guì\", spanish: \"caro\", italian: \"costoso\", english: \"expensive\" },\n      ],\n      Medium: [\n        { chinese: \"买\", pinyin: \"mǎi\", spanish: \"comprar\", italian: \"comprare\", english: \"buy\" },\n        { chinese: \"衣服\", pinyin: \"yīfu\", spanish: \"ropa\", italian: \"vestiti\", english: \"clothes\" },\n        { chinese: \"钱\", pinyin: \"qián\", spanish: \"dinero\", italian: \"denaro\", english: \"money\" },\n        { chinese: \"购物\", pinyin: \"gòuwù\", spanish: \"compras\", italian: \"shopping\", english: \"shopping\" },\n        { chinese: \"时尚\", pinyin: \"shíshàng\", spanish: \"moda\", italian: \"moda\", english: \"fashion\" },\n      ],\n      Hard: [\n        { chinese: \"品牌\", pinyin: \"pǐnpái\", spanish: \"marca\", italian: \"marca\", english: \"brand\" },\n        { chinese: \"打折\", pinyin: \"dǎzhé\", spanish: \"descuento\", italian: \"sconto\", english: \"discount\" },\n        { chinese: \"质量\", pinyin: \"zhìliàng\", spanish: \"calidad\", italian: \"qualità\", english: \"quality\" },\n        { chinese: \"消费行为\", pinyin: \"xiāofèi xíngwéi\", spanish: \"comportamiento de consumo\", italian: \"comportamento di consumo\", english: \"consumer behavior\" },\n        { chinese: \"时尚潮流\", pinyin: \"shíshàng cháoliú\", spanish: \"tendencia de moda\", italian: \"tendenza della moda\", english: \"fashion trend\" },\n        { chinese: \"性价比\", pinyin: \"xìngjiàbǐ\", spanish: \"relación calidad-precio\", italian: \"rapporto qualità-prezzo\", english: \"value for money\" },\n        { chinese: \"奢侈品\", pinyin: \"shēchǐpǐn\", spanish: \"artículos de lujo\", italian: \"articoli di lusso\", english: \"luxury goods\" },\n        { chinese: \"购物体验\", pinyin: \"gòuwù tǐyàn\", spanish: \"experiencia de compra\", italian: \"esperienza di acquisto\", english: \"shopping experience\" },\n      ],\n    },\n  },\n  {\n    id: \"sports\",\n    title: \"Sports & Fitness\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"跑\", pinyin: \"pǎo\", spanish: \"correr\", italian: \"correre\", english: \"run\" },\n        { chinese: \"跳\", pinyin: \"tiào\", spanish: \"saltar\", italian: \"saltare\", english: \"jump\" },\n        { chinese: \"赢\", pinyin: \"yíng\", spanish: \"ganar\", italian: \"vincere\", english: \"win\" },\n      ],\n      Medium: [\n        { chinese: \"球\", pinyin: \"qiú\", spanish: \"pelota\", italian: \"palla\", english: \"ball\" },\n        { chinese: \"跑\", pinyin: \"pǎo\", spanish: \"correr\", italian: \"correre\", english: \"run\" },\n        { chinese: \"比赛\", pinyin: \"bǐsài\", spanish: \"competencia\", italian: \"gara\", english: \"competition\" },\n        { chinese: \"运动员\", pinyin: \"yùndòngyuán\", spanish: \"atleta\", italian: \"atleta\", english: \"athlete\" },\n        { chinese: \"训练\", pinyin: \"xùnliàn\", spanish: \"entrenar\", italian: \"allenare\", english: \"train\" },\n      ],\n      Hard: [\n        { chinese: \"团队\", pinyin: \"tuánduì\", spanish: \"equipo\", italian: \"squadra\", english: \"team\" },\n        { chinese: \"冠军\", pinyin: \"guànjūn\", spanish: \"campeón\", italian: \"campione\", english: \"champion\" },\n        { chinese: \"体育\", pinyin: \"tǐyù\", spanish: \"deporte\", italian: \"sport\", english: \"sports\" },\n        { chinese: \"竞技精神\", pinyin: \"jìngjì jīngshén\", spanish: \"espíritu competitivo\", italian: \"spirito competitivo\", english: \"competitive spirit\" },\n        { chinese: \"体能训练\", pinyin: \"tǐnéng xùnliàn\", spanish: \"entrenamiento físico\", italian: \"allenamento fisico\", english: \"physical training\" },\n        { chinese: \"运动损伤\", pinyin: \"yùndòng sǔnshāng\", spanish: \"lesión deportiva\", italian: \"infortunio sportivo\", english: \"sports injury\" },\n        { chinese: \"职业体育\", pinyin: \"zhíyè tǐyù\", spanish: \"deporte profesional\", italian: \"sport professionistico\", english: \"professional sports\" },\n        { chinese: \"体育精神\", pinyin: \"tǐyù jīngshén\", spanish: \"espíritu deportivo\", italian: \"spirito sportivo\", english: \"sportsmanship\" },\n      ],\n    },\n  },\n  {\n    id: \"weather\",\n    title: \"Weather & Seasons\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"天\", pinyin: \"tiān\", spanish: \"día\", italian: \"giorno\", english: \"day/sky\" },\n        { chinese: \"风\", pinyin: \"fēng\", spanish: \"viento\", italian: \"vento\", english: \"wind\" },\n        { chinese: \"雪\", pinyin: \"xuě\", spanish: \"nieve\", italian: \"neve\", english: \"snow\" },\n      ],\n      Medium: [\n        { chinese: \"热\", pinyin: \"rè\", spanish: \"calor\", italian: \"caldo\", english: \"hot\" },\n        { chinese: \"冷\", pinyin: \"lěng\", spanish: \"frío\", italian: \"freddo\", english: \"cold\" },\n        { chinese: \"雨\", pinyin: \"yǔ\", spanish: \"lluvia\", italian: \"pioggia\", english: \"rain\" },\n        { chinese: \"季节\", pinyin: \"jìjié\", spanish: \"estación\", italian: \"stagione\", english: \"season\" },\n        { chinese: \"温度\", pinyin: \"wēndù\", spanish: \"temperatura\", italian: \"temperatura\", english: \"temperature\" },\n      ],\n      Hard: [\n        { chinese: \"预报\", pinyin: \"yùbào\", spanish: \"pronóstico\", italian: \"previsione\", english: \"forecast\" },\n        { chinese: \"晴朗\", pinyin: \"qínglǎng\", spanish: \"despejado\", italian: \"sereno\", english: \"clear\" },\n        { chinese: \"潮湿\", pinyin: \"cháoshī\", spanish: \"húmedo\", italian: \"umido\", english: \"humid\" },\n        { chinese: \"气象变化\", pinyin: \"qìxiàng biànhuà\", spanish: \"cambios meteorológicos\", italian: \"cambiamenti meteorologici\", english: \"meteorological changes\" },\n        { chinese: \"极端天气\", pinyin: \"jíduān tiānqì\", spanish: \"clima extremo\", italian: \"clima estremo\", english: \"extreme weather\" },\n        { chinese: \"季节性特征\", pinyin: \"jìjié xìng tèzhēng\", spanish: \"características estacionales\", italian: \"caratteristiche stagionali\", english: \"seasonal characteristics\" },\n        { chinese: \"气候适应\", pinyin: \"qìhòu shìyìng\", spanish: \"adaptación climática\", italian: \"adattamento climatico\", english: \"climate adaptation\" },\n        { chinese: \"天气现象\", pinyin: \"tiānqì xiànxiàng\", spanish: \"fenómeno meteorológico\", italian: \"fenomeno meteorologico\", english: \"weather phenomenon\" },\n      ],\n    },\n  },\n  {\n    id: \"social\",\n    title: \"Social Life & Communication\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"说\", pinyin: \"shuō\", spanish: \"hablar\", italian: \"parlare\", english: \"speak\" },\n        { chinese: \"听\", pinyin: \"tīng\", spanish: \"escuchar\", italian: \"ascoltare\", english: \"listen\" },\n        { chinese: \"看\", pinyin: \"kàn\", spanish: \"ver\", italian: \"guardare\", english: \"see/look\" },\n      ],\n      Medium: [\n        { chinese: \"说\", pinyin: \"shuō\", spanish: \"hablar\", italian: \"parlare\", english: \"speak\" },\n        { chinese: \"听\", pinyin: \"tīng\", spanish: \"escuchar\", italian: \"ascoltare\", english: \"listen\" },\n        { chinese: \"见面\", pinyin: \"jiànmiàn\", spanish: \"encontrarse\", italian: \"incontrarsi\", english: \"meet\" },\n        { chinese: \"交流\", pinyin: \"jiāoliú\", spanish: \"comunicar\", italian: \"comunicare\", english: \"communicate\" },\n        { chinese: \"社交\", pinyin: \"shèjiāo\", spanish: \"socializar\", italian: \"socializzare\", english: \"socialize\" },\n      ],\n      Hard: [\n        { chinese: \"聚会\", pinyin: \"jùhuì\", spanish: \"reunión\", italian: \"festa\", english: \"gathering\" },\n        { chinese: \"分享\", pinyin: \"fēnxiǎng\", spanish: \"compartir\", italian: \"condividere\", english: \"share\" },\n        { chinese: \"表达\", pinyin: \"biǎodá\", spanish: \"expresar\", italian: \"esprimere\", english: \"express\" },\n        { chinese: \"人际关系\", pinyin: \"rénjì guānxi\", spanish: \"relaciones interpersonales\", italian: \"relazioni interpersonali\", english: \"interpersonal relationships\" },\n        { chinese: \"社交礼仪\", pinyin: \"shèjiāo lǐyí\", spanish: \"etiqueta social\", italian: \"etichetta sociale\", english: \"social etiquette\" },\n        { chinese: \"沟通技巧\", pinyin: \"gōutōng jìqiǎo\", spanish: \"habilidades de comunicación\", italian: \"abilità comunicative\", english: \"communication skills\" },\n        { chinese: \"情感表达\", pinyin: \"qínggǎn biǎodá\", spanish: \"expresión emocional\", italian: \"espressione emotiva\", english: \"emotional expression\" },\n        { chinese: \"社会交往\", pinyin: \"shèhuì jiāowǎng\", spanish: \"interacción social\", italian: \"interazione sociale\", english: \"social interaction\" },\n      ],\n    },\n  },\n  {\n    id: \"music\",\n    title: \"Music & Arts\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"歌\", pinyin: \"gē\", spanish: \"canción\", italian: \"canzone\", english: \"song\" },\n        { chinese: \"跳\", pinyin: \"tiào\", spanish: \"bailar\", italian: \"ballare\", english: \"dance/jump\" },\n        { chinese: \"画\", pinyin: \"huà\", spanish: \"pintar\", italian: \"dipingere\", english: \"paint/draw\" },\n      ],\n      Medium: [\n        { chinese: \"音乐\", pinyin: \"yīnyuè\", spanish: \"música\", italian: \"musica\", english: \"music\" },\n        { chinese: \"唱歌\", pinyin: \"chànggē\", spanish: \"cantar\", italian: \"cantare\", english: \"sing\" },\n        { chinese: \"跳舞\", pinyin: \"tiàowǔ\", spanish: \"bailar\", italian: \"ballare\", english: \"dance\" },\n        { chinese: \"画画\", pinyin: \"huàhuà\", spanish: \"dibujar\", italian: \"disegnare\", english: \"draw\" },\n        { chinese: \"艺术\", pinyin: \"yìshù\", spanish: \"arte\", italian: \"arte\", english: \"art\" },\n      ],\n      Hard: [\n        { chinese: \"演奏\", pinyin: \"yǎnzòu\", spanish: \"tocar\", italian: \"suonare\", english: \"perform/play instrument\" },\n        { chinese: \"乐器\", pinyin: \"yuèqì\", spanish: \"instrumento\", italian: \"strumento\", english: \"musical instrument\" },\n        { chinese: \"旋律\", pinyin: \"xuánlǜ\", spanish: \"melodía\", italian: \"melodia\", english: \"melody\" },\n        { chinese: \"节奏\", pinyin: \"jiézòu\", spanish: \"ritmo\", italian: \"ritmo\", english: \"rhythm\" },\n        { chinese: \"创作\", pinyin: \"chuàngzuò\", spanish: \"crear\", italian: \"creare\", english: \"create\" },\n        { chinese: \"艺术表现\", pinyin: \"yìshù biǎoxiàn\", spanish: \"expresión artística\", italian: \"espressione artistica\", english: \"artistic expression\" },\n        { chinese: \"音乐天赋\", pinyin: \"yīnyuè tiānfù\", spanish: \"talento musical\", italian: \"talento musicale\", english: \"musical talent\" },\n        { chinese: \"创意灵感\", pinyin: \"chuàngyì línggǎn\", spanish: \"inspiración creativa\", italian: \"ispirazione creativa\", english: \"creative inspiration\" },\n      ],\n    },\n  },\n  {\n    id: \"hobbies\",\n    title: \"Hobbies & Leisure\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"玩\", pinyin: \"wán\", spanish: \"jugar\", italian: \"giocare\", english: \"play\" },\n        { chinese: \"书\", pinyin: \"shū\", spanish: \"libro\", italian: \"libro\", english: \"book\" },\n        { chinese: \"走\", pinyin: \"zǒu\", spanish: \"caminar\", italian: \"camminare\", english: \"walk\" },\n      ],\n      Medium: [\n        { chinese: \"看书\", pinyin: \"kànshū\", spanish: \"leer\", italian: \"leggere\", english: \"read\" },\n        { chinese: \"游戏\", pinyin: \"yóuxì\", spanish: \"juego\", italian: \"gioco\", english: \"game\" },\n        { chinese: \"散步\", pinyin: \"sànbù\", spanish: \"pasear\", italian: \"passeggiare\", english: \"take a walk\" },\n        { chinese: \"爱好\", pinyin: \"àihào\", spanish: \"pasatiempo\", italian: \"hobby\", english: \"hobby\" },\n        { chinese: \"休闲\", pinyin: \"xiūxián\", spanish: \"ocio\", italian: \"svago\", english: \"leisure\" },\n      ],\n      Hard: [\n        { chinese: \"兴趣爱好\", pinyin: \"xìngqù àihào\", spanish: \"interés\", italian: \"interesse\", english: \"interest/hobby\" },\n        { chinese: \"收藏\", pinyin: \"shōucáng\", spanish: \"coleccionar\", italian: \"collezionare\", english: \"collect\" },\n        { chinese: \"摄影\", pinyin: \"shèyǐng\", spanish: \"fotografía\", italian: \"fotografia\", english: \"photography\" },\n        { chinese: \"园艺\", pinyin: \"yuányì\", spanish: \"jardinería\", italian: \"giardinaggio\", english: \"gardening\" },\n        { chinese: \"手工制作\", pinyin: \"shǒugōng zhìzuò\", spanish: \"artesanía\", italian: \"artigianato\", english: \"handicraft\" },\n        { chinese: \"业余时间\", pinyin: \"yèyú shíjiān\", spanish: \"tiempo libre\", italian: \"tempo libero\", english: \"spare time\" },\n        { chinese: \"放松心情\", pinyin: \"fàngsōng xīnqíng\", spanish: \"relajarse\", italian: \"rilassarsi\", english: \"relax\" },\n        { chinese: \"陶冶情操\", pinyin: \"táoyě qíngcāo\", spanish: \"cultivar el espíritu\", italian: \"coltivare lo spirito\", english: \"cultivate character\" },\n      ],\n    },\n  },\n  {\n    id: \"home\",\n    title: \"Home & Daily Life\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"家\", pinyin: \"jiā\", spanish: \"casa\", italian: \"casa\", english: \"home\" },\n        { chinese: \"睡\", pinyin: \"shuì\", spanish: \"dormir\", italian: \"dormire\", english: \"sleep\" },\n        { chinese: \"吃\", pinyin: \"chī\", spanish: \"comer\", italian: \"mangiare\", english: \"eat\" },\n      ],\n      Medium: [\n        { chinese: \"房间\", pinyin: \"fángjiān\", spanish: \"habitación\", italian: \"stanza\", english: \"room\" },\n        { chinese: \"打扫\", pinyin: \"dǎsǎo\", spanish: \"limpiar\", italian: \"pulire\", english: \"clean\" },\n        { chinese: \"睡觉\", pinyin: \"shuìjiào\", spanish: \"dormir\", italian: \"dormire\", english: \"sleep\" },\n        { chinese: \"起床\", pinyin: \"qǐchuáng\", spanish: \"levantarse\", italian: \"alzarsi\", english: \"get up\" },\n        { chinese: \"洗澡\", pinyin: \"xǐzǎo\", spanish: \"bañarse\", italian: \"fare il bagno\", english: \"take a bath\" },\n      ],\n      Hard: [\n        { chinese: \"家务\", pinyin: \"jiāwù\", spanish: \"quehaceres domésticos\", italian: \"faccende domestiche\", english: \"housework\" },\n        { chinese: \"装修\", pinyin: \"zhuāngxiū\", spanish: \"decorar\", italian: \"ristrutturare\", english: \"decorate/renovate\" },\n        { chinese: \"家居\", pinyin: \"jiājū\", spanish: \"muebles\", italian: \"arredamento\", english: \"home furnishing\" },\n        { chinese: \"整理\", pinyin: \"zhěnglǐ\", spanish: \"ordenar\", italian: \"ordinare\", english: \"organize\" },\n        { chinese: \"生活习惯\", pinyin: \"shēnghuó xíguàn\", spanish: \"hábitos de vida\", italian: \"abitudini di vita\", english: \"lifestyle habits\" },\n        { chinese: \"家庭氛围\", pinyin: \"jiātíng fēnwéi\", spanish: \"ambiente familiar\", italian: \"atmosfera familiare\", english: \"family atmosphere\" },\n        { chinese: \"居住环境\", pinyin: \"jūzhù huánjìng\", spanish: \"entorno de vida\", italian: \"ambiente abitativo\", english: \"living environment\" },\n        { chinese: \"日常起居\", pinyin: \"rìcháng qǐjū\", spanish: \"rutina diaria\", italian: \"routine quotidiana\", english: \"daily routine\" },\n      ],\n    },\n  },\n  {\n    id: \"transportation\",\n    title: \"Transportation & Commute\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"车\", pinyin: \"chē\", spanish: \"coche\", italian: \"macchina\", english: \"car/vehicle\" },\n        { chinese: \"坐\", pinyin: \"zuò\", spanish: \"sentarse\", italian: \"sedersi\", english: \"sit/take (transport)\" },\n        { chinese: \"站\", pinyin: \"zhàn\", spanish: \"parada\", italian: \"fermata\", english: \"station/stop\" },\n      ],\n      Medium: [\n        { chinese: \"公交\", pinyin: \"gōngjiāo\", spanish: \"autobús\", italian: \"autobus\", english: \"bus\" },\n        { chinese: \"地铁\", pinyin: \"dìtiě\", spanish: \"metro\", italian: \"metropolitana\", english: \"subway\" },\n        { chinese: \"骑车\", pinyin: \"qíchē\", spanish: \"andar en bicicleta\", italian: \"andare in bicicleta\", english: \"ride bike\" },\n        { chinese: \"开车\", pinyin: \"kāichē\", spanish: \"conducir\", italian: \"guidare\", english: \"drive\" },\n        { chinese: \"交通\", pinyin: \"jiāotōng\", spanish: \"tráfico\", italian: \"traffico\", english: \"traffic\" },\n      ],\n      Hard: [\n        { chinese: \"通勤\", pinyin: \"tōngqín\", spanish: \"ir al trabajo\", italian: \"pendolare\", english: \"commute\" },\n        { chinese: \"拥堵\", pinyin: \"yōngdǔ\", spanish: \"congestión\", italian: \"congestione\", english: \"traffic jam\" },\n        { chinese: \"路线\", pinyin: \"lùxiàn\", spanish: \"ruta\", italian: \"percorso\", english: \"route\" },\n        { chinese: \"换乘\", pinyin: \"huànchéng\", spanish: \"transbordo\", italian: \"trasferimento\", english: \"transfer\" },\n        { chinese: \"交通工具\", pinyin: \"jiāotōng gōngjù\", spanish: \"medio de transporte\", italian: \"mezzo di trasporto\", english: \"means of transport\" },\n        { chinese: \"出行方式\", pinyin: \"chūxíng fāngshì\", spanish: \"modo de viaje\", italian: \"modo di viaggio\", english: \"mode of travel\" },\n        { chinese: \"高峰时段\", pinyin: \"gāofēng shíduàn\", spanish: \"hora pico\", italian: \"ora di punta\", english: \"rush hour\" },\n        { chinese: \"公共交通\", pinyin: \"gōnggòng jiāotōng\", spanish: \"transporte público\", italian: \"trasporto pubblico\", english: \"public transport\" },\n      ],\n    },\n  },\n  {\n    id: \"animals\",\n    title: \"Animals & Pets\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"狗\", pinyin: \"gǒu\", spanish: \"perro\", italian: \"cane\", english: \"dog\" },\n        { chinese: \"猫\", pinyin: \"māo\", spanish: \"gato\", italian: \"gatto\", english: \"cat\" },\n        { chinese: \"鸟\", pinyin: \"niǎo\", spanish: \"pájaro\", italian: \"uccello\", english: \"bird\" },\n      ],\n      Medium: [\n        { chinese: \"宠物\", pinyin: \"chǒngwù\", spanish: \"mascota\", italian: \"animale domestico\", english: \"pet\" },\n        { chinese: \"养\", pinyin: \"yǎng\", spanish: \"criar\", italian: \"allevare\", english: \"raise/keep\" },\n        { chinese: \"动物\", pinyin: \"dòngwù\", spanish: \"animal\", italian: \"animale\", english: \"animal\" },\n        { chinese: \"可爱\", pinyin: \"kě'ài\", spanish: \"lindo\", italian: \"carino\", english: \"cute\" },\n        { chinese: \"喂养\", pinyin: \"wèiyǎng\", spanish: \"alimentar\", italian: \"nutrire\", english: \"feed\" },\n      ],\n      Hard: [\n        { chinese: \"驯养\", pinyin: \"xùnyǎng\", spanish: \"domesticar\", italian: \"addomesticare\", english: \"domesticate\" },\n        { chinese: \"野生动物\", pinyin: \"yěshēng dòngwù\", spanish: \"animal salvaje\", italian: \"animale selvatico\", english: \"wild animal\" },\n        { chinese: \"保护动物\", pinyin: \"bǎohù dòngwù\", spanish: \"proteger animales\", italian: \"proteggere animali\", english: \"protect animals\" },\n        { chinese: \"动物习性\", pinyin: \"dòngwù xíxìng\", spanish: \"comportamiento animal\", italian: \"comportamento animale\", english: \"animal behavior\" },\n        { chinese: \"生态平衡\", pinyin: \"shēngtài pínghéng\", spanish: \"equilibrio ecológico\", italian: \"equilibrio ecologico\", english: \"ecological balance\" },\n        { chinese: \"濒危物种\", pinyin: \"bīnwēi wùzhǒng\", spanish: \"especie en peligro\", italian: \"specie in pericolo\", english: \"endangered species\" },\n        { chinese: \"动物福利\", pinyin: \"dòngwù fúlì\", spanish: \"bienestar animal\", italian: \"benessere animale\", english: \"animal welfare\" },\n        { chinese: \"人与自然\", pinyin: \"rén yǔ zìrán\", spanish: \"hombre y naturaleza\", italian: \"uomo e natura\", english: \"humans and nature\" },\n      ],\n    },\n  },\n  {\n    id: \"clothing\",\n    title: \"Clothing & Fashion\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"衣\", pinyin: \"yī\", spanish: \"ropa\", italian: \"vestiti\", english: \"clothes\" },\n        { chinese: \"穿\", pinyin: \"chuān\", spanish: \"llevar\", italian: \"indossare\", english: \"wear\" },\n        { chinese: \"鞋\", pinyin: \"xié\", spanish: \"zapatos\", italian: \"scarpe\", english: \"shoes\" },\n      ],\n      Medium: [\n        { chinese: \"衣服\", pinyin: \"yīfu\", spanish: \"ropa\", italian: \"vestiti\", english: \"clothes\" },\n        { chinese: \"裤子\", pinyin: \"kùzi\", spanish: \"pantalones\", italian: \"pantaloni\", english: \"pants\" },\n        { chinese: \"裙子\", pinyin: \"qúnzi\", spanish: \"falda\", italian: \"gonna\", english: \"skirt\" },\n        { chinese: \"颜色\", pinyin: \"yánsè\", spanish: \"color\", italian: \"colore\", english: \"color\" },\n        { chinese: \"时尚\", pinyin: \"shíshàng\", spanish: \"moda\", italian: \"moda\", english: \"fashion\" },\n      ],\n      Hard: [\n        { chinese: \"搭配\", pinyin: \"dāpèi\", spanish: \"combinar\", italian: \"abbinare\", english: \"match/coordinate\" },\n        { chinese: \"款式\", pinyin: \"kuǎnshì\", spanish: \"estilo\", italian: \"stile\", english: \"style/design\" },\n        { chinese: \"品味\", pinyin: \"pǐnwèi\", spanish: \"gusto\", italian: \"gusto\", english: \"taste\" },\n        { chinese: \"时尚潮流\", pinyin: \"shíshàng cháoliú\", spanish: \"tendencia de moda\", italian: \"tendenza moda\", english: \"fashion trend\" },\n        { chinese: \"服装设计\", pinyin: \"fúzhuāng shèjì\", spanish: \"diseño de moda\", italian: \"design di moda\", english: \"fashion design\" },\n        { chinese: \"穿衣风格\", pinyin: \"chuānyī fēnggé\", spanish: \"estilo de vestir\", italian: \"stile di abbigliamento\", english: \"dressing style\" },\n        { chinese: \"个人形象\", pinyin: \"gèrén xíngxiàng\", spanish: \"imagen personal\", italian: \"immagine personale\", english: \"personal image\" },\n        { chinese: \"审美观念\", pinyin: \"shěnměi guānniàn\", spanish: \"concepto estético\", italian: \"concetto estetico\", english: \"aesthetic concept\" },\n      ],\n    },\n  },\n  {\n    id: \"holidays\",\n    title: \"Holidays & Celebrations\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"节\", pinyin: \"jié\", spanish: \"festival\", italian: \"festa\", english: \"festival\" },\n        { chinese: \"过\", pinyin: \"guò\", spanish: \"pasar\", italian: \"passare\", english: \"celebrate/pass\" },\n        { chinese: \"年\", pinyin: \"nián\", spanish: \"año\", italian: \"anno\", english: \"year\" },\n      ],\n      Medium: [\n        { chinese: \"节日\", pinyin: \"jiérì\", spanish: \"día festivo\", italian: \"festa\", english: \"holiday\" },\n        { chinese: \"春节\", pinyin: \"chūnjié\", spanish: \"Año Nuevo chino\", italian: \"Capodanno cinese\", english: \"Spring Festival\" },\n        { chinese: \"庆祝\", pinyin: \"qìngzhù\", spanish: \"celebrar\", italian: \"celebrare\", english: \"celebrate\" },\n        { chinese: \"礼物\", pinyin: \"lǐwù\", spanish: \"regalo\", italian: \"regalo\", english: \"gift\" },\n        { chinese: \"团聚\", pinyin: \"tuánjù\", spanish: \"reunirse\", italian: \"riunirsi\", english: \"reunion\" },\n      ],\n      Hard: [\n        { chinese: \"传统\", pinyin: \"chuántǒng\", spanish: \"tradición\", italian: \"tradizione\", english: \"tradition\" },\n        { chinese: \"习俗\", pinyin: \"xísú\", spanish: \"costumbre\", italian: \"usanza\", english: \"custom\" },\n        { chinese: \"欢庆\", pinyin: \"huānqìng\", spanish: \"celebración\", italian: \"festeggiamento\", english: \"celebration\" },\n        { chinese: \"文化传承\", pinyin: \"wénhuà chuánchéng\", spanish: \"herencia cultural\", italian: \"eredità culturale\", english: \"cultural heritage\" },\n        { chinese: \"节日氛围\", pinyin: \"jiérì fēnwéi\", spanish: \"ambiente festivo\", italian: \"atmosfera festiva\", english: \"festive atmosphere\" },\n        { chinese: \"传统美德\", pinyin: \"chuántǒng měidé\", spanish: \"virtud tradicional\", italian: \"virtù tradizionale\", english: \"traditional virtue\" },\n        { chinese: \"欢聚一堂\", pinyin: \"huānjù yìtáng\", spanish: \"reunión familiar\", italian: \"riunione familiare\", english: \"gather together\" },\n        { chinese: \"喜庆吉祥\", pinyin: \"xǐqìng jíxiáng\", spanish: \"festivo y auspicioso\", italian: \"festivo e propizio\", english: \"joyous and auspicious\" },\n      ],\n    },\n  },\n  {\n    id: \"emotions\",\n    title: \"Emotions & Feelings\",\n    vocabulary: {\n      Easy: [\n        { chinese: \"开心\", pinyin: \"kāixīn\", spanish: \"feliz\", italian: \"felice\", english: \"happy\" },\n        { chinese: \"难过\", pinyin: \"nánguò\", spanish: \"triste\", italian: \"triste\", english: \"sad\" },\n        { chinese: \"累\", pinyin: \"lèi\", spanish: \"cansado\", italian: \"stanco\", english: \"tired\" },\n      ],\n      Medium: [\n        { chinese: \"高兴\", pinyin: \"gāoxìng\", spanish: \"contento\", italian: \"contento\", english: \"happy/glad\" },\n        { chinese: \"生气\", pinyin: \"shēngqì\", spanish: \"enojado\", italian: \"arrabbiato\", english: \"angry\" },\n        { chinese: \"紧张\", pinyin: \"jǐnzhāng\", spanish: \"nervioso\", italian: \"nervoso\", english: \"nervous\" },\n        { chinese: \"兴奋\", pinyin: \"xīngfèn\", spanish: \"emocionado\", italian: \"eccitato\", english: \"excited\" },\n        { chinese: \"感觉\", pinyin: \"gǎnjué\", spanish: \"sentir\", italian: \"sentire\", english: \"feel\" },\n      ],\n      Hard: [\n        { chinese: \"情绪\", pinyin: \"qíngxù\", spanish: \"emoción\", italian: \"emozione\", english: \"emotion/mood\" },\n        { chinese: \"心情\", pinyin: \"xīnqíng\", spanish: \"estado de ánimo\", italian: \"umore\", english: \"mood\" },\n        { chinese: \"感动\", pinyin: \"gǎndòng\", spanish: \"conmovido\", italian: \"commosso\", english: \"moved/touched\" },\n        { chinese: \"失望\", pinyin: \"shīwàng\", spanish: \"decepcionado\", italian: \"deluso\", english: \"disappointed\" },\n        { chinese: \"情感表达\", pinyin: \"qínggǎn biǎodá\", spanish: \"expresión emocional\", italian: \"espressione emotiva\", english: \"emotional expression\" },\n        { chinese: \"心理状态\", pinyin: \"xīnlǐ zhuàngtài\", spanish: \"estado psicológico\", italian: \"stato psicologico\", english: \"psychological state\" },\n        { chinese: \"情绪管理\", pinyin: \"qíngxù guǎnlǐ\", spanish: \"gestión emocional\", italian: \"gestione emotiva\", english: \"emotion management\" },\n        { chinese: \"内心感受\", pinyin: \"nèixīn gǎnshòu\", spanish: \"sentimientos internos\", italian: \"sentimenti interiori\", english: \"inner feelings\" },\n      ],\n    },\n  },\n];\n\nexport function getThemeVocabulary(themeId: string, difficulty: \"Beginner\" | \"Easy\" | \"Medium\" | \"Hard\", language: \"Chinese\" | \"Spanish\" | \"Italian\"): string[] {\n  const theme = THEMES.find(t => t.id === themeId);\n  if (!theme) return [];\n\n  // For Beginner mode, use Easy vocabulary (simplest available)\n  const effectiveDifficulty = difficulty === \"Beginner\" ? \"Easy\" : difficulty;\n  const vocabWords = theme.vocabulary[effectiveDifficulty];\n  \n  if (language === \"Chinese\") {\n    return vocabWords.map(w => w.chinese || \"\").filter(Boolean);\n  } else if (language === \"Spanish\") {\n    return vocabWords.map(w => w.spanish || \"\").filter(Boolean);\n  } else if (language === \"Italian\") {\n    return vocabWords.map(w => w.italian || \"\").filter(Boolean);\n  }\n  \n  return [];\n}\n\nexport function getThemeTitle(themeId: string): string {\n  const theme = THEMES.find(t => t.id === themeId);\n  return theme?.title || \"General Conversation\";\n}\n","size_bytes":46062},"server/eloCalculator.ts":{"content":"export type Difficulty = \"Beginner\" | \"Easy\" | \"Medium\" | \"Hard\";\n\ninterface EloResult {\n  newElo: number;\n  eloChange: number;\n  result: \"win\" | \"loss\" | \"draw\";\n}\n\ninterface StreakMultiplier {\n  multiplier: number;\n  dayStreakBonus: number;\n  winStreakBonus: number;\n}\n\n/**\n * Calculate streak multiplier based on day streak and win streak\n * Day streak: +5% per tier (every 3 days), capped at +20% (4 tiers max)\n * Win streak: +10% per tier (every 2 wins), capped at +30% (3 tiers max)\n * Total multiplier capped at 1.5x\n */\nexport function calculateStreakMultiplier(dayStreak: number, winStreak: number): StreakMultiplier {\n  // Day streak tiers: 1 tier per 3 days, max 4 tiers (20%)\n  const dayTiers = Math.min(4, Math.floor(dayStreak / 3));\n  const dayStreakBonus = dayTiers * 0.05;\n  \n  // Win streak tiers: 1 tier per 2 wins, max 3 tiers (30%)\n  const winTiers = Math.min(3, Math.floor(winStreak / 2));\n  const winStreakBonus = winTiers * 0.10;\n  \n  // Calculate total multiplier, capped at 1.5x\n  const multiplier = Math.min(1.5, 1 + dayStreakBonus + winStreakBonus);\n  \n  return {\n    multiplier,\n    dayStreakBonus,\n    winStreakBonus\n  };\n}\n\n/**\n * Calculate K-factor based on Elo rating (Chess.com style)\n * Higher K-factor for lower ratings, lower K-factor for higher ratings\n */\nfunction getKFactor(elo: number): number {\n  if (elo < 1200) return 40;\n  if (elo < 1800) return 32;\n  if (elo < 2400) return 24;\n  return 16;\n}\n\n/**\n * Calculate Elo change based on comparative performance (user vs bot)\n * Win/loss determined by who scores higher\n * Implements Chess.com-style Elo calculation:\n * - Dynamic K-factor based on rating\n * - 300+ Elo difference rule: no gain for winning against much lower opponent, but still lose points\n * - Streak multiplier on wins only\n */\nexport function calculateComparativeElo(\n  userElo: number,\n  botElo: number,\n  userScore: number,\n  botScore: number,\n  dayStreak: number = 0,\n  winStreak: number = 0\n): EloResult & { streakMultiplier?: StreakMultiplier } {\n  // Determine result based on scores\n  let result: \"win\" | \"loss\" | \"draw\";\n  let actualScore: number; // 1 for win, 0 for loss, 0.5 for draw\n  \n  if (userScore > botScore) {\n    result = \"win\";\n    actualScore = 1;\n  } else if (userScore < botScore) {\n    result = \"loss\";\n    actualScore = 0;\n  } else {\n    result = \"draw\";\n    actualScore = 0.5;\n  }\n\n  // Calculate expected score using Elo formula\n  const expectedScore = 1 / (1 + Math.pow(10, (botElo - userElo) / 400));\n\n  // Get dynamic K-factor based on user's Elo\n  const kFactor = getKFactor(userElo);\n\n  // Calculate Elo change\n  let eloChange = Math.round(kFactor * (actualScore - expectedScore));\n\n  // Apply 300+ Elo difference rule (Chess.com style)\n  const eloDifference = userElo - botElo;\n  if (eloDifference >= 300) {\n    // If user's Elo is 300+ higher than opponent\n    if (result === \"win\") {\n      // No Elo gain for beating much weaker opponent\n      eloChange = 0;\n    } else if (result === \"loss\") {\n      // Double the loss penalty for losing to much weaker opponent\n      eloChange = eloChange * 2;\n    }\n  } else if (eloDifference <= -300) {\n    // If user's Elo is 300+ lower than opponent\n    if (result === \"win\") {\n      // Increased Elo gain for beating much stronger opponent\n      eloChange = Math.round(eloChange * 1.5);\n    }\n  }\n\n  // Apply streak multiplier ONLY on wins\n  let streakMultiplier: StreakMultiplier | undefined;\n  if (result === \"win\" && eloChange > 0) {\n    streakMultiplier = calculateStreakMultiplier(dayStreak, winStreak);\n    eloChange = Math.round(eloChange * streakMultiplier.multiplier);\n  }\n\n  const newElo = Math.max(0, userElo + eloChange);\n\n  return {\n    newElo,\n    eloChange,\n    result,\n    streakMultiplier,\n  };\n}\n\n// Legacy function for backward compatibility\nexport function calculateEloChange(\n  currentElo: number,\n  result: \"win\" | \"loss\",\n  difficulty: Difficulty\n): EloResult {\n  const BASE_ELO_CHANGES = {\n    Beginner: 4,\n    Easy: 6,\n    Medium: 8,\n    Hard: 12,\n  };\n  \n  const baseChange = BASE_ELO_CHANGES[difficulty];\n  const eloChange = result === \"win\" ? baseChange : -baseChange;\n  const newElo = Math.max(0, currentElo + eloChange);\n\n  return {\n    newElo,\n    eloChange,\n    result,\n  };\n}\n","size_bytes":4243},"client/src/components/AccentKeyboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface AccentKeyboardProps {\n  language: string;\n  onAccentClick: (accent: string) => void;\n}\n\nconst SPANISH_ACCENTS = [\n  { char: \"á\", label: \"á\" },\n  { char: \"é\", label: \"é\" },\n  { char: \"í\", label: \"í\" },\n  { char: \"ó\", label: \"ó\" },\n  { char: \"ú\", label: \"ú\" },\n  { char: \"ñ\", label: \"ñ\" },\n  { char: \"ü\", label: \"ü\" },\n  { char: \"¿\", label: \"¿\" },\n  { char: \"¡\", label: \"¡\" },\n];\n\nconst ITALIAN_ACCENTS = [\n  { char: \"à\", label: \"à\" },\n  { char: \"è\", label: \"è\" },\n  { char: \"é\", label: \"é\" },\n  { char: \"ì\", label: \"ì\" },\n  { char: \"ò\", label: \"ò\" },\n  { char: \"ù\", label: \"ù\" },\n];\n\nexport default function AccentKeyboard({ language, onAccentClick }: AccentKeyboardProps) {\n  const accents = language === \"Spanish\" ? SPANISH_ACCENTS : language === \"Italian\" ? ITALIAN_ACCENTS : [];\n\n  if (accents.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-1 pb-2\">\n      {accents.map((accent) => (\n        <Button\n          key={accent.char}\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onAccentClick(accent.char)}\n          className=\"h-7 w-7 p-0 text-sm font-medium\"\n          type=\"button\"\n          data-testid={`button-accent-${accent.char}`}\n        >\n          {accent.label}\n        </Button>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1376},"server/botConfig.ts":{"content":"// Bot Elo ranges based on difficulty\nexport function getBotElo(difficulty: string): number {\n  const ranges: Record<string, { min: number; max: number }> = {\n    Beginner: { min: 600, max: 800 },   // Very low Elo for absolute beginners\n    Easy: { min: 800, max: 1000 },\n    Medium: { min: 1100, max: 1300 },\n    Hard: { min: 1300, max: 1600 },\n  };\n\n  const range = ranges[difficulty] || ranges.Medium;\n  // Return a random Elo within the difficulty range\n  return Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;\n}\n\n// Bot target accuracy by difficulty (affects grading expectations)\nexport function getBotTargetAccuracy(difficulty: string): number {\n  const accuracyRanges: Record<string, { min: number; max: number }> = {\n    Beginner: { min: 50, max: 60 }, // Bot performs at 50-60% for Beginner (many mistakes)\n    Easy: { min: 60, max: 70 },     // Bot performs at 60-70% for Easy (beginner level)\n    Medium: { min: 70, max: 80 },   // Bot performs at 70-80% for Medium (intermediate)\n    Hard: { min: 80, max: 90 },     // Bot performs at 80-90% for Hard (advanced)\n  };\n\n  const range = accuracyRanges[difficulty] || accuracyRanges.Medium;\n  return Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;\n}\n","size_bytes":1252},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\n// Configure Neon connection\n// Neon automatically handles connection pooling via serverless architecture\nconst sql = neon(process.env.DATABASE_URL);\n\nexport const db = drizzle(sql, { schema });\n\n// Database connection health monitoring\nlet queryCount = 0;\nlet errorCount = 0;\nlet lastReportTime = Date.now();\n\n// Export stats for monitoring\nexport const dbStats = {\n  getQueryCount: () => queryCount,\n  getErrorCount: () => errorCount,\n  getErrorRate: () => queryCount > 0 ? (errorCount / queryCount) * 100 : 0,\n  incrementQuery: () => queryCount++,\n  incrementError: () => errorCount++,\n};\n\n// Log database health stats periodically (every 5 minutes)\nsetInterval(() => {\n  const now = Date.now();\n  const elapsed = (now - lastReportTime) / 1000 / 60; // minutes\n  \n  if (queryCount > 0 || errorCount > 0) {\n    console.log(`[DB Health] ${Math.round(elapsed)}min - Queries: ${queryCount}, Errors: ${errorCount}, Error Rate: ${dbStats.getErrorRate().toFixed(2)}%`);\n  }\n  \n  lastReportTime = now;\n}, 300000); // 5 minutes\n","size_bytes":1267},"client/src/hooks/useMatchmaking.ts":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\n\ninterface MatchFoundData {\n  matchId: string;\n  opponent: {\n    username: string;\n    elo: number;\n  };\n  topic: string;\n  language: string;\n  difficulty: string;\n  isAI: boolean;\n  startsFirst?: boolean;\n  vocabulary?: any[];\n}\n\ninterface UseMatchmakingOptions {\n  playerId: string;\n  username: string;\n  elo: number;\n  onMatchFound: (data: MatchFoundData) => void;\n}\n\nexport function useMatchmaking({ playerId, username, elo, onMatchFound }: UseMatchmakingOptions) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const isSearchingRef = useRef(false);\n\n  useEffect(() => {\n    // Prevent duplicate connections in StrictMode\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    // Get WebSocket URL based on current location\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/matchmaking`;\n    \n    const ws = new WebSocket(wsUrl);\n    \n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === 'match_found') {\n          setIsSearching(false);\n          isSearchingRef.current = false;\n          onMatchFound({\n            matchId: data.matchId,\n            opponent: data.opponent,\n            topic: data.topic,\n            language: data.language,\n            difficulty: data.difficulty,\n            isAI: data.isAI,\n            startsFirst: data.startsFirst,\n            vocabulary: data.vocabulary, // Pass vocabulary from server\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      setIsSearching(false);\n      isSearchingRef.current = false;\n    };\n\n    wsRef.current = ws;\n\n    return () => {\n      // Send leave_queue before closing if currently searching\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        if (isSearchingRef.current) {\n          wsRef.current.send(JSON.stringify({ type: 'leave_queue' }));\n        }\n        wsRef.current.close();\n      }\n      wsRef.current = null;\n    };\n  }, [onMatchFound]);\n\n  const findMatch = useCallback((language: string, difficulty: string, topic?: string) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      setIsSearching(true);\n      isSearchingRef.current = true;\n      wsRef.current.send(JSON.stringify({\n        type: 'join_queue',\n        playerId,\n        username,\n        elo,\n        language,\n        difficulty,\n        topic, // Optional - only for practice mode\n      }));\n    }\n  }, [playerId, username, elo]);\n\n  const cancelSearch = useCallback(() => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      setIsSearching(false);\n      isSearchingRef.current = false;\n      wsRef.current.send(JSON.stringify({\n        type: 'leave_queue',\n      }));\n    }\n  }, []);\n\n  return {\n    isConnected,\n    isSearching,\n    findMatch,\n    cancelSearch,\n  };\n}\n","size_bytes":3464},"server/matchmaking.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\nimport type { Server } from \"http\";\nimport { storage } from \"./storage\";\n\ninterface Player {\n  id: string;\n  ws: WebSocket;\n  username: string;\n  elo: number;\n  language: string;\n  difficulty: string;\n  topic?: string;\n}\n\ninterface Match {\n  id: string;\n  player1: Player;\n  player2: Player;\n  topic: string;\n  vocabulary: any[];\n  createdAt: number;\n  player1Registered: boolean;\n  player2Registered: boolean;\n}\n\nclass MatchmakingQueue {\n  private queue: Player[] = [];\n  private matches: Map<string, Match> = new Map();\n  private playerSockets: Map<WebSocket, Player> = new Map();\n  private activeMatches: Map<string, Match> = new Map();\n  private playerToMatch: Map<string, string> = new Map();\n  \n  addToQueue(player: Player) {\n    this.queue.push(player);\n    this.playerSockets.set(player.ws, player);\n    console.log(`Player ${player.username} (${player.elo} Elo) joined queue. Queue size: ${this.queue.length}`);\n    \n    // Try to find a match immediately\n    this.tryMatch(player);\n  }\n\n  getPlayerBySocket(ws: WebSocket): Player | undefined {\n    return this.playerSockets.get(ws);\n  }\n\n  updatePlayerSocket(playerId: string, matchId: string, ws: WebSocket) {\n    const match = this.activeMatches.get(matchId);\n    if (!match) {\n      console.error(`Match ${matchId} not found for socket update`);\n      return;\n    }\n\n    // Remove old socket mappings for this player to prevent stale disconnect triggers\n    for (const [socket, player] of Array.from(this.playerSockets.entries())) {\n      if (player.id === playerId) {\n        this.playerSockets.delete(socket);\n        console.log(`Removed old WebSocket mapping for player ${playerId}`);\n      }\n    }\n\n    // Update the player's WebSocket reference and mark as registered\n    if (match.player1.id === playerId) {\n      match.player1.ws = ws;\n      match.player1Registered = true;\n      this.playerSockets.set(ws, match.player1);\n      console.log(`Updated WebSocket for player1 ${playerId} in match ${matchId}`);\n    } else if (match.player2.id === playerId) {\n      match.player2.ws = ws;\n      match.player2Registered = true;\n      this.playerSockets.set(ws, match.player2);\n      console.log(`Updated WebSocket for player2 ${playerId} in match ${matchId}`);\n    }\n  }\n\n  removeFromQueue(ws: WebSocket) {\n    const player = this.playerSockets.get(ws);\n    if (player) {\n      this.queue = this.queue.filter(p => p.id !== player.id);\n      this.playerSockets.delete(ws);\n      console.log(`Player ${player.username} removed from queue. Queue size: ${this.queue.length}`);\n    }\n  }\n\n  private tryMatch(newPlayer: Player) {\n    // Find an opponent with similar Elo (+/- 200) and same language/difficulty\n    const potentialOpponents = this.queue.filter(p => \n      p.id !== newPlayer.id &&\n      p.language === newPlayer.language &&\n      p.difficulty === newPlayer.difficulty &&\n      Math.abs(p.elo - newPlayer.elo) <= 200\n    );\n\n    if (potentialOpponents.length > 0) {\n      // Find the closest Elo match\n      const opponent = potentialOpponents.reduce((closest, current) => {\n        const closestDiff = Math.abs(closest.elo - newPlayer.elo);\n        const currentDiff = Math.abs(current.elo - newPlayer.elo);\n        return currentDiff < closestDiff ? current : closest;\n      });\n\n      // Create a match\n      this.createMatch(newPlayer, opponent);\n    } else {\n      // No match found - wait 10 seconds then assign AI bot\n      setTimeout(() => {\n        // Check if player is still in queue (not matched with someone else)\n        if (this.queue.some(p => p.id === newPlayer.id)) {\n          this.assignAIBot(newPlayer);\n        }\n      }, 10000); // 10 second wait time\n    }\n  }\n\n  private async createMatch(player1: Player, player2: Player) {\n    // Remove both players from queue\n    this.queue = this.queue.filter(p => p.id !== player1.id && p.id !== player2.id);\n\n    // Randomly select topic (or use player's selected topic for practice mode)\n    const topic = player1.topic || this.getRandomTopic();\n\n    // Randomly decide who starts first\n    const player1StartsFirst = Math.random() < 0.5;\n\n    const matchId = `${player1.id}-${player2.id}-${Date.now()}`;\n    \n    // Generate vocabulary once for both players\n    const { generateVocabulary } = await import('./openai.js');\n    const { vocabularyCache } = await import('./vocabularyCache.js');\n    \n    let vocabulary: any[] = [];\n    try {\n      // Check cache first\n      const cachedVocabulary = vocabularyCache.get({ \n        topic, \n        language: player1.language, \n        difficulty: player1.difficulty \n      });\n      \n      if (cachedVocabulary) {\n        vocabulary = cachedVocabulary;\n        console.log(`Cache hit for vocabulary: ${topic}/${player1.language}/${player1.difficulty}`);\n      } else {\n        // Generate new vocabulary\n        vocabulary = await generateVocabulary(topic, player1.language, player1.difficulty as \"Beginner\" | \"Easy\" | \"Medium\" | \"Hard\");\n        vocabularyCache.set({ \n          topic, \n          language: player1.language, \n          difficulty: player1.difficulty \n        }, vocabulary);\n        console.log(`Generated new vocabulary: ${topic}/${player1.language}/${player1.difficulty}`);\n      }\n    } catch (error) {\n      console.error('Failed to generate vocabulary for match:', error);\n      // Continue with empty vocabulary - frontend will handle fallback\n    }\n    \n    const match: Match = {\n      id: matchId,\n      player1,\n      player2,\n      topic,\n      vocabulary,\n      createdAt: Date.now(),\n      player1Registered: false,\n      player2Registered: false,\n    };\n\n    this.matches.set(matchId, match);\n    this.activeMatches.set(matchId, match);\n    this.playerToMatch.set(player1.id, matchId);\n    this.playerToMatch.set(player2.id, matchId);\n\n    // Notify both players with the SAME vocabulary, language, and difficulty\n    // Both players get player1's language/difficulty since that's what the vocabulary was generated for\n    player1.ws.send(JSON.stringify({\n      type: 'match_found',\n      matchId,\n      opponent: {\n        username: player2.username,\n        elo: player2.elo,\n      },\n      topic,\n      vocabulary,\n      language: player1.language,\n      difficulty: player1.difficulty,\n      isAI: false,\n      startsFirst: player1StartsFirst,\n    }));\n\n    player2.ws.send(JSON.stringify({\n      type: 'match_found',\n      matchId,\n      opponent: {\n        username: player1.username,\n        elo: player1.elo,\n      },\n      topic,\n      vocabulary,\n      language: player1.language,  // Use player1's language (matches vocabulary)\n      difficulty: player1.difficulty,  // Use player1's difficulty (matches vocabulary)\n      isAI: false,\n      startsFirst: !player1StartsFirst,\n    }));\n\n    console.log(`Match created: ${player1.username} (${player1.elo}) vs ${player2.username} (${player2.elo}) - ${player1StartsFirst ? player1.username : player2.username} starts first`);\n  }\n\n  relayMessage(playerId: string, message: any) {\n    const matchId = this.playerToMatch.get(playerId);\n    if (!matchId) {\n      console.error(`No active match found for player ${playerId}`);\n      return;\n    }\n\n    const match = this.activeMatches.get(matchId);\n    if (!match) {\n      console.error(`Match ${matchId} not found in active matches`);\n      return;\n    }\n\n    // Determine opponent\n    const isPlayer1 = match.player1.id === playerId;\n    const opponent = isPlayer1 ? match.player2 : match.player1;\n\n    // Relay message to opponent\n    if (opponent.ws.readyState === WebSocket.OPEN) {\n      opponent.ws.send(JSON.stringify(message));\n    }\n  }\n\n  handlePlayerDisconnect(playerId: string, disconnectedWs: WebSocket) {\n    const matchId = this.playerToMatch.get(playerId);\n    if (!matchId) return;\n\n    const match = this.activeMatches.get(matchId);\n    if (!match) return;\n\n    const isPlayer1 = match.player1.id === playerId;\n    const playerRegistered = isPlayer1 ? match.player1Registered : match.player2Registered;\n    const currentPlayerWs = isPlayer1 ? match.player1.ws : match.player2.ws;\n    \n    // Priority 1: If player hasn't registered yet and we're within grace period,\n    // defer the forfeit to give them time to register their duel socket\n    if (!playerRegistered) {\n      const matchAge = Date.now() - match.createdAt;\n      const GRACE_PERIOD = 5000; // 5 seconds\n      \n      if (matchAge < GRACE_PERIOD) {\n        console.log(`Scheduling deferred forfeit check for unregistered player ${playerId} in match ${matchId}`);\n        setTimeout(() => {\n          const stillExists = this.activeMatches.get(matchId);\n          if (!stillExists) {\n            console.log(`Match ${matchId} already cleaned up, skipping deferred forfeit`);\n            return;\n          }\n          \n          const stillUnregistered = isPlayer1 ? !stillExists.player1Registered : !stillExists.player2Registered;\n          if (stillUnregistered) {\n            console.log(`Player ${playerId} never registered, executing deferred forfeit for match ${matchId}`);\n            this.executeForfeit(matchId, playerId);\n          } else {\n            console.log(`Player ${playerId} registered successfully, canceling deferred forfeit`);\n          }\n        }, GRACE_PERIOD);\n        return;\n      }\n    }\n    \n    // Priority 2: If disconnecting socket is not the active socket and player is registered,\n    // this is a stale socket closing - ignore it\n    if (currentPlayerWs !== disconnectedWs && playerRegistered) {\n      console.log(`Ignoring disconnect from stale socket for registered player ${playerId} in match ${matchId}`);\n      return;\n    }\n\n    // Priority 3: Active socket disconnecting (or unregistered after grace period) - execute forfeit\n    this.executeForfeit(matchId, playerId);\n  }\n\n  private executeForfeit(matchId: string, playerId: string) {\n    const match = this.activeMatches.get(matchId);\n    if (!match) return;\n\n    const isPlayer1 = match.player1.id === playerId;\n    const opponent = isPlayer1 ? match.player2 : match.player1;\n\n    if (opponent.ws.readyState === WebSocket.OPEN) {\n      opponent.ws.send(JSON.stringify({\n        type: 'opponent_disconnected',\n        reason: 'Player disconnected'\n      }));\n    }\n\n    // Clean up match\n    this.activeMatches.delete(matchId);\n    this.playerToMatch.delete(match.player1.id);\n    this.playerToMatch.delete(match.player2.id);\n\n    console.log(`Player ${playerId} disconnected from match ${matchId}`);\n  }\n\n  endMatch(matchId: string) {\n    const match = this.activeMatches.get(matchId);\n    if (!match) return;\n\n    // Clean up\n    this.activeMatches.delete(matchId);\n    this.playerToMatch.delete(match.player1.id);\n    this.playerToMatch.delete(match.player2.id);\n\n    console.log(`Match ${matchId} ended`);\n  }\n\n  private async assignAIBot(player: Player) {\n    // Remove from queue\n    this.queue = this.queue.filter(p => p.id !== player.id);\n\n    // Use player's topic or random\n    const topic = player.topic || this.getRandomTopic();\n\n    // Generate random bot name\n    const botName = this.getRandomBotName();\n\n    // Get difficulty-appropriate bot Elo\n    const { getBotElo } = await import('./botConfig.js');\n    const botElo = getBotElo(player.difficulty);\n\n    // Notify player - they'll play against AI\n    player.ws.send(JSON.stringify({\n      type: 'match_found',\n      matchId: `ai-${player.id}-${Date.now()}`,\n      opponent: {\n        username: botName,\n        elo: botElo, // Bot Elo reflects difficulty level\n      },\n      topic,\n      language: player.language,\n      difficulty: player.difficulty,\n      isAI: true,\n    }));\n\n    console.log(`AI bot (${botName}, ${botElo} Elo) assigned to ${player.username} for ${player.difficulty} difficulty`);\n  }\n\n  private getRandomTopic(): string {\n    const topics = [\n      'Travel', 'Food & Dining', 'Business & Work', 'Family & Relationships',\n      'Technology', 'Health & Fitness', 'Education', 'Entertainment',\n      'Nature & Environment', 'Shopping', 'Sports', 'Weather',\n      'Social Events', 'Music & Arts', 'Hobbies & Leisure', 'Home & Daily Life',\n      'Transportation & Commute', 'Animals & Pets', 'Clothing & Fashion',\n      'Holidays & Celebrations', 'Emotions & Feelings'\n    ];\n    return topics[Math.floor(Math.random() * topics.length)];\n  }\n\n  private getRandomBotName(): string {\n    const botNames = [\n      'Emma Chen', 'Lucas Rodriguez', 'Sofia Martinez', 'Wei Zhang',\n      'Aisha Patel', 'Nikolai Petrov', 'Isabella Rossi', 'Kenji Tanaka',\n      'Leila Hassan', 'Marcus Johnson', 'Yuki Yamamoto', 'Fatima Al-Rashid',\n      'Diego Silva', 'Amara Okafor', 'Sven Andersson', 'Priya Sharma',\n      'Alexandre Dubois', 'Maya Cohen', 'Rashid Ahmed', 'Nina Kowalski',\n      'Carlos Mendoza', 'Ingrid Larsson', 'Omar Hassan', 'Valentina Romano',\n      'Jin Park', 'Aaliyah Thompson', 'Anton Volkov', 'Zara Ibrahim'\n    ];\n    return botNames[Math.floor(Math.random() * botNames.length)];\n  }\n}\n\nexport function setupMatchmaking(httpServer: Server) {\n  const wss = new WebSocketServer({ \n    server: httpServer,\n    path: '/matchmaking'\n  });\n\n  const queue = new MatchmakingQueue();\n  \n  // Connection tracking and limits\n  const MAX_CONNECTIONS = 500; // Maximum concurrent WebSocket connections\n  let activeConnections = 0;\n\n  wss.on('connection', (ws: WebSocket) => {\n    // Check connection limit\n    activeConnections++;\n    if (activeConnections > MAX_CONNECTIONS) {\n      console.warn(`Connection limit reached: ${activeConnections}/${MAX_CONNECTIONS}`);\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Server is currently at capacity. Please try again in a few moments.'\n      }));\n      ws.close(1008, 'Server at capacity');\n      activeConnections--;\n      return;\n    }\n    \n    console.log(`New WebSocket connection (${activeConnections}/${MAX_CONNECTIONS} active)`);\n\n    ws.on('message', async (data: Buffer) => {\n      try {\n        const message = JSON.parse(data.toString());\n\n        if (message.type === 'join_queue') {\n          // Check if user has permission for Medium/Hard difficulty\n          const difficulty = message.difficulty;\n          const playerId = message.playerId || `player-${Date.now()}`;\n          \n          // Server-side validation for Medium/Hard access\n          if (difficulty === 'Medium' || difficulty === 'Hard') {\n            try {\n              // Check if this is a real user (not a guest session ID)\n              const user = await storage.getUser(playerId);\n              \n              if (!user) {\n                // Guest users can't play Medium/Hard\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Sign in required for Medium/Hard modes'\n                }));\n                return;\n              }\n              \n              // Check if user is premium\n              if (user.isPremium !== 1) {\n                // Check daily limit\n                const today = new Date().toISOString().split('T')[0];\n                const accessCheck = await storage.checkDailyMediumHardLimit(playerId, today);\n                \n                if (!accessCheck.allowed) {\n                  ws.send(JSON.stringify({\n                    type: 'error',\n                    message: `You've reached the daily limit of ${accessCheck.limit} ${difficulty} matches. Upgrade to Premium for unlimited access!`\n                  }));\n                  return;\n                }\n                \n                // Track this match attempt (increment count)\n                await storage.incrementDailyMediumHardCount(playerId, today);\n              }\n            } catch (error) {\n              console.error('Error checking difficulty access:', error);\n              // Allow the match in case of database errors (fail open for better UX)\n            }\n          }\n          \n          const player: Player = {\n            id: playerId,\n            ws,\n            username: message.username || 'Guest',\n            elo: message.elo || 1000,\n            language: message.language,\n            difficulty: message.difficulty,\n            topic: message.topic, // Optional - only for practice mode\n          };\n          queue.addToQueue(player);\n        }\n\n        if (message.type === 'leave_queue') {\n          queue.removeFromQueue(ws);\n        }\n\n        if (message.type === 'register_match_socket') {\n          // Update the player's WebSocket reference for this match\n          queue.updatePlayerSocket(message.playerId, message.matchId, ws);\n        }\n\n        if (message.type === 'player_message') {\n          // Relay message to opponent\n          queue.relayMessage(message.playerId, {\n            type: 'opponent_message',\n            text: message.text,\n            sender: message.sender,\n            timestamp: message.timestamp\n          });\n        }\n\n        if (message.type === 'player_turn_complete') {\n          // Relay turn completion to opponent\n          queue.relayMessage(message.playerId, {\n            type: 'opponent_turn_complete',\n            turnPhase: message.turnPhase\n          });\n        }\n\n        if (message.type === 'match_end') {\n          // End the match\n          queue.endMatch(message.matchId);\n        }\n\n        if (message.type === 'player_forfeit') {\n          // Notify opponent of forfeit\n          queue.relayMessage(message.playerId, {\n            type: 'opponent_forfeit'\n          });\n          queue.endMatch(message.matchId);\n        }\n\n        if (message.type === 'player_grading_result') {\n          // Relay player's grading result to opponent\n          queue.relayMessage(message.playerId, {\n            type: 'opponent_grading_result',\n            gradingResult: message.gradingResult\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      // Decrement connection counter\n      activeConnections--;\n      \n      // Get player info before cleanup\n      const player = queue.getPlayerBySocket(ws);\n      \n      // Clean up player from queue when connection closes\n      queue.removeFromQueue(ws);\n      \n      // Handle active match disconnection (pass the socket to check if it's the active one)\n      if (player) {\n        queue.handlePlayerDisconnect(player.id, ws);\n      }\n      \n      console.log(`WebSocket connection closed - player removed from queue (${activeConnections}/${MAX_CONNECTIONS} active)`);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      \n      // Decrement connection counter\n      activeConnections--;\n      \n      // Get player info before cleanup\n      const player = queue.getPlayerBySocket(ws);\n      \n      // Also remove from queue on error\n      queue.removeFromQueue(ws);\n      \n      // Handle active match disconnection (pass the socket to check if it's the active one)\n      if (player) {\n        queue.handlePlayerDisconnect(player.id, ws);\n      }\n      \n      console.log(`WebSocket error cleanup complete (${activeConnections}/${MAX_CONNECTIONS} active)`);\n    });\n  });\n\n  console.log('WebSocket matchmaking server initialized on /matchmaking');\n\n  return wss;\n}\n","size_bytes":19165},"client/src/components/AIReview.tsx":{"content":"import { useState } from \"react\";\nimport { ArrowLeft, Brain, MessageSquare, AlertCircle, CheckCircle2, Lightbulb, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { GradingResult, MessageAnalysis } from \"@shared/schema\";\nimport TextWithPinyin from \"@/components/TextWithPinyin\";\n\ninterface Message {\n  sender: string;\n  text: string;\n  timestamp: number;\n}\n\ninterface AIReviewProps {\n  messages?: Message[];\n  gradingResult?: GradingResult;\n  topic?: string;\n  language?: string;\n  onBack?: () => void;\n}\n\nexport default function AIReview({\n  messages = [],\n  gradingResult,\n  topic = \"Conversation\",\n  language = \"Chinese\",\n  onBack\n}: AIReviewProps) {\n  const [expandedMessageIndex, setExpandedMessageIndex] = useState<number | null>(null);\n  \n  // Extract premium message-by-message feedback if available\n  const messageAnalysis = (gradingResult?.messageAnalysis as MessageAnalysis[]) || [];\n  const hasPremiumFeedback = messageAnalysis.length > 0;\n  \n  const getFeedbackForMessage = (index: number): MessageAnalysis | undefined => {\n    return messageAnalysis.find(feedback => feedback.messageIndex === index);\n  };\n\n  const toggleMessageExpansion = (index: number) => {\n    setExpandedMessageIndex(expandedMessageIndex === index ? null : index);\n  };\n  \n  return (\n    <div className=\"flex items-center justify-center min-h-[calc(100vh-4rem)] p-4\">\n      <div className=\"w-full max-w-4xl\">\n        <Card className=\"border-card-border\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                onClick={onBack}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n              <div className=\"flex-1\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"w-6 h-6\" />\n                  AI Review & Analysis\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Topic: {topic} · Language: {language}\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {/* Conversation History with Premium Feedback */}\n            <div>\n              <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n                <MessageSquare className=\"w-4 h-4\" />\n                Conversation {hasPremiumFeedback && <Badge variant=\"secondary\" className=\"text-xs\">Premium Analysis</Badge>}\n              </h3>\n              <div className=\"space-y-3 max-h-[600px] overflow-y-auto\">\n                {messages.map((message, idx) => {\n                  const isUser = message.sender === \"user\";\n                  const feedback = getFeedbackForMessage(idx);\n                  const isExpanded = expandedMessageIndex === idx;\n                  const hasFeedback = feedback && (\n                    (feedback.grammarCorrections && feedback.grammarCorrections.length > 0) ||\n                    (feedback.vocabularySuggestions && feedback.vocabularySuggestions.length > 0) ||\n                    (feedback.sentenceImprovement && typeof feedback.sentenceImprovement === 'object') ||\n                    (feedback.strengths && feedback.strengths.length > 0) ||\n                    (feedback.improvements && feedback.improvements.length > 0)\n                  );\n\n                  return (\n                    <div key={idx}>\n                      <div\n                        className={`p-3 rounded-md ${\n                          isUser\n                            ? \"bg-primary/10 ml-8\"\n                            : \"bg-muted mr-8\"\n                        }`}\n                        data-testid={`message-${idx}`}\n                      >\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant={isUser ? \"default\" : \"secondary\"} className=\"text-xs\">\n                            {isUser ? \"You\" : \"Bot\"}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm\">{message.text}</p>\n\n                        {/* Show AI Feedback button for user messages with premium feedback */}\n                        {isUser && hasFeedback && (\n                          <div className=\"mt-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => toggleMessageExpansion(idx)}\n                              className=\"text-xs\"\n                              data-testid={`button-toggle-feedback-${idx}`}\n                            >\n                              {isExpanded ? \"Hide\" : \"Show\"} AI Feedback\n                              {!isExpanded && (\n                                <Badge variant=\"outline\" className=\"ml-2 text-xs px-2\">\n                                  {(feedback.grammarCorrections?.length || 0) + (feedback.vocabularySuggestions?.length || 0) + (feedback.sentenceImprovement && typeof feedback.sentenceImprovement === 'object' ? 1 : 0)} insights\n                                </Badge>\n                              )}\n                            </Button>\n\n                            {isExpanded && feedback && (\n                              <Card className=\"mt-2 border-primary/20 bg-primary/5\">\n                                <CardContent className=\"p-4 space-y-3\">\n                                  {/* Grammar Corrections */}\n                                  {feedback.grammarCorrections && feedback.grammarCorrections.length > 0 && (\n                                    <div>\n                                      <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-3\">\n                                        <AlertCircle className=\"w-4 h-4 text-destructive\" />\n                                        Grammar Analysis ({feedback.grammarCorrections.length})\n                                      </h4>\n                                      <div className=\"space-y-3\">\n                                        {feedback.grammarCorrections.map((correction, i) => (\n                                          <div key={i} className=\"text-xs bg-background/50 p-3 rounded-md border border-border/50\">\n                                            <div className=\"flex items-start gap-2 mb-2\">\n                                              <Badge variant=\"destructive\" className=\"text-[10px] px-1.5 py-0 h-4\">#{i + 1}</Badge>\n                                              <div className=\"flex-1\">\n                                                <div className=\"flex items-center gap-2 mb-1\">\n                                                  <span className=\"text-destructive line-through\">\n                                                    {language === \"Chinese\" ? (\n                                                      <TextWithPinyin text={correction.original} language={language} />\n                                                    ) : (\n                                                      correction.original\n                                                    )}\n                                                  </span>\n                                                  <span className=\"text-muted-foreground\">→</span>\n                                                  <span className=\"text-success font-medium\">\n                                                    {language === \"Chinese\" ? (\n                                                      <TextWithPinyin text={correction.corrected} language={language} />\n                                                    ) : (\n                                                      correction.corrected\n                                                    )}\n                                                  </span>\n                                                </div>\n                                                <p className=\"text-muted-foreground mt-1\">{correction.explanation}</p>\n                                              </div>\n                                            </div>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  )}\n\n                                  {/* Native Speaker Comparison */}\n                                  {feedback.sentenceImprovement && (\n                                    <div>\n                                      <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-2\">\n                                        <TrendingUp className=\"w-4 h-4 text-primary\" />\n                                        Native Speaker Comparison\n                                      </h4>\n                                      <div className=\"text-xs bg-background/50 p-3 rounded-md border border-border/50\">\n                                        <p className=\"text-muted-foreground mb-2\">How a native speaker would say it:</p>\n                                        <p className=\"font-medium\">\n                                          {language === \"Chinese\" ? (\n                                            <TextWithPinyin text={feedback.sentenceImprovement.improved} language={language} />\n                                          ) : (\n                                            feedback.sentenceImprovement.improved\n                                          )}\n                                        </p>\n                                      </div>\n                                    </div>\n                                  )}\n\n                                  {/* Vocabulary Enhancement */}\n                                  {feedback.vocabularySuggestions && feedback.vocabularySuggestions.length > 0 && (\n                                    <div>\n                                      <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-3\">\n                                        <CheckCircle2 className=\"w-4 h-4 text-success\" />\n                                        Vocabulary Enhancement ({feedback.vocabularySuggestions.length})\n                                      </h4>\n                                      <div className=\"space-y-2\">\n                                        {feedback.vocabularySuggestions.map((suggestion, i) => (\n                                          <div key={i} className=\"text-xs bg-background/50 p-3 rounded-md border border-border/50\">\n                                            <div className=\"flex items-start gap-2\">\n                                              <Badge variant=\"default\" className=\"text-[10px] px-1.5 py-0 h-4\">#{i + 1}</Badge>\n                                              <div className=\"flex-1\">\n                                                <div className=\"flex items-center gap-2 mb-1\">\n                                                  <span className=\"font-medium\">\n                                                    {language === \"Chinese\" ? (\n                                                      <TextWithPinyin text={suggestion.betterAlternative} language={language} />\n                                                    ) : (\n                                                      suggestion.betterAlternative\n                                                    )}\n                                                  </span>\n                                                  {suggestion.word && (\n                                                    <>\n                                                      <span className=\"text-muted-foreground text-[10px]\">instead of</span>\n                                                      <span className=\"text-muted-foreground\">\n                                                        {language === \"Chinese\" ? (\n                                                          <TextWithPinyin text={suggestion.word} language={language} />\n                                                        ) : (\n                                                          suggestion.word\n                                                        )}\n                                                      </span>\n                                                    </>\n                                                  )}\n                                                </div>\n                                                <p className=\"text-muted-foreground\">{suggestion.reason}</p>\n                                              </div>\n                                            </div>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  )}\n\n                                  {/* Strengths */}\n                                  {feedback.strengths && feedback.strengths.length > 0 && (\n                                    <div>\n                                      <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-2\">\n                                        <CheckCircle2 className=\"w-4 h-4 text-success\" />\n                                        Strengths ({feedback.strengths.length})\n                                      </h4>\n                                      <div className=\"space-y-1\">\n                                        {feedback.strengths.map((strength, i) => (\n                                          <div key={i} className=\"text-xs bg-success/5 p-2 rounded-md flex items-start gap-2\">\n                                            <span className=\"text-success\">•</span>\n                                            <span className=\"text-muted-foreground\">{strength}</span>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  )}\n\n                                  {/* Study Recommendations */}\n                                  {feedback.improvements && feedback.improvements.length > 0 && (\n                                    <div>\n                                      <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-2\">\n                                        <Lightbulb className=\"w-4 h-4 text-primary\" />\n                                        Study Recommendations ({feedback.improvements.length})\n                                      </h4>\n                                      <div className=\"space-y-1\">\n                                        {feedback.improvements.map((improvement, i) => (\n                                          <div key={i} className=\"text-xs bg-primary/5 p-2 rounded-md flex items-start gap-2\">\n                                            <span className=\"text-primary\">•</span>\n                                            <span className=\"text-muted-foreground\">{improvement}</span>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  )}\n                                </CardContent>\n                              </Card>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* General AI Feedback for non-premium users */}\n            {!hasPremiumFeedback && gradingResult && (\n              <div>\n                <h3 className=\"font-semibold mb-3\">AI Feedback & Suggestions</h3>\n                <div className=\"space-y-2\">\n                  {Array.isArray(gradingResult.feedback) ? (\n                    gradingResult.feedback.map((item, idx) => (\n                      <div key={idx} className=\"p-3 bg-muted rounded-md text-sm\" data-testid={`feedback-${idx}`}>\n                        {item}\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"p-3 bg-muted rounded-md text-sm\">\n                      {gradingResult.feedback}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Performance Summary */}\n            {gradingResult && (\n              <div>\n                <h3 className=\"font-semibold mb-3\">Performance Summary</h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  <div className=\"p-3 bg-muted rounded-md text-center\">\n                    <div className=\"text-2xl font-mono font-bold\">{gradingResult.grammar}%</div>\n                    <div className=\"text-xs text-muted-foreground\">Grammar</div>\n                  </div>\n                  <div className=\"p-3 bg-muted rounded-md text-center\">\n                    <div className=\"text-2xl font-mono font-bold\">{gradingResult.fluency}%</div>\n                    <div className=\"text-xs text-muted-foreground\">Fluency</div>\n                  </div>\n                  <div className=\"p-3 bg-muted rounded-md text-center\">\n                    <div className=\"text-2xl font-mono font-bold\">{gradingResult.vocabulary}%</div>\n                    <div className=\"text-xs text-muted-foreground\">Vocabulary</div>\n                  </div>\n                  <div className=\"p-3 bg-muted rounded-md text-center\">\n                    <div className=\"text-2xl font-mono font-bold\">{gradingResult.naturalness}%</div>\n                    <div className=\"text-xs text-muted-foreground\">Naturalness</div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <Button className=\"w-full\" onClick={onBack} data-testid=\"button-back-to-results\">\n              Back to Results\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18302},"server/vocabularyCache.ts":{"content":"interface VocabularyWord {\n  word: string;\n  type: \"noun\" | \"verb\" | \"adjective\";\n  english: string;\n  pinyin?: string;\n}\n\ninterface CacheKey {\n  topic: string;\n  language: string;\n  difficulty: string;\n}\n\ninterface CacheEntry {\n  vocabulary: VocabularyWord[];\n  timestamp: number;\n}\n\nclass VocabularyCache {\n  private cache: Map<string, CacheEntry[]> = new Map();\n  private readonly MAX_SETS_PER_KEY = 5; // Store up to 5 different vocab sets per topic/language/difficulty\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\n  private getCacheKey(key: CacheKey): string {\n    return `${key.topic}:${key.language}:${key.difficulty}`;\n  }\n\n  /**\n   * Get a random vocabulary set from cache, or return null if cache is empty/expired\n   */\n  get(key: CacheKey): VocabularyWord[] | null {\n    const cacheKey = this.getCacheKey(key);\n    const entries = this.cache.get(cacheKey);\n\n    if (!entries || entries.length === 0) {\n      return null;\n    }\n\n    // Filter out expired entries\n    const now = Date.now();\n    const validEntries = entries.filter(\n      entry => now - entry.timestamp < this.CACHE_DURATION\n    );\n\n    if (validEntries.length === 0) {\n      this.cache.delete(cacheKey);\n      return null;\n    }\n\n    // Update cache with only valid entries\n    if (validEntries.length !== entries.length) {\n      this.cache.set(cacheKey, validEntries);\n    }\n\n    // Return a random vocabulary set\n    const randomIndex = Math.floor(Math.random() * validEntries.length);\n    return validEntries[randomIndex].vocabulary;\n  }\n\n  /**\n   * Add a new vocabulary set to the cache\n   */\n  set(key: CacheKey, vocabulary: VocabularyWord[]): void {\n    const cacheKey = this.getCacheKey(key);\n    const entries = this.cache.get(cacheKey) || [];\n\n    // Add new entry\n    entries.push({\n      vocabulary,\n      timestamp: Date.now()\n    });\n\n    // Keep only the most recent MAX_SETS_PER_KEY entries\n    if (entries.length > this.MAX_SETS_PER_KEY) {\n      entries.sort((a, b) => b.timestamp - a.timestamp);\n      entries.splice(this.MAX_SETS_PER_KEY);\n    }\n\n    this.cache.set(cacheKey, entries);\n  }\n\n  /**\n   * Get cache statistics for monitoring\n   */\n  getStats(): {\n    totalKeys: number;\n    totalSets: number;\n    keyDetails: { key: string; sets: number }[];\n  } {\n    const keyDetails: { key: string; sets: number }[] = [];\n    let totalSets = 0;\n\n    this.cache.forEach((entries, key) => {\n      keyDetails.push({ key, sets: entries.length });\n      totalSets += entries.length;\n    });\n\n    return {\n      totalKeys: this.cache.size,\n      totalSets,\n      keyDetails\n    };\n  }\n\n  /**\n   * Clear expired entries from cache\n   */\n  cleanup(): void {\n    const now = Date.now();\n    const keysToDelete: string[] = [];\n\n    this.cache.forEach((entries, key) => {\n      const validEntries = entries.filter(\n        entry => now - entry.timestamp < this.CACHE_DURATION\n      );\n\n      if (validEntries.length === 0) {\n        keysToDelete.push(key);\n      } else if (validEntries.length !== entries.length) {\n        this.cache.set(key, validEntries);\n      }\n    });\n\n    keysToDelete.forEach(key => this.cache.delete(key));\n  }\n}\n\n// Export singleton instance\nexport const vocabularyCache = new VocabularyCache();\n\n// Run cleanup every 6 hours\nsetInterval(() => vocabularyCache.cleanup(), 6 * 60 * 60 * 1000);\n","size_bytes":3327},"client/src/utils/guestRateLimit.ts":{"content":"// Guest rate limiting utility\nconst GUEST_MATCH_LIMIT = 5; // 5 matches per day for guests\nconst STORAGE_KEY = 'guestMatchData';\n\ninterface GuestMatchData {\n  count: number;\n  resetDate: string; // ISO date string\n}\n\nexport function getGuestMatchData(): GuestMatchData {\n  const stored = localStorage.getItem(STORAGE_KEY);\n  if (!stored) {\n    const newData = { count: 0, resetDate: getTomorrowDate() };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(newData));\n    return newData;\n  }\n  \n  try {\n    const data: GuestMatchData = JSON.parse(stored);\n    \n    // Check if we need to reset (new day)\n    const resetDate = new Date(data.resetDate);\n    const now = new Date();\n    \n    if (now >= resetDate) {\n      // Reset for new day and persist immediately\n      const newData = { count: 0, resetDate: getTomorrowDate() };\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newData));\n      return newData;\n    }\n    \n    return data;\n  } catch {\n    const newData = { count: 0, resetDate: getTomorrowDate() };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(newData));\n    return newData;\n  }\n}\n\nexport function incrementGuestMatches(): void {\n  const data = getGuestMatchData();\n  data.count += 1;\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n}\n\nexport function canGuestPlayMatch(): boolean {\n  const data = getGuestMatchData();\n  return data.count < GUEST_MATCH_LIMIT;\n}\n\nexport function getRemainingGuestMatches(): number {\n  const data = getGuestMatchData();\n  return Math.max(0, GUEST_MATCH_LIMIT - data.count);\n}\n\nexport function getGuestMatchLimit(): number {\n  return GUEST_MATCH_LIMIT;\n}\n\nfunction getTomorrowDate(): string {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  tomorrow.setHours(0, 0, 0, 0);\n  return tomorrow.toISOString();\n}\n","size_bytes":1810},"client/src/components/Friends.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus, Check, X, Users, Inbox, Swords, Circle } from \"lucide-react\";\nimport type { Friend, User } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface FriendWithUser extends Friend {\n  friendUser: User;\n  friendStats?: {\n    elo: number;\n    wins: number;\n    losses: number;\n  };\n}\n\ninterface FriendRequest extends Friend {\n  requesterUser: User;\n}\n\nexport default function Friends() {\n  const [friendUsername, setFriendUsername] = useState(\"\");\n  const [selectedFriendForInvite, setSelectedFriendForInvite] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Fetch friends list\n  const { data: friends = [], isLoading: friendsLoading } = useQuery<FriendWithUser[]>({\n    queryKey: [\"/api/friends\"],\n  });\n\n  // Fetch pending friend requests\n  const { data: requests = [], isLoading: requestsLoading } = useQuery<FriendRequest[]>({\n    queryKey: [\"/api/friends/requests\"],\n  });\n\n  // Fetch pending match challenges\n  const { data: challenges = [] } = useQuery<Array<any>>({\n    queryKey: [\"/api/friends/challenges\"],\n  });\n\n  // Send friend request mutation\n  const sendRequestMutation = useMutation({\n    mutationFn: async (username: string) => {\n      return await apiRequest(\"POST\", \"/api/friends/request\", {\n        friendUsername: username,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Friend request sent!\",\n        description: \"Your friend request has been sent successfully.\",\n      });\n      setFriendUsername(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send request\",\n        description: error.message || \"Could not send friend request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Accept friend request mutation\n  const acceptMutation = useMutation({\n    mutationFn: async (friendshipId: string) => {\n      return await apiRequest(\"POST\", `/api/friends/accept/${friendshipId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/requests\"] });\n      toast({\n        title: \"Friend request accepted!\",\n        description: \"You are now friends.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to accept request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reject friend request mutation\n  const rejectMutation = useMutation({\n    mutationFn: async (friendshipId: string) => {\n      return await apiRequest(\"POST\", `/api/friends/reject/${friendshipId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/requests\"] });\n      toast({\n        title: \"Friend request rejected\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to reject request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove friend mutation\n  const removeMutation = useMutation({\n    mutationFn: async (friendshipId: string) => {\n      return await apiRequest(\"DELETE\", `/api/friends/${friendshipId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n      toast({\n        title: \"Friend removed\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to remove friend\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendRequest = () => {\n    if (!friendUsername.trim()) {\n      toast({\n        title: \"Username required\",\n        description: \"Please enter a username\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendRequestMutation.mutate(friendUsername);\n  };\n\n  // Create private match invite mutation for a specific friend\n  // Create friend challenge mutation\n  const createChallengeMutation = useMutation({\n    mutationFn: async (friendId: string) => {\n      return await apiRequest(\"POST\", \"/api/friends/challenge\", {\n        friendId,\n        language: \"Chinese\",\n        difficulty: \"Medium\",\n        topic: null,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Challenge sent!\",\n        description: \"Your friend will be notified of your challenge.\",\n      });\n      setSelectedFriendForInvite(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to send challenge\",\n        variant: \"destructive\",\n      });\n      setSelectedFriendForInvite(null);\n    },\n  });\n\n  // Accept challenge mutation\n  const acceptChallengeMutation = useMutation({\n    mutationFn: async (challengeId: string) => {\n      return await apiRequest(\"POST\", `/api/friends/challenges/${challengeId}/accept`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/challenges\"] });\n      toast({\n        title: \"Challenge accepted!\",\n        description: \"Redirecting to match...\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to accept challenge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reject challenge mutation\n  const rejectChallengeMutation = useMutation({\n    mutationFn: async (challengeId: string) => {\n      return await apiRequest(\"POST\", `/api/friends/challenges/${challengeId}/reject`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/challenges\"] });\n      toast({\n        title: \"Challenge ignored\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to reject challenge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleChallengeFriend = (friendId: string) => {\n    // Find the friend to check their online status\n    const friend = friends.find(f => f.friendUser.id === friendId);\n    \n    // Show informational message if friend is offline, but still send the challenge\n    if (friend && !isOnline(friend.friendUser)) {\n      toast({\n        title: \"Challenge sent\",\n        description: \"This player is currently offline. They'll receive your challenge when they return.\",\n        variant: \"default\",\n      });\n    }\n    \n    setSelectedFriendForInvite(friendId);\n    createChallengeMutation.mutate(friendId);\n  };\n\n  const isOnline = (user: User) => {\n    if (!user.lastSeenAt) return false;\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n    return new Date(user.lastSeenAt) > fiveMinutesAgo && user.isOnline === 1;\n  };\n\n  const getLastSeenText = (user: User) => {\n    if (isOnline(user)) return \"Online\";\n    if (!user.lastSeenAt) return \"Never\";\n    return `Last seen ${formatDistanceToNow(new Date(user.lastSeenAt), { addSuffix: true })}`;\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Friends</h1>\n        <p className=\"text-muted-foreground\">Connect with other language learners</p>\n      </div>\n\n      {/* Add Friend Section */}\n      <Card className=\"mb-6 border-card-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <UserPlus className=\"w-5 h-5\" />\n            Add Friend\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Enter email address\"\n              value={friendUsername}\n              onChange={(e) => setFriendUsername(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && handleSendRequest()}\n              data-testid=\"input-friend-username\"\n            />\n            <Button\n              onClick={handleSendRequest}\n              disabled={sendRequestMutation.isPending}\n              data-testid=\"button-send-friend-request\"\n            >\n              {sendRequestMutation.isPending ? \"Sending...\" : \"Send Request\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Match Challenges */}\n      {challenges.length > 0 && (\n        <Card className=\"mb-6 border-card-border border-primary/30\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Swords className=\"w-5 h-5 text-primary\" />\n              Match Challenges ({challenges.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {challenges.map((challenge) => (\n                <div\n                  key={challenge.id}\n                  className=\"flex items-center justify-between p-3 rounded-md bg-muted/50\"\n                  data-testid={`challenge-card-${challenge.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarFallback className=\"bg-primary/10 text-primary font-bold\">\n                        {(challenge.creatorUser.firstName || challenge.creatorUser.email || \"?\")\n                          .slice(0, 2)\n                          .toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium\">{challenge.creatorUser.firstName || challenge.creatorUser.email}</div>\n                      <div className=\"text-xs text-muted-foreground flex gap-2 mt-1\">\n                        <Badge variant=\"outline\" className=\"text-xs\">{challenge.language}</Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">{challenge.difficulty}</Badge>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"default\"\n                      onClick={() => acceptChallengeMutation.mutate(challenge.id)}\n                      disabled={acceptChallengeMutation.isPending}\n                      data-testid={`button-accept-challenge-${challenge.id}`}\n                    >\n                      Accept\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => rejectChallengeMutation.mutate(challenge.id)}\n                      disabled={rejectChallengeMutation.isPending}\n                      data-testid={`button-reject-challenge-${challenge.id}`}\n                    >\n                      Ignore\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Pending Friend Requests */}\n      {requests.length > 0 && (\n        <Card className=\"mb-6 border-card-border\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Inbox className=\"w-5 h-5\" />\n              Pending Requests ({requests.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {requests.map((request) => (\n                <div\n                  key={request.id}\n                  className=\"flex items-center justify-between p-3 rounded-md bg-muted/50\"\n                  data-testid={`friend-request-${request.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarFallback className=\"bg-primary/10 text-primary font-bold\">\n                        {(request.requesterUser.firstName || request.requesterUser.email || \"?\")\n                          .slice(0, 2)\n                          .toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium\">\n                        {request.requesterUser.firstName || request.requesterUser.email}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {request.requesterUser.email}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"default\"\n                      onClick={() => acceptMutation.mutate(request.id)}\n                      disabled={acceptMutation.isPending}\n                      data-testid={`button-accept-${request.id}`}\n                    >\n                      <Check className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => rejectMutation.mutate(request.id)}\n                      disabled={rejectMutation.isPending}\n                      data-testid={`button-reject-${request.id}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Friends List */}\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            My Friends ({friends.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"max-h-[600px] overflow-y-auto\">\n          {friendsLoading && <div className=\"text-center py-8\">Loading friends...</div>}\n          \n          {!friendsLoading && friends.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No friends yet. Send a friend request to get started!\n            </div>\n          )}\n\n          {!friendsLoading && friends.length > 0 && (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {friends.map((friend) => {\n                const online = isOnline(friend.friendUser);\n                return (\n                  <div\n                    key={friend.id}\n                    className=\"flex flex-col sm:flex-row items-start sm:justify-between p-3 sm:p-4 rounded-md border border-card-border hover-elevate cursor-pointer transition-all gap-3\"\n                    data-testid={`friend-card-${friend.id}`}\n                  >\n                    <div className=\"flex items-start gap-3 flex-1 min-w-0 w-full sm:w-auto overflow-hidden\">\n                      <div className=\"relative flex-shrink-0\">\n                        <Avatar className=\"w-10 h-10 sm:w-10 sm:h-10\">\n                          <AvatarFallback className=\"bg-primary/10 text-primary font-bold text-sm\">\n                            {(friend.friendUser.firstName || friend.friendUser.email || \"?\")\n                              .slice(0, 2)\n                              .toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <Circle \n                          className={`absolute -bottom-0.5 -right-0.5 w-3 h-3 ${\n                            online ? \"fill-success text-success\" : \"fill-muted-foreground/40 text-muted-foreground/40\"\n                          }`}\n                        />\n                      </div>\n                      <div className=\"flex-1 min-w-0 overflow-hidden\">\n                        <div className=\"font-medium text-sm sm:text-base flex items-center gap-2 flex-wrap\">\n                          <span className=\"truncate\">{friend.friendUser.firstName || friend.friendUser.email}</span>\n                          {online && (\n                            <Badge variant=\"outline\" className=\"text-[10px] sm:text-xs bg-success/10 text-success border-success/20 flex-shrink-0 px-1.5 py-0\">\n                              Online\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-muted-foreground truncate\">\n                          {friend.friendUser.email}\n                        </div>\n                        <div className=\"text-[10px] sm:text-xs text-muted-foreground mt-1 truncate\">\n                          {getLastSeenText(friend.friendUser)}\n                        </div>\n                        {friend.friendStats && (\n                          <div className=\"text-[10px] sm:text-xs text-muted-foreground mt-2 flex gap-2 sm:gap-3 flex-wrap\">\n                            <span className=\"truncate\">ELO: <span className=\"font-mono font-semibold text-foreground\">{friend.friendStats.elo}</span></span>\n                            <span className=\"text-success flex-shrink-0\">{friend.friendStats.wins}W</span>\n                            <span className=\"text-destructive flex-shrink-0\">{friend.friendStats.losses}L</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex sm:flex-col flex-row gap-2 w-full sm:w-auto flex-shrink-0\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"default\"\n                        onClick={() => handleChallengeFriend(friend.friendUser.id)}\n                        disabled={createChallengeMutation.isPending && selectedFriendForInvite === friend.friendUser.id}\n                        data-testid={`button-challenge-${friend.id}`}\n                        className=\"flex-1 sm:flex-initial\"\n                      >\n                        <Swords className=\"w-4 h-4 sm:mr-1\" />\n                        <span className=\"hidden sm:inline\">Challenge</span>\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => removeMutation.mutate(friend.id)}\n                        disabled={removeMutation.isPending}\n                        data-testid={`button-remove-${friend.id}`}\n                        className=\"flex-1 sm:flex-initial\"\n                      >\n                        <X className=\"w-4 h-4 sm:mr-1\" />\n                        <span className=\"hidden sm:inline\">Remove</span>\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18771},"client/src/lib/sounds.ts":{"content":"// Sound effects utility using Web Audio API\nclass SoundManager {\n  private audioContext: AudioContext | null = null;\n  private enabled: boolean = true;\n\n  constructor() {\n    // Initialize audio context on first user interaction\n    if (typeof window !== 'undefined') {\n      this.enabled = localStorage.getItem('soundEnabled') !== 'false';\n    }\n  }\n\n  private getAudioContext(): AudioContext {\n    if (!this.audioContext) {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    }\n    return this.audioContext;\n  }\n\n  // Resume audio context (call this from a user interaction)\n  async resumeAudio(): Promise<void> {\n    const ctx = this.getAudioContext();\n    if (ctx.state === 'suspended') {\n      try {\n        await ctx.resume();\n      } catch (err) {\n        console.error('Failed to resume audio context:', err);\n      }\n    }\n  }\n\n  private playTone(frequency: number, duration: number, volume: number = 0.3, type: OscillatorType = 'sine') {\n    if (!this.enabled) return;\n\n    try {\n      const ctx = this.getAudioContext();\n      \n      // Auto-resume if suspended (best effort)\n      if (ctx.state === 'suspended') {\n        this.resumeAudio();\n      }\n\n      const oscillator = ctx.createOscillator();\n      const gainNode = ctx.createGain();\n\n      oscillator.connect(gainNode);\n      gainNode.connect(ctx.destination);\n\n      oscillator.frequency.value = frequency;\n      oscillator.type = type;\n\n      gainNode.gain.setValueAtTime(volume, ctx.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + duration);\n\n      oscillator.start(ctx.currentTime);\n      oscillator.stop(ctx.currentTime + duration);\n    } catch (error) {\n      console.error('Error playing sound:', error);\n    }\n  }\n\n  // Victory sound - ascending notes\n  playWin() {\n    const notes = [523.25, 659.25, 783.99, 1046.50]; // C5, E5, G5, C6\n    notes.forEach((freq, i) => {\n      setTimeout(() => this.playTone(freq, 0.2, 0.2), i * 100);\n    });\n  }\n\n  // Loss sound - descending notes\n  playLoss() {\n    const notes = [523.25, 493.88, 440.00, 392.00]; // C5, B4, A4, G4\n    notes.forEach((freq, i) => {\n      setTimeout(() => this.playTone(freq, 0.3, 0.15, 'triangle'), i * 150);\n    });\n  }\n\n  // Match start sound\n  playMatchStart() {\n    this.playTone(440.00, 0.15, 0.2); // A4\n    setTimeout(() => this.playTone(523.25, 0.15, 0.2), 150); // C5\n  }\n\n  // Button click sound\n  playClick() {\n    this.playTone(800, 0.05, 0.1, 'square');\n  }\n\n  // Message sent sound\n  playMessageSent() {\n    this.playTone(659.25, 0.1, 0.15); // E5\n  }\n\n  // Turn complete sound\n  playTurnComplete() {\n    this.playTone(523.25, 0.15, 0.2); // C5\n    setTimeout(() => this.playTone(659.25, 0.15, 0.2), 100); // E5\n  }\n\n  // Win streak achievement sound\n  playStreak() {\n    const notes = [659.25, 783.99, 1046.50]; // E5, G5, C6\n    notes.forEach((freq, i) => {\n      setTimeout(() => this.playTone(freq, 0.2, 0.2, 'sine'), i * 80);\n    });\n  }\n\n  // Daily streak achievement sound\n  playDailyStreak() {\n    const notes = [523.25, 659.25, 783.99, 1046.50, 1318.51]; // C5, E5, G5, C6, E6\n    notes.forEach((freq, i) => {\n      setTimeout(() => this.playTone(freq, 0.15, 0.2, 'sine'), i * 60);\n    });\n  }\n\n  // Premium upgrade celebration sound - triumphant fanfare\n  playPremiumCelebration() {\n    const notes = [\n      { freq: 523.25, time: 0, duration: 0.15 },    // C5\n      { freq: 659.25, time: 100, duration: 0.15 },  // E5\n      { freq: 783.99, time: 200, duration: 0.15 },  // G5\n      { freq: 1046.50, time: 300, duration: 0.2 },  // C6\n      { freq: 1318.51, time: 450, duration: 0.25 }, // E6\n      { freq: 1568.00, time: 600, duration: 0.3 },  // G6\n    ];\n    notes.forEach(({ freq, time, duration }) => {\n      setTimeout(() => this.playTone(freq, duration, 0.25, 'sine'), time);\n    });\n  }\n\n  // Error sound\n  playError() {\n    this.playTone(200, 0.3, 0.2, 'sawtooth');\n  }\n\n  // Time warning sound (5 seconds left)\n  playTimeWarning() {\n    this.playTone(880, 0.1, 0.15);\n  }\n\n  // Enable/disable sounds\n  setEnabled(enabled: boolean) {\n    this.enabled = enabled;\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('soundEnabled', enabled.toString());\n    }\n  }\n\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n}\n\nexport const soundManager = new SoundManager();\n","size_bytes":4347},"client/src/hooks/use-sound.ts":{"content":"import { soundManager } from '@/lib/sounds';\n\nexport function useSound() {\n  return {\n    playWin: () => soundManager.playWin(),\n    playLoss: () => soundManager.playLoss(),\n    playMatchStart: () => soundManager.playMatchStart(),\n    playClick: () => soundManager.playClick(),\n    playMessageSent: () => soundManager.playMessageSent(),\n    playTurnComplete: () => soundManager.playTurnComplete(),\n    playStreak: () => soundManager.playStreak(),\n    playDailyStreak: () => soundManager.playDailyStreak(),\n    playPremiumCelebration: () => soundManager.playPremiumCelebration(),\n    playError: () => soundManager.playError(),\n    playTimeWarning: () => soundManager.playTimeWarning(),\n    setEnabled: (enabled: boolean) => soundManager.setEnabled(enabled),\n    isEnabled: () => soundManager.isEnabled(),\n    resumeAudio: () => soundManager.resumeAudio(),\n  };\n}\n","size_bytes":862},"client/src/components/StreakNotification.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { Flame, Zap, X } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport { useEffect } from \"react\";\n\ninterface StreakNotificationProps {\n  type: \"win\" | \"daily\";\n  streakCount: number;\n  isVisible: boolean;\n  onClose: () => void;\n  playSound?: () => void;\n}\n\nexport function StreakNotification({ type, streakCount, isVisible, onClose, playSound }: StreakNotificationProps) {\n  const isWinStreak = type === \"win\";\n  const Icon = isWinStreak ? Flame : Zap;\n  const title = isWinStreak ? \"Win Streak!\" : \"Daily Streak!\";\n  const message = isWinStreak \n    ? `${streakCount} consecutive wins! Keep it up!`\n    : `${streakCount} days in a row! Come back tomorrow!`;\n\n  // Play sound when notification appears\n  useEffect(() => {\n    if (isVisible && playSound) {\n      playSound();\n    }\n  }, [isVisible, playSound]);\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: -100, scale: 0.3 }}\n          animate={{ \n            opacity: 1, \n            y: 0, \n            scale: 1,\n          }}\n          exit={{ opacity: 0, scale: 0.5, transition: { duration: 0.2 } }}\n          transition={{ \n            type: \"spring\",\n            stiffness: 500,\n            damping: 25\n          }}\n          className=\"fixed top-20 left-1/2 -translate-x-1/2 z-[100]\"\n          data-testid=\"notification-streak\"\n        >\n          <Card className={cn(\n            \"bg-card shadow-2xl min-w-[300px]\",\n            isWinStreak ? \"border-orange-500/50\" : \"border-blue-500/50\"\n          )}>\n            <div className=\"p-4 flex items-center gap-4\">\n              <motion.div\n                animate={{ \n                  rotate: [0, -10, 10, -10, 10, 0],\n                  scale: [1, 1.2, 1, 1.2, 1],\n                }}\n                transition={{ \n                  duration: 0.6,\n                  ease: \"easeInOut\",\n                  times: [0, 0.2, 0.4, 0.6, 0.8, 1]\n                }}\n                className={cn(\n                  \"w-14 h-14 rounded-xl flex items-center justify-center\",\n                  isWinStreak ? \"bg-orange-500/10\" : \"bg-blue-500/10\"\n                )}\n              >\n                <Icon className={cn(\n                  \"w-8 h-8\",\n                  isWinStreak ? \"text-orange-500\" : \"text-blue-500\"\n                )} />\n              </motion.div>\n              \n              <div className=\"flex-1\">\n                <div className=\"font-bold text-lg\">{title}</div>\n                <div className=\"text-sm text-muted-foreground\">{message}</div>\n              </div>\n\n              <button\n                onClick={onClose}\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"button-close-streak-notification\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </Card>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":3049},"client/src/components/MatchDetails.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { X, CheckCircle2, AlertCircle, Lightbulb, Trophy, TrendingUp, MessageSquare, BookOpen } from \"lucide-react\";\nimport type { Match, Message, MessageAnalysis } from \"@shared/schema\";\nimport TextWithPinyin from \"@/components/TextWithPinyin\";\n\ninterface MatchDetailsProps {\n  match: Match;\n  onClose: () => void;\n  language?: string;\n}\n\nexport default function MatchDetails({ match, onClose, language = \"Chinese\" }: MatchDetailsProps) {\n  const [expandedMessageIndex, setExpandedMessageIndex] = useState<number | null>(null);\n  \n  const conversation = (match.conversation as Message[]) || [];\n  const feedbackData = match.detailedFeedback as any;\n  const detailedFeedback = (feedbackData?.messageAnalysis as MessageAnalysis[]) || [];\n  const generalFeedback = (feedbackData?.generalFeedback as string[]) || [];\n  \n  const getFeedbackForMessage = (index: number): MessageAnalysis | undefined => {\n    return detailedFeedback.find(feedback => feedback.messageIndex === index);\n  };\n\n  const toggleMessageExpansion = (index: number) => {\n    setExpandedMessageIndex(expandedMessageIndex === index ? null : index);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-4xl h-[90vh] flex flex-col\">\n        <CardHeader className=\"border-b border-card-border flex flex-row items-center justify-between flex-shrink-0\">\n          <div>\n            <CardTitle className=\"text-2xl font-bold\">Match Details</CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {match.topic || \"Unknown Topic\"} • {match.difficulty} • {match.language}\n            </p>\n          </div>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            data-testid=\"button-close-match-details\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 overflow-y-auto p-0\">\n          <div className=\"p-6 space-y-6\">\n              {/* Match Summary */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 rounded-md bg-muted/50\">\n                  <Trophy className=\"w-5 h-5 mx-auto mb-2 text-primary\" />\n                  <div className=\"font-bold text-lg\">{match.overallScore}</div>\n                  <div className=\"text-xs text-muted-foreground\">Overall Score</div>\n                </div>\n                <div className=\"text-center p-4 rounded-md bg-muted/50\">\n                  <TrendingUp className=\"w-5 h-5 mx-auto mb-2 text-success\" />\n                  <div className=\"font-bold text-lg\">{match.grammarScore}</div>\n                  <div className=\"text-xs text-muted-foreground\">Grammar</div>\n                </div>\n                <div className=\"text-center p-4 rounded-md bg-muted/50\">\n                  <MessageSquare className=\"w-5 h-5 mx-auto mb-2 text-blue-500\" />\n                  <div className=\"font-bold text-lg\">{match.fluencyScore}</div>\n                  <div className=\"text-xs text-muted-foreground\">Fluency</div>\n                </div>\n                <div className=\"text-center p-4 rounded-md bg-muted/50\">\n                  <BookOpen className=\"w-5 h-5 mx-auto mb-2 text-purple-500\" />\n                  <div className=\"font-bold text-lg\">{match.vocabularyScore}</div>\n                  <div className=\"text-xs text-muted-foreground\">Vocabulary</div>\n                </div>\n              </div>\n\n              {/* Conversation with Feedback */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <AlertCircle className=\"w-5 h-5\" />\n                  Conversation & AI Feedback\n                </h3>\n                \n                {conversation.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    No conversation data available for this match.\n                  </p>\n                )}\n\n                {conversation.map((message, index) => {\n                  const feedback = getFeedbackForMessage(index);\n                  const isUser = message.sender === \"user\";\n                  const isExpanded = expandedMessageIndex === index;\n                  const hasFeedback = feedback && (\n                    (feedback.grammarCorrections && feedback.grammarCorrections.length > 0) ||\n                    (feedback.vocabularySuggestions && feedback.vocabularySuggestions.length > 0) ||\n                    feedback.sentenceImprovement ||\n                    (feedback.strengths && feedback.strengths.length > 0) ||\n                    (feedback.improvements && feedback.improvements.length > 0)\n                  );\n\n                  return (\n                    <div\n                      key={index}\n                      className={`flex gap-3 ${isUser ? \"justify-end\" : \"justify-start\"}`}\n                    >\n                      <div className={`flex gap-3 max-w-[85%] ${isUser ? \"flex-row-reverse\" : \"flex-row\"}`}>\n                        <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                          <AvatarFallback className={isUser ? \"bg-primary/10 text-primary\" : \"bg-muted\"}>\n                            {isUser ? \"You\" : match.opponent.slice(0, 2).toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n\n                        <div className=\"flex-1\">\n                          <div\n                            className={`rounded-lg p-3 ${\n                              isUser \n                                ? \"bg-primary/10 border border-primary/20\" \n                                : \"bg-muted border border-card-border\"\n                            }`}\n                          >\n                            {language === \"Chinese\" ? (\n                              <TextWithPinyin text={message.text} language={language} />\n                            ) : (\n                              <p className=\"text-sm\">{message.text}</p>\n                            )}\n                          </div>\n\n                          {isUser && hasFeedback && (\n                            <div className=\"mt-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => toggleMessageExpansion(index)}\n                                className=\"text-xs\"\n                                data-testid={`button-toggle-feedback-${index}`}\n                              >\n                                {isExpanded ? \"Hide\" : \"Show\"} AI Feedback\n                                {!isExpanded && (\n                                  <Badge variant=\"outline\" className=\"ml-2 text-xs px-2\">\n                                    {(feedback.grammarCorrections?.length || 0) + (feedback.vocabularySuggestions?.length || 0) + (feedback.sentenceImprovement ? 1 : 0)} insights\n                                  </Badge>\n                                )}\n                              </Button>\n\n                              {isExpanded && feedback && (\n                                <Card className=\"mt-2 border-primary/20 bg-primary/5\">\n                                  <CardContent className=\"p-4 space-y-3\">\n                                    {/* Grammar Corrections */}\n                                    {feedback.grammarCorrections && feedback.grammarCorrections.length > 0 && (\n                                      <div>\n                                        <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-3\">\n                                          <AlertCircle className=\"w-4 h-4 text-destructive\" />\n                                          Grammar Analysis ({feedback.grammarCorrections.length})\n                                        </h4>\n                                        <div className=\"space-y-3\">\n                                          {feedback.grammarCorrections.map((correction, i) => (\n                                            <div key={i} className=\"text-xs bg-background/50 p-3 rounded-md border border-border/50\">\n                                              <div className=\"flex items-start gap-2 mb-2\">\n                                                <Badge variant=\"destructive\" className=\"text-[10px] px-1.5 py-0 h-4\">#{i + 1}</Badge>\n                                                <div className=\"flex-1\">\n                                                  <div className=\"flex items-center gap-2 mb-1\">\n                                                    <span className=\"text-destructive line-through\">\n                                                      {language === \"Chinese\" ? (\n                                                        <TextWithPinyin text={correction.original} language={language} />\n                                                      ) : (\n                                                        correction.original\n                                                      )}\n                                                    </span>\n                                                    <span className=\"text-muted-foreground\">→</span>\n                                                    <span className=\"text-success font-medium\">\n                                                      {language === \"Chinese\" ? (\n                                                        <TextWithPinyin text={correction.corrected} language={language} />\n                                                      ) : (\n                                                        correction.corrected\n                                                      )}\n                                                    </span>\n                                                  </div>\n                                                  <p className=\"text-muted-foreground leading-relaxed mt-2 pl-2 border-l-2 border-muted\">\n                                                    {correction.explanation}\n                                                  </p>\n                                                </div>\n                                              </div>\n                                            </div>\n                                          ))}\n                                        </div>\n                                      </div>\n                                    )}\n\n                                    {/* Sentence Improvement */}\n                                    {feedback.sentenceImprovement && (\n                                      <div>\n                                        <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-3\">\n                                          <Lightbulb className=\"w-4 h-4 text-blue-500\" />\n                                          Native Speaker Comparison\n                                        </h4>\n                                        <div className=\"text-xs bg-gradient-to-br from-blue-500/5 to-blue-500/10 p-4 rounded-md border border-blue-500/20 space-y-3\">\n                                          <div>\n                                            <div className=\"flex items-center gap-2 mb-1\">\n                                              <Badge variant=\"outline\" className=\"text-[10px] px-1.5 py-0 h-4\">Your version</Badge>\n                                            </div>\n                                            <div className=\"mt-1 p-2.5 bg-muted/50 rounded border border-border/50\">\n                                              {language === \"Chinese\" ? (\n                                                <TextWithPinyin text={feedback.sentenceImprovement.original} language={language} />\n                                              ) : (\n                                                feedback.sentenceImprovement.original\n                                              )}\n                                            </div>\n                                          </div>\n                                          <div>\n                                            <div className=\"flex items-center gap-2 mb-1\">\n                                              <Badge className=\"text-[10px] px-1.5 py-0 h-4 bg-success/90\">Native version</Badge>\n                                            </div>\n                                            <div className=\"mt-1 p-2.5 bg-success/10 rounded border border-success/30 font-medium\">\n                                              {language === \"Chinese\" ? (\n                                                <TextWithPinyin text={feedback.sentenceImprovement.improved} language={language} />\n                                              ) : (\n                                                feedback.sentenceImprovement.improved\n                                              )}\n                                            </div>\n                                          </div>\n                                          <div className=\"pt-2 border-t border-blue-500/20\">\n                                            <span className=\"text-blue-600 dark:text-blue-400 font-medium block mb-1\">Why this is better:</span>\n                                            <p className=\"text-muted-foreground leading-relaxed\">\n                                              {feedback.sentenceImprovement.explanation}\n                                            </p>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    )}\n\n                                    {/* Vocabulary Suggestions */}\n                                    {feedback.vocabularySuggestions && feedback.vocabularySuggestions.length > 0 && (\n                                      <div>\n                                        <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-3\">\n                                          <Lightbulb className=\"w-4 h-4 text-amber-500\" />\n                                          Vocabulary Enhancement ({feedback.vocabularySuggestions.length})\n                                        </h4>\n                                        <div className=\"space-y-3\">\n                                          {feedback.vocabularySuggestions.map((suggestion, i) => (\n                                            <div key={i} className=\"text-xs bg-background/50 p-3 rounded-md border border-border/50\">\n                                              <div className=\"flex items-start gap-2 mb-2\">\n                                                <Badge variant=\"outline\" className=\"text-[10px] px-1.5 py-0 h-4 border-amber-500/30\">#{i + 1}</Badge>\n                                                <div className=\"flex-1\">\n                                                  <div className=\"flex items-center gap-2 mb-1\">\n                                                    <span className=\"text-muted-foreground\">\n                                                      {language === \"Chinese\" ? (\n                                                        <TextWithPinyin text={suggestion.word} language={language} />\n                                                      ) : (\n                                                        suggestion.word\n                                                      )}\n                                                    </span>\n                                                    <span className=\"text-muted-foreground\">→</span>\n                                                    <span className=\"text-amber-600 dark:text-amber-400 font-medium\">\n                                                      {language === \"Chinese\" ? (\n                                                        <TextWithPinyin text={suggestion.betterAlternative} language={language} />\n                                                      ) : (\n                                                        suggestion.betterAlternative\n                                                      )}\n                                                    </span>\n                                                  </div>\n                                                  <p className=\"text-muted-foreground leading-relaxed mt-2 pl-2 border-l-2 border-muted\">\n                                                    {suggestion.reason}\n                                                  </p>\n                                                </div>\n                                              </div>\n                                            </div>\n                                          ))}\n                                        </div>\n                                      </div>\n                                    )}\n\n                                    {/* Strengths */}\n                                    {feedback.strengths && feedback.strengths.length > 0 && (\n                                      <div className=\"bg-success/5 p-3 rounded-md border border-success/20\">\n                                        <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-2\">\n                                          <CheckCircle2 className=\"w-4 h-4 text-success\" />\n                                          Strengths ({feedback.strengths.length})\n                                        </h4>\n                                        <ul className=\"text-xs space-y-2\">\n                                          {feedback.strengths.map((strength, i) => (\n                                            <li key={i} className=\"flex items-start gap-2\">\n                                              <CheckCircle2 className=\"w-3 h-3 text-success mt-0.5 flex-shrink-0\" />\n                                              <span className=\"leading-relaxed\">{strength}</span>\n                                            </li>\n                                          ))}\n                                        </ul>\n                                      </div>\n                                    )}\n\n                                    {/* Improvements */}\n                                    {feedback.improvements && feedback.improvements.length > 0 && (\n                                      <div className=\"bg-primary/5 p-3 rounded-md border border-primary/20\">\n                                        <h4 className=\"text-sm font-semibold flex items-center gap-2 mb-2\">\n                                          <TrendingUp className=\"w-4 h-4 text-primary\" />\n                                          Study Recommendations ({feedback.improvements.length})\n                                        </h4>\n                                        <ul className=\"text-xs space-y-2\">\n                                          {feedback.improvements.map((improvement, i) => (\n                                            <li key={i} className=\"flex items-start gap-2\">\n                                              <TrendingUp className=\"w-3 h-3 text-primary mt-0.5 flex-shrink-0\" />\n                                              <span className=\"leading-relaxed\">{improvement}</span>\n                                            </li>\n                                          ))}\n                                        </ul>\n                                      </div>\n                                    )}\n                                  </CardContent>\n                                </Card>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":20210},"client/src/pages/Subscribe.tsx":{"content":"// Stripe subscription page (from blueprint:javascript_stripe)\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, Loader2, Crown } from \"lucide-react\";\nimport { PremiumWelcomeModal } from \"@/components/PremiumWelcomeModal\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error, paymentIntent } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/subscribe?payment=success`,\n      },\n      redirect: 'if_required',\n    });\n\n    setIsProcessing(false);\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else if (paymentIntent && paymentIntent.status === 'succeeded') {\n      // Payment succeeded without redirect - trigger success state\n      window.history.pushState({}, '', '/subscribe?payment=success');\n      window.location.reload();\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-subscribe\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={!stripe || isProcessing}\n        data-testid=\"button-subscribe-submit\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          'Subscribe to Premium'\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Subscribe() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\n  const [showPremiumModal, setShowPremiumModal] = useState(false);\n  const { toast } = useToast();\n  const { playPremiumCelebration } = useSound();\n\n  useEffect(() => {\n    // Check if returning from successful payment\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('payment') === 'success') {\n      setPaymentSuccess(true);\n      setIsLoading(false);\n      setShowPremiumModal(true);\n      playPremiumCelebration();\n      toast({\n        title: \"Payment Successful!\",\n        description: \"Welcome to Verbio Premium! Your account has been upgraded.\",\n      });\n      return;\n    }\n\n    // Create subscription as soon as the page loads\n    apiRequest(\"POST\", \"/api/create-subscription\")\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error('Failed to create subscription');\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error('Subscription error:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to initialize payment. Please try again.\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n      });\n  }, [toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center space-y-4\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto text-primary\" />\n          <p className=\"text-muted-foreground\">{paymentSuccess ? 'Processing your upgrade...' : 'Loading payment form...'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (paymentSuccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <Card className=\"max-w-md w-full\" data-testid=\"card-payment-success\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-accent/20\">\n              <Crown className=\"h-6 w-6 text-accent\" />\n            </div>\n            <CardTitle>Payment Successful!</CardTitle>\n            <CardDescription>\n              Welcome to Verbio Premium. Your account has been upgraded.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>✓ Unlimited Medium and Hard matches</p>\n              <p>✓ Custom topic selection in Practice Mode</p>\n              <p>✓ Detailed AI feedback on every message</p>\n            </div>\n            <p className=\"text-xs text-muted-foreground text-center\">\n              Redirecting to home in a moment...\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Unable to Load Payment</CardTitle>\n            <CardDescription>\n              We couldn't initialize the payment form. Please try again later.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-4\" data-testid=\"page-subscribe\">\n      <PremiumWelcomeModal \n        isOpen={showPremiumModal} \n        onClose={() => {\n          setShowPremiumModal(false);\n          window.location.href = '/';\n        }} \n      />\n      \n      <div className=\"max-w-2xl mx-auto space-y-8\">\n        {/* Premium Features */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-3xl\">Upgrade to Verbio Premium</CardTitle>\n            <CardDescription className=\"text-lg\">\n              Unlock unlimited learning potential\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold\">$9.99</div>\n              <div className=\"text-muted-foreground\">per month</div>\n            </div>\n\n            <div className=\"space-y-3\">\n              {[\n                'Unlimited Medium & Hard difficulty matches',\n                'Advanced AI feedback with detailed corrections',\n                'Topic selection in practice mode',\n                'Priority matchmaking',\n                'Detailed performance analytics',\n              ].map((feature, index) => (\n                <div key={index} className=\"flex items-start gap-3\">\n                  <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n                  <span>{feature}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Information</CardTitle>\n            <CardDescription>\n              Secure payment processed by Stripe\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Elements stripe={stripePromise} options={{ clientSecret }}>\n              <SubscribeForm />\n            </Elements>\n          </CardContent>\n        </Card>\n\n        <p className=\"text-center text-sm text-muted-foreground\">\n          By subscribing, you agree to our Terms of Service. Cancel anytime from your profile settings.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8350},"server/types.d.ts":{"content":"// Type definitions for Express with Replit Auth\ndeclare namespace Express {\n  interface User {\n    claims?: {\n      sub: string;\n      email?: string;\n      name?: string;\n      [key: string]: any;\n    };\n    access_token?: string;\n    refresh_token?: string;\n    expires_at?: number;\n  }\n}\n","size_bytes":292},"client/src/pages/AdminWhitelist.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Trash2, Plus, Mail, Shield } from \"lucide-react\";\n\ntype WhitelistEntry = {\n  id: string;\n  email: string;\n  addedBy: string | null;\n  createdAt: string;\n};\n\nexport default function AdminWhitelist() {\n  const [newEmail, setNewEmail] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: whitelistData, isLoading } = useQuery<{ whitelist: WhitelistEntry[] }>({\n    queryKey: [\"/api/admin/whitelist\"],\n  });\n\n  const addMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/whitelist/add\", { email });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/whitelist\"] });\n      setNewEmail(\"\");\n      toast({\n        title: \"Email added\",\n        description: \"Email has been added to the premium whitelist\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add email to whitelist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/whitelist/remove\", { email });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/whitelist\"] });\n      toast({\n        title: \"Email removed\",\n        description: \"Email has been removed from the premium whitelist\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove email from whitelist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAdd = () => {\n    if (!newEmail.trim()) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter an email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addMutation.mutate(newEmail.trim());\n  };\n\n  const handleRemove = (email: string) => {\n    removeMutation.mutate(email);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center gap-3 mb-8\">\n          <Shield className=\"w-8 h-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold\">Premium Whitelist Admin</h1>\n        </div>\n\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"w-5 h-5\" />\n              Add Email to Whitelist\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-3\">\n              <Input\n                type=\"email\"\n                placeholder=\"user@example.com\"\n                value={newEmail}\n                onChange={(e) => setNewEmail(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") {\n                    handleAdd();\n                  }\n                }}\n                data-testid=\"input-email\"\n              />\n              <Button\n                onClick={handleAdd}\n                disabled={addMutation.isPending}\n                data-testid=\"button-add\"\n              >\n                {addMutation.isPending ? \"Adding...\" : \"Add\"}\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-3\">\n              Users with whitelisted emails will automatically receive premium access when they sign in.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Mail className=\"w-5 h-5\" />\n              Whitelisted Emails ({whitelistData?.whitelist.length || 0})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <p className=\"text-muted-foreground\">Loading...</p>\n            ) : whitelistData?.whitelist.length === 0 ? (\n              <p className=\"text-muted-foreground\">No emails in whitelist</p>\n            ) : (\n              <div className=\"space-y-2\">\n                {whitelistData?.whitelist.map((entry) => (\n                  <div\n                    key={entry.id}\n                    className=\"flex items-center justify-between p-3 rounded-lg border hover-elevate\"\n                    data-testid={`whitelist-entry-${entry.email}`}\n                  >\n                    <div>\n                      <p className=\"font-medium\">{entry.email}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Added {new Date(entry.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleRemove(entry.email)}\n                      disabled={removeMutation.isPending}\n                      data-testid={`button-remove-${entry.email}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 text-destructive\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 p-4 rounded-lg bg-muted/50\">\n          <h3 className=\"font-semibold mb-2\">How it works:</h3>\n          <ul className=\"text-sm text-muted-foreground space-y-1 list-disc list-inside\">\n            <li>Add email addresses to the whitelist</li>\n            <li>When a user signs in with a whitelisted email, they automatically get premium access</li>\n            <li>No payment or Stripe subscription required</li>\n            <li>This feature is disabled in production for security</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6254},"client/src/pages/SignIn.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Chrome, UserCircle } from \"lucide-react\";\n\nexport default function SignIn() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: typeof registerForm) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGoogleLogin = () => {\n    window.location.href = \"/api/login/google\";\n  };\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerForm);\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl grid md:grid-cols-2 gap-8 items-center\">\n        {/* Left side - Auth forms */}\n        <Card className=\"w-full\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl\">Welcome to Verbio</CardTitle>\n            <CardDescription>Sign in to start your language learning journey</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"google\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"google\" data-testid=\"tab-google\">\n                  <Chrome className=\"w-4 h-4 mr-2\" />\n                  Google\n                </TabsTrigger>\n                <TabsTrigger value=\"credentials\" data-testid=\"tab-credentials\">\n                  <UserCircle className=\"w-4 h-4 mr-2\" />\n                  Credentials\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"google\" className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Sign in with your Google account for quick access\n                </p>\n                <Button\n                  onClick={handleGoogleLogin}\n                  className=\"w-full\"\n                  size=\"lg\"\n                  data-testid=\"button-google-signin\"\n                >\n                  <Chrome className=\"w-5 h-5 mr-2\" />\n                  Continue with Google\n                </Button>\n              </TabsContent>\n\n              <TabsContent value=\"credentials\">\n                <Tabs defaultValue=\"login\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n                    <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"login\">\n                    <form onSubmit={handleLogin} className=\"space-y-4 mt-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"login-username\">Username</Label>\n                        <Input\n                          id=\"login-username\"\n                          data-testid=\"input-login-username\"\n                          value={loginForm.username}\n                          onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"login-password\">Password</Label>\n                        <Input\n                          id=\"login-password\"\n                          type=\"password\"\n                          data-testid=\"input-login-password\"\n                          value={loginForm.password}\n                          onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={loginMutation.isPending}\n                        data-testid=\"button-login-submit\"\n                      >\n                        {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                      </Button>\n                    </form>\n                  </TabsContent>\n\n                  <TabsContent value=\"register\">\n                    <form onSubmit={handleRegister} className=\"space-y-4 mt-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-username\">Username</Label>\n                        <Input\n                          id=\"register-username\"\n                          data-testid=\"input-register-username\"\n                          value={registerForm.username}\n                          onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-email\">Email</Label>\n                        <Input\n                          id=\"register-email\"\n                          type=\"email\"\n                          data-testid=\"input-register-email\"\n                          value={registerForm.email}\n                          onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-firstname\">First Name</Label>\n                          <Input\n                            id=\"register-firstname\"\n                            data-testid=\"input-register-firstname\"\n                            value={registerForm.firstName}\n                            onChange={(e) => setRegisterForm({ ...registerForm, firstName: e.target.value })}\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-lastname\">Last Name</Label>\n                          <Input\n                            id=\"register-lastname\"\n                            data-testid=\"input-register-lastname\"\n                            value={registerForm.lastName}\n                            onChange={(e) => setRegisterForm({ ...registerForm, lastName: e.target.value })}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-password\">Password</Label>\n                        <Input\n                          id=\"register-password\"\n                          type=\"password\"\n                          data-testid=\"input-register-password\"\n                          value={registerForm.password}\n                          onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={registerMutation.isPending}\n                        data-testid=\"button-register-submit\"\n                      >\n                        {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                </Tabs>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Right side - Hero section */}\n        <div className=\"hidden md:block space-y-6\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-4xl font-bold\">Learn Languages Competitively</h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Engage in real-time duels, track your Fluency Score, and compete with learners worldwide.\n            </p>\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-primary font-bold\">✓</span>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">AI-Powered Grading</h3>\n                <p className=\"text-sm text-muted-foreground\">Get instant feedback on grammar, fluency, and vocabulary</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-primary font-bold\">✓</span>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Fluency Score Ranking</h3>\n                <p className=\"text-sm text-muted-foreground\">Track your progress with Chess.com-style Elo ratings</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-primary font-bold\">✓</span>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Real-Time Matchmaking</h3>\n                <p className=\"text-sm text-muted-foreground\">Battle opponents at your skill level or challenge friends</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11351},"server/googleAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq, or } from \"drizzle-orm\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nif (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {\n  throw new Error(\"Missing Google OAuth credentials: GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET\");\n}\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Get the primary domain (first one in the list)\n  const primaryDomain = process.env.REPLIT_DOMAINS!.split(\",\")[0];\n\n  // Local (username/password) strategy\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const [user] = await db\n          .select()\n          .from(users)\n          .where(eq(users.username, username));\n\n        if (!user || !user.password) {\n          return done(null, false);\n        }\n\n        const isValid = await comparePasswords(password, user.password);\n        if (!isValid) {\n          return done(null, false);\n        }\n\n        return done(null, user as any);\n      } catch (error) {\n        return done(error as Error);\n      }\n    })\n  );\n\n  // Google OAuth strategy\n  passport.use(\n    new GoogleStrategy(\n      {\n        clientID: process.env.GOOGLE_CLIENT_ID!,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n        callbackURL: `https://${primaryDomain}/api/callback`,\n      },\n      async (accessToken, refreshToken, profile, done) => {\n        try {\n          const email = profile.emails?.[0]?.value;\n          \n          // Check if user exists by Google ID\n          let [user] = await db\n            .select()\n            .from(users)\n            .where(eq(users.googleId, profile.id));\n\n          if (user) {\n            // Update user info\n            const [updatedUser] = await db\n              .update(users)\n              .set({\n                email,\n                firstName: profile.name?.givenName,\n                lastName: profile.name?.familyName,\n                profileImageUrl: profile.photos?.[0]?.value,\n                updatedAt: new Date(),\n              })\n              .where(eq(users.id, user.id))\n              .returning();\n            \n            return done(null, updatedUser as any);\n          }\n\n          // Check if user exists by email (from previous auth system)\n          if (email) {\n            const [existingByEmail] = await db\n              .select()\n              .from(users)\n              .where(eq(users.email, email));\n\n            if (existingByEmail) {\n              // Update existing user with Google ID\n              const [updatedUser] = await db\n                .update(users)\n                .set({\n                  googleId: profile.id,\n                  firstName: profile.name?.givenName || existingByEmail.firstName,\n                  lastName: profile.name?.familyName || existingByEmail.lastName,\n                  profileImageUrl: profile.photos?.[0]?.value || existingByEmail.profileImageUrl,\n                  updatedAt: new Date(),\n                })\n                .where(eq(users.id, existingByEmail.id))\n                .returning();\n              \n              return done(null, updatedUser as any);\n            }\n          }\n\n          // Create new user\n          const [newUser] = await db\n            .insert(users)\n            .values({\n              googleId: profile.id,\n              email,\n              firstName: profile.name?.givenName,\n              lastName: profile.name?.familyName,\n              profileImageUrl: profile.photos?.[0]?.value,\n            })\n            .returning();\n\n          return done(null, newUser as any);\n        } catch (error) {\n          console.error('Google OAuth error:', error);\n          return done(error as Error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        // User doesn't exist anymore, clear session\n        return done(null, false);\n      }\n      done(null, user as any);\n    } catch (error) {\n      // On error, clear session instead of propagating error\n      done(null, false);\n    }\n  });\n\n  // Username/password registration\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, password, email, firstName, lastName } = req.body;\n\n      // Check if username already exists\n      const [existingUser] = await db\n        .select()\n        .from(users)\n        .where(or(eq(users.username, username), eq(users.email, email)));\n\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username or email already exists\" });\n      }\n\n      // Create user\n      const [newUser] = await db\n        .insert(users)\n        .values({\n          username,\n          password: await hashPassword(password),\n          email,\n          firstName,\n          lastName,\n        })\n        .returning();\n\n      // Log the user in\n      req.login(newUser as any, (err) => {\n        if (err) return next(err);\n        res.status(201).json(newUser);\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Username/password login\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.json(user);\n      });\n    })(req, res, next);\n  });\n\n  // Google OAuth login\n  app.get(\"/api/login/google\", passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"],\n  }));\n\n  // Google OAuth callback\n  app.get(\"/api/callback\", \n    passport.authenticate(\"google\", { failureRedirect: \"/signin\" }),\n    (req, res) => {\n      res.redirect(\"/\");\n    }\n  );\n\n  // Logout (support both GET and POST)\n  const logoutHandler = (req: any, res: any) => {\n    req.logout(() => {\n      // If it's a GET request (browser navigation), redirect to landing\n      if (req.method === 'GET') {\n        res.redirect('/');\n      } else {\n        // If it's a POST request (API call), return success\n        res.json({ message: \"Logged out successfully\" });\n      }\n    });\n  };\n  \n  app.get(\"/api/logout\", logoutHandler);\n  app.post(\"/api/logout\", logoutHandler);\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};\n","size_bytes":8337},"client/src/components/PremiumWelcomeModal.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Crown, Infinity, Target, MessageSquare, Sparkles } from \"lucide-react\";\n\ninterface PremiumWelcomeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function PremiumWelcomeModal({ isOpen, onClose }: PremiumWelcomeModalProps) {\n  const [visibleBenefits, setVisibleBenefits] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setVisibleBenefits([]);\n      // Stagger the appearance of benefits\n      const timers = [0, 1, 2, 3].map((index) =>\n        setTimeout(() => {\n          setVisibleBenefits((prev) => [...prev, index]);\n        }, index * 200)\n      );\n\n      return () => timers.forEach(clearTimeout);\n    }\n  }, [isOpen]);\n\n  const benefits = [\n    {\n      icon: Infinity,\n      title: \"Unlimited Matches\",\n      description: \"No daily limits on Medium & Hard difficulties\",\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\",\n    },\n    {\n      icon: Target,\n      title: \"Topic Selection\",\n      description: \"Choose your learning themes in practice mode\",\n      color: \"text-purple-500\",\n      bgColor: \"bg-purple-500/10\",\n    },\n    {\n      icon: MessageSquare,\n      title: \"Detailed AI Feedback\",\n      description: \"Comprehensive grammar and vocabulary analysis\",\n      color: \"text-green-500\",\n      bgColor: \"bg-green-500/10\",\n    },\n    {\n      icon: Sparkles,\n      title: \"Premium Badge\",\n      description: \"Stand out with your exclusive PRO status\",\n      color: \"text-yellow-500\",\n      bgColor: \"bg-yellow-500/10\",\n    },\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"modal-premium-welcome\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-2xl\">\n            <div className=\"animate-bounce\">\n              <Crown className=\"w-8 h-8 text-yellow-500\" />\n            </div>\n            <span className=\"bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent\">\n              Welcome to Premium!\n            </span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          <div className=\"text-center\">\n            <Badge \n              variant=\"default\" \n              className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white text-lg px-6 py-2 font-bold\"\n            >\n              <Crown className=\"w-5 h-5 mr-2\" />\n              PRO MEMBER\n            </Badge>\n            <p className=\"text-muted-foreground mt-3\">\n              You now have access to all premium features!\n            </p>\n          </div>\n\n          <div className=\"space-y-3\">\n            {benefits.map((benefit, index) => {\n              const Icon = benefit.icon;\n              const isVisible = visibleBenefits.includes(index);\n              \n              return (\n                <div\n                  key={index}\n                  className={`flex items-start gap-3 p-3 rounded-lg border border-border transition-all duration-500 ${\n                    isVisible\n                      ? \"opacity-100 translate-x-0\"\n                      : \"opacity-0 -translate-x-4\"\n                  }`}\n                  data-testid={`premium-benefit-${index}`}\n                >\n                  <div className={`w-10 h-10 rounded-lg ${benefit.bgColor} flex items-center justify-center flex-shrink-0`}>\n                    <Icon className={`w-5 h-5 ${benefit.color}`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold\">{benefit.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{benefit.description}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <Button\n            onClick={onClose}\n            className=\"w-full bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white\"\n            data-testid=\"button-close-premium-welcome\"\n          >\n            Start Learning!\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4325},"client/src/components/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, Trophy, Target, Zap, Flame, BarChart3, BookOpen, AlertCircle, Activity, Swords, Eye, TrendingDown } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { formatDistanceToNow, format } from \"date-fns\";\nimport type { Match, UserLanguageStats } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport MatchDetails from \"@/components/MatchDetails\";\n\ninterface AnalyticsProps {\n  currentLanguage: string;\n  isAuthenticated?: boolean;\n}\n\nexport default function Analytics({ currentLanguage, isAuthenticated }: AnalyticsProps) {\n  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);\n\n  // Fetch matches for the current language\n  const { data: allMatches = [] } = useQuery<Match[]>({\n    queryKey: [`/api/user/matches?language=${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  // Filter out practice matches for analytics\n  const matches = allMatches.filter(m => !m.isPracticeMode);\n\n  // Fetch language stats\n  const { data: languageStats } = useQuery<UserLanguageStats>({\n    queryKey: [`/api/user/stats/${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch skill progress\n  const { data: skillProgress } = useQuery<{\n    grammar: number;\n    fluency: number;\n    vocabulary: number;\n    naturalness: number;\n  }>({\n    queryKey: [`/api/user/skill-progress?language=${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch study recommendations\n  const { data: studyRecommendations } = useQuery<{\n    grammarIssues: { issue: string; count: number }[];\n    vocabularyTips: { tip: string; count: number }[];\n    generalAdvice: { advice: string; count: number }[];\n    totalMatches: number;\n  }>({\n    queryKey: [`/api/user/study-recommendations?language=${currentLanguage}`],\n    enabled: isAuthenticated,\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <BarChart3 className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Analytics Unavailable</h3>\n            <p className=\"text-muted-foreground text-sm\">\n              Sign in to view your progress analytics and detailed stats.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Process Fluency Score over time\n  const fluencyOverTime = matches\n    .slice(0, 20)\n    .reverse()\n    .map((match, index) => {\n      const previousMatches = matches.slice(0, matches.indexOf(match));\n      const eloBeforeMatch = (languageStats?.elo || 1200) - \n        previousMatches.reduce((sum, m) => sum + (m.eloChange || 0), 0);\n      \n      return {\n        match: `Match ${index + 1}`,\n        elo: eloBeforeMatch + (match.eloChange || 0),\n        date: match.createdAt ? format(new Date(match.createdAt), 'MMM d') : ''\n      };\n    });\n\n  // Calculate skill improvement (compare recent matches vs previous matches)\n  const calculateImprovement = () => {\n    // Need at least 4 matches to show meaningful improvement (2 vs 2 minimum)\n    if (matches.length < 4) return null;\n    \n    // Calculate how many matches to compare (half of total, up to 10)\n    const compareSize = Math.min(10, Math.floor(matches.length / 2));\n    \n    const recentMatches = matches.slice(0, compareSize);\n    const olderMatches = matches.slice(compareSize, compareSize * 2);\n\n    const recentAvg = {\n      grammar: recentMatches.reduce((sum, m) => sum + m.grammarScore, 0) / recentMatches.length,\n      fluency: recentMatches.reduce((sum, m) => sum + m.fluencyScore, 0) / recentMatches.length,\n      vocabulary: recentMatches.reduce((sum, m) => sum + m.vocabularyScore, 0) / recentMatches.length,\n      naturalness: recentMatches.reduce((sum, m) => sum + m.naturalnessScore, 0) / recentMatches.length,\n    };\n\n    const olderAvg = {\n      grammar: olderMatches.reduce((sum, m) => sum + m.grammarScore, 0) / olderMatches.length,\n      fluency: olderMatches.reduce((sum, m) => sum + m.fluencyScore, 0) / olderMatches.length,\n      vocabulary: olderMatches.reduce((sum, m) => sum + m.vocabularyScore, 0) / olderMatches.length,\n      naturalness: olderMatches.reduce((sum, m) => sum + m.naturalnessScore, 0) / olderMatches.length,\n    };\n\n    return {\n      grammar: Math.round(recentAvg.grammar - olderAvg.grammar),\n      fluency: Math.round(recentAvg.fluency - olderAvg.fluency),\n      vocabulary: Math.round(recentAvg.vocabulary - olderAvg.vocabulary),\n      naturalness: Math.round(recentAvg.naturalness - olderAvg.naturalness),\n      compareSize, // Return the comparison size for display\n    };\n  };\n\n  const improvement = calculateImprovement();\n\n  // Study recommendations data\n  const hasRecommendations = studyRecommendations && \n    studyRecommendations.totalMatches > 0 && \n    (studyRecommendations.grammarIssues.length > 0 || \n     studyRecommendations.vocabularyTips.length > 0 || \n     studyRecommendations.generalAdvice.length > 0);\n\n  // Get difficulty badge color\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Beginner\": return \"bg-green-500/20 text-green-500 border-green-500/30\";\n      case \"Easy\": return \"bg-blue-500/20 text-blue-500 border-blue-500/30\";\n      case \"Medium\": return \"bg-yellow-500/20 text-yellow-500 border-yellow-500/30\";\n      case \"Hard\": return \"bg-red-500/20 text-red-500 border-red-500/30\";\n      default: return \"bg-muted/20 text-muted-foreground border-muted/30\";\n    }\n  };\n\n  const totalMatches = (languageStats?.wins || 0) + (languageStats?.losses || 0);\n  const overallWinRate = totalMatches > 0 ? Math.round(((languageStats?.wins || 0) / totalMatches) * 100) : 0;\n\n  return (\n    <div className=\"space-y-6 pb-8\">\n      <div>\n        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n          <BarChart3 className=\"w-6 h-6\" />\n          Analytics - {currentLanguage}\n        </h2>\n        <p className=\"text-muted-foreground text-sm mt-1\">Track your progress and performance over time</p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Fluency Score</p>\n                <p className=\"text-2xl font-bold font-mono\" data-testid=\"text-analytics-fluency\">{languageStats?.elo || 1200}</p>\n              </div>\n              <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Trophy className=\"w-6 h-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Win Rate</p>\n                <p className=\"text-2xl font-bold font-mono\">{overallWinRate}%</p>\n              </div>\n              <div className=\"w-12 h-12 rounded-lg bg-success/10 flex items-center justify-center\">\n                <Target className=\"w-6 h-6 text-success\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Win Streak</p>\n                <p className=\"text-2xl font-bold font-mono\">{languageStats?.winStreak || 0}</p>\n              </div>\n              <div className=\"w-12 h-12 rounded-lg bg-orange-500/10 flex items-center justify-center\">\n                <Flame className=\"w-6 h-6 text-orange-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Daily Streak</p>\n                <p className=\"text-2xl font-bold font-mono\">{languageStats?.dailyLoginStreak || 0}</p>\n              </div>\n              <div className=\"w-12 h-12 rounded-lg bg-blue-500/10 flex items-center justify-center\">\n                <Zap className=\"w-6 h-6 text-blue-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fluency Score Over Time */}\n      {fluencyOverTime.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Fluency Score Progress\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={fluencyOverTime}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                <XAxis dataKey=\"date\" className=\"text-xs\" />\n                <YAxis className=\"text-xs\" />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: 'hsl(var(--card))',\n                    border: '1px solid hsl(var(--card-border))',\n                    borderRadius: '8px'\n                  }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"elo\"\n                  name=\"Fluency Score\"\n                  stroke=\"hsl(var(--primary))\" \n                  strokeWidth={2}\n                  dot={{ fill: 'hsl(var(--primary))', r: 4 }}\n                  activeDot={{ r: 6 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Current Skill Levels with Improvement */}\n      {skillProgress && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Activity className=\"w-5 h-5\" />\n              Current Skill Levels\n            </CardTitle>\n            {improvement && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Comparing last {improvement.compareSize} matches to previous {improvement.compareSize} matches\n              </p>\n            )}\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-1\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Grammar</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-semibold font-mono\">{skillProgress.grammar}%</span>\n                  {improvement && improvement.grammar !== 0 && (\n                    <span className={`text-xs font-semibold flex items-center gap-0.5 ${\n                      improvement.grammar > 0 ? 'text-success' : 'text-destructive'\n                    }`}>\n                      {improvement.grammar > 0 ? (\n                        <><TrendingUp className=\"w-3 h-3\" />+{improvement.grammar}%</>\n                      ) : (\n                        <><TrendingDown className=\"w-3 h-3\" />{improvement.grammar}%</>\n                      )}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <Progress value={skillProgress.grammar} className=\"h-3\" />\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Fluency</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-semibold font-mono\">{skillProgress.fluency}%</span>\n                  {improvement && improvement.fluency !== 0 && (\n                    <span className={`text-xs font-semibold flex items-center gap-0.5 ${\n                      improvement.fluency > 0 ? 'text-success' : 'text-destructive'\n                    }`}>\n                      {improvement.fluency > 0 ? (\n                        <><TrendingUp className=\"w-3 h-3\" />+{improvement.fluency}%</>\n                      ) : (\n                        <><TrendingDown className=\"w-3 h-3\" />{improvement.fluency}%</>\n                      )}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <Progress value={skillProgress.fluency} className=\"h-3\" />\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Vocabulary</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-semibold font-mono\">{skillProgress.vocabulary}%</span>\n                  {improvement && improvement.vocabulary !== 0 && (\n                    <span className={`text-xs font-semibold flex items-center gap-0.5 ${\n                      improvement.vocabulary > 0 ? 'text-success' : 'text-destructive'\n                    }`}>\n                      {improvement.vocabulary > 0 ? (\n                        <><TrendingUp className=\"w-3 h-3\" />+{improvement.vocabulary}%</>\n                      ) : (\n                        <><TrendingDown className=\"w-3 h-3\" />{improvement.vocabulary}%</>\n                      )}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <Progress value={skillProgress.vocabulary} className=\"h-3\" />\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Naturalness</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-semibold font-mono\">{skillProgress.naturalness}%</span>\n                  {improvement && improvement.naturalness !== 0 && (\n                    <span className={`text-xs font-semibold flex items-center gap-0.5 ${\n                      improvement.naturalness > 0 ? 'text-success' : 'text-destructive'\n                    }`}>\n                      {improvement.naturalness > 0 ? (\n                        <><TrendingUp className=\"w-3 h-3\" />+{improvement.naturalness}%</>\n                      ) : (\n                        <><TrendingDown className=\"w-3 h-3\" />{improvement.naturalness}%</>\n                      )}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <Progress value={skillProgress.naturalness} className=\"h-3\" />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Study Recommendations */}\n      {hasRecommendations && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <BookOpen className=\"w-5 h-5\" />\n              Focus Areas\n            </CardTitle>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Based on {studyRecommendations.totalMatches} recent matches with AI feedback\n            </p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {studyRecommendations.grammarIssues.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-semibold mb-2 flex items-center gap-1\">\n                  <AlertCircle className=\"w-4 h-4 text-destructive\" />\n                  Common Grammar Patterns\n                </h4>\n                <div className=\"space-y-2\">\n                  {studyRecommendations.grammarIssues.slice(0, 3).map((item, idx) => (\n                    <div key={idx} className=\"flex items-start gap-2 text-base\">\n                      <Badge variant=\"outline\" className=\"text-sm shrink-0\">{item.count}×</Badge>\n                      <span className=\"text-muted-foreground\">{item.issue}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {studyRecommendations.vocabularyTips.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-semibold mb-2 flex items-center gap-1\">\n                  <Target className=\"w-4 h-4 text-primary\" />\n                  Vocabulary Improvements\n                </h4>\n                <div className=\"space-y-2\">\n                  {studyRecommendations.vocabularyTips.slice(0, 3).map((item, idx) => (\n                    <div key={idx} className=\"flex items-start gap-2 text-base\">\n                      <Badge variant=\"outline\" className=\"text-sm shrink-0\">{item.count}×</Badge>\n                      <span className=\"text-muted-foreground\">{item.tip}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {studyRecommendations.generalAdvice.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-semibold mb-2 flex items-center gap-1\">\n                  <TrendingUp className=\"w-4 h-4 text-success\" />\n                  General Improvements\n                </h4>\n                <div className=\"space-y-2\">\n                  {studyRecommendations.generalAdvice.slice(0, 3).map((item, idx) => (\n                    <div key={idx} className=\"flex items-start gap-2 text-base\">\n                      <Badge variant=\"outline\" className=\"text-sm shrink-0\">{item.count}×</Badge>\n                      <span className=\"text-muted-foreground\">{item.advice}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Match History */}\n      {matches.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Swords className=\"w-5 h-5\" />\n              Match History ({matches.length} Matches)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-[600px] pr-4\">\n              <div className=\"space-y-3\">\n                {matches.map((match) => (\n                  <div\n                    key={match.id}\n                    className={`p-4 rounded-lg border ${\n                      match.result === 'win' \n                        ? 'border-success/30 bg-success/5' \n                        : 'border-destructive/30 bg-destructive/5'\n                    } hover-elevate transition-all`}\n                  >\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"flex items-center gap-2 flex-wrap\">\n                          <Badge \n                            variant=\"outline\" \n                            className={match.result === 'win' ? 'border-success text-success' : 'border-destructive text-destructive'}\n                          >\n                            {match.result === 'win' ? (\n                              <><Trophy className=\"w-3 h-3 mr-1\" /> Victory</>\n                            ) : (\n                              <>Defeat</>\n                            )}\n                          </Badge>\n                          <Badge variant=\"outline\" className={getDifficultyColor(match.difficulty)}>\n                            {match.difficulty}\n                          </Badge>\n                          {(match.isForfeit === 1 || (match as any).is_forfeit === 1) && (\n                            <Badge variant=\"outline\" className=\"border-muted text-muted-foreground\">\n                              Forfeit\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <div>\n                          <p className=\"font-semibold\">vs {match.opponent}</p>\n                          <p className=\"text-sm text-muted-foreground\">{match.topic || 'No topic'}</p>\n                        </div>\n\n                        <div className=\"flex items-center gap-4 text-sm\">\n                          <div className=\"flex items-center gap-1\">\n                            <span className=\"text-muted-foreground\">Score:</span>\n                            <span className=\"font-mono font-semibold\">{match.overallScore}/100</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            {match.eloChange >= 0 ? (\n                              <>\n                                <TrendingUp className=\"w-4 h-4 text-success\" />\n                                <span className=\"font-mono font-semibold text-success\">+{match.eloChange}</span>\n                              </>\n                            ) : (\n                              <>\n                                <TrendingDown className=\"w-4 h-4 text-destructive\" />\n                                <span className=\"font-mono font-semibold text-destructive\">{match.eloChange}</span>\n                              </>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Grammar:</span>\n                            <span className=\"ml-1 font-semibold\">{match.grammarScore}%</span>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Fluency:</span>\n                            <span className=\"ml-1 font-semibold\">{match.fluencyScore}%</span>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Vocabulary:</span>\n                            <span className=\"ml-1 font-semibold\">{match.vocabularyScore}%</span>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Naturalness:</span>\n                            <span className=\"ml-1 font-semibold\">{match.naturalnessScore}%</span>\n                          </div>\n                        </div>\n\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatDistanceToNow(new Date(match.createdAt || new Date()), { addSuffix: true })}\n                        </p>\n                      </div>\n\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedMatch(match)}\n                        data-testid={`button-view-match-${match.id}`}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        Details\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* No Data Message */}\n      {matches.length === 0 && (\n        <Card>\n          <CardContent className=\"pt-6 text-center\">\n            <BarChart3 className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Data Yet</h3>\n            <p className=\"text-muted-foreground text-sm\">\n              Complete some matches to see your analytics and progress charts.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Match Details Dialog */}\n      {selectedMatch && (\n        <MatchDetails\n          match={selectedMatch}\n          onClose={() => setSelectedMatch(null)}\n          language={currentLanguage}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":24262},"client/src/components/BotSelection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\ninterface BotProfile {\n  id: string;\n  name: string;\n  languages: string[];\n  backstory: string;\n  personality: string;\n  description: string;\n}\n\ninterface BotSelectionProps {\n  open: boolean;\n  onClose: () => void;\n  language: string;\n  onSelectBot: (botId: string) => void;\n}\n\nexport default function BotSelection({ open, onClose, language, onSelectBot }: BotSelectionProps) {\n  const [selectedBotId, setSelectedBotId] = useState<string | null>(null);\n\n  const { data: bots = [], isLoading } = useQuery<BotProfile[]>({\n    queryKey: [`/api/bots?language=${language}`],\n    enabled: open,\n  });\n\n  const handleSelect = () => {\n    if (selectedBotId) {\n      onSelectBot(selectedBotId);\n      onClose();\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[85vh] flex flex-col overflow-hidden\">\n        <DialogHeader className=\"shrink-0\">\n          <DialogTitle>Choose Your Practice Partner</DialogTitle>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Practice {language} with a native speaker\n          </p>\n        </DialogHeader>\n        \n        <div className=\"flex-1 overflow-y-auto -mx-6 px-6 py-4\">\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"pt-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <Skeleton className=\"w-10 h-10 rounded-full shrink-0\" />\n                        <div className=\"flex-1 space-y-2\">\n                          <Skeleton className=\"h-5 w-32\" />\n                          <Skeleton className=\"h-4 w-full\" />\n                          <Skeleton className=\"h-3 w-full\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {bots.map((bot) => (\n                  <Card\n                    key={bot.id}\n                    className={`cursor-pointer transition-all hover-elevate ${\n                      selectedBotId === bot.id ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => setSelectedBotId(bot.id)}\n                    data-testid={`bot-card-${bot.id}`}\n                  >\n                    <CardContent className=\"pt-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <Avatar className=\"shrink-0\">\n                          <AvatarFallback>{getInitials(bot.name)}</AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <h3 className=\"font-semibold\">{bot.name}</h3>\n                            <Badge variant=\"secondary\" className=\"text-xs\">Native Speaker</Badge>\n                          </div>\n                          \n                          <p className=\"text-sm text-muted-foreground\">{bot.description}</p>\n                          \n                          <div className=\"pt-2\">\n                            <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                              {bot.backstory}\n                            </p>\n                          </div>\n\n                          {bot.languages.length > 1 && (\n                            <div className=\"flex gap-1 flex-wrap pt-1\">\n                              {bot.languages.map(lang => (\n                                <Badge key={lang} variant=\"outline\" className=\"text-xs\">\n                                  {lang}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n        </div>\n\n        <div className=\"flex justify-end gap-2 pt-4 border-t shrink-0\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose}\n            data-testid=\"button-cancel-bot-selection\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSelect}\n            disabled={!selectedBotId}\n            data-testid=\"button-confirm-bot-selection\"\n          >\n            Start Practice\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5243},"server/botProfiles.ts":{"content":"export interface BotProfile {\n  id: string;\n  name: string;\n  languages: string[]; // Languages this bot can speak\n  rating: number; // 1-5 difficulty level\n  backstory: string;\n  personality: string; // Used in AI prompts\n  description: string; // Short description for UI\n}\n\nexport interface PracticeBotProfile {\n  id: string;\n  name: string;\n  languages: string[]; // Languages this bot can speak\n  backstory: string;\n  personality: string; // Used in AI prompts\n  description: string; // Short description for UI\n}\n\n// Competitive mode bots (with difficulty ratings)\nexport const competitiveBots: BotProfile[] = [\n  // Chinese Bots\n  {\n    id: \"wei-zhang\",\n    name: \"Wei Zhang\",\n    languages: [\"Chinese\"],\n    rating: 4,\n    backstory: \"A software engineer from Beijing who loves hiking and photography. Spent a year teaching English in rural China.\",\n    personality: \"Friendly, patient, uses simple examples from technology and nature. Occasionally makes mistakes with measure words (个, 只, 本).\",\n    description: \"Tech enthusiast from Beijing, patient teacher\"\n  },\n  {\n    id: \"li-na\",\n    name: \"Li Na\",\n    languages: [\"Chinese\"],\n    rating: 3,\n    backstory: \"Art student from Shanghai studying traditional Chinese painting. Dreams of opening her own gallery.\",\n    personality: \"Creative, expressive, sometimes forgets tones when excited. Uses artistic and emotional vocabulary.\",\n    description: \"Art student, expressive and creative\",\n  },\n  {\n    id: \"yuki-yamamoto\",\n    name: \"Yuki Chen\",\n    languages: [\"Chinese\"],\n    rating: 5,\n    backstory: \"Chinese-Japanese translator living in Guangzhou. Fluent in both languages, loves comparing linguistic differences.\",\n    personality: \"Precise, analytical, rarely makes mistakes. When errors occur, they're subtle tone mistakes or rare character confusions.\",\n    description: \"Professional translator, very precise\",\n  },\n  {\n    id: \"ming-wang\",\n    name: \"Ming Wang\",\n    languages: [\"Chinese\"],\n    rating: 2,\n    backstory: \"University student from Chengdu who just started learning Mandarin formally. Native Sichuanese speaker.\",\n    personality: \"Enthusiastic but makes frequent errors with particles (了, 过, 着) and word order. Mixes in some Sichuanese expressions.\",\n    description: \"University student, still learning standard Mandarin\",\n  },\n\n  // Spanish Bots\n  {\n    id: \"sofia-martinez\",\n    name: \"Sofia Martinez\",\n    languages: [\"Spanish\"],\n    rating: 4,\n    backstory: \"Dance instructor from Barcelona who teaches flamenco. Passionate about sharing Spanish culture.\",\n    personality: \"Energetic, passionate, occasionally mixes up ser/estar. Uses expressions related to music and movement.\",\n    description: \"Flamenco dancer from Barcelona, passionate\",\n  },\n  {\n    id: \"carlos-mendoza\",\n    name: \"Carlos Mendoza\",\n    languages: [\"Spanish\"],\n    rating: 5,\n    backstory: \"Literature professor from Mexico City. Expert in Spanish grammar and literature, published poet.\",\n    personality: \"Eloquent, formal, uses rich vocabulary. Rarely makes mistakes—only subtle subjunctive errors in complex sentences.\",\n    description: \"Literature professor, eloquent speaker\",\n  },\n  {\n    id: \"lucia-rivera\",\n    name: \"Lucia Rivera\",\n    languages: [\"Spanish\"],\n    rating: 3,\n    backstory: \"Chef from Buenos Aires learning Spanish formally. Native in Argentine Spanish, adapting to standard Spanish.\",\n    personality: \"Warm, descriptive, makes gender agreement errors and forgets articles. Uses lots of food-related vocabulary.\",\n    description: \"Chef from Buenos Aires, warm personality\",\n  },\n  {\n    id: \"diego-silva\",\n    name: \"Diego Silva\",\n    languages: [\"Spanish\"],\n    rating: 2,\n    backstory: \"Teenager from Madrid who's still in high school. Loves soccer and video games.\",\n    personality: \"Casual, makes frequent conjugation errors and preposition mistakes (por/para). Uses modern slang.\",\n    description: \"High school student, casual and modern\",\n  },\n  {\n    id: \"isabel-torres\",\n    name: \"Isabel Torres\",\n    languages: [\"Spanish\"],\n    rating: 4,\n    backstory: \"News anchor from Bogotá, Colombia. Clear speaker trained in neutral Latin American Spanish.\",\n    personality: \"Professional, clear, makes occasional article errors. Uses current events vocabulary.\",\n    description: \"News anchor, clear and professional\",\n  },\n\n  // Italian Bots\n  {\n    id: \"isabella-rossi\",\n    name: \"Isabella Rossi\",\n    languages: [\"Italian\"],\n    rating: 5,\n    backstory: \"Opera singer from Milan. Performed at La Scala, now teaches voice and Italian to international students.\",\n    personality: \"Refined, musical, uses perfect Italian with rare subtle errors in complex pronouns. Loves musical metaphors.\",\n    description: \"Opera singer from Milan, refined speaker\",\n  },\n  {\n    id: \"valentina-romano\",\n    name: \"Valentina Romano\",\n    languages: [\"Italian\"],\n    rating: 4,\n    backstory: \"Fashion designer from Florence. Works with international brands, travels frequently.\",\n    personality: \"Stylish, modern, occasionally makes preposition errors (a, di, da). Uses fashion and design vocabulary.\",\n    description: \"Fashion designer, stylish and modern\",\n  },\n  {\n    id: \"marco-bianchi\",\n    name: \"Marco Bianchi\",\n    languages: [\"Italian\"],\n    rating: 3,\n    backstory: \"Gelato maker from Rome learning proper Italian grammar. Grew up speaking Roman dialect.\",\n    personality: \"Friendly, makes article confusion errors (il/lo/la) and double consonant mistakes. Uses food vocabulary.\",\n    description: \"Gelato maker from Rome, friendly\",\n  },\n  {\n    id: \"giulia-conti\",\n    name: \"Giulia Conti\",\n    languages: [\"Italian\"],\n    rating: 2,\n    backstory: \"College student from Naples studying architecture. Still mastering standard Italian.\",\n    personality: \"Creative but makes frequent gender agreement and reflexive verb errors. Uses architectural terms.\",\n    description: \"Architecture student, creative thinker\",\n  },\n  {\n    id: \"luca-marino\",\n    name: \"Luca Marino\",\n    languages: [\"Italian\"],\n    rating: 4,\n    backstory: \"Gondolier and tour guide from Venice. Knows Italian history and culture deeply.\",\n    personality: \"Knowledgeable, storyteller, makes occasional verb conjugation mistakes with irregular verbs.\",\n    description: \"Venetian tour guide, great storyteller\",\n  },\n\n  // Multi-language Bots\n  {\n    id: \"emma-chen\",\n    name: \"Emma Chen\",\n    languages: [\"Chinese\", \"Spanish\", \"Italian\"],\n    rating: 5,\n    backstory: \"Polyglot travel blogger who's lived in 15 countries. Speaks 8 languages, specializes in romance and Asian languages.\",\n    personality: \"Adaptable, culturally aware, makes very subtle mistakes when tired. Loves sharing language learning tips.\",\n    description: \"Travel blogger, speaks 8 languages\",\n  },\n  {\n    id: \"alex-kim\",\n    name: \"Alex Kim\",\n    languages: [\"Chinese\", \"Spanish\", \"Italian\"],\n    rating: 3,\n    backstory: \"Language exchange app developer learning multiple languages simultaneously. Often mixes them up.\",\n    personality: \"Tech-savvy, makes interference errors mixing languages. Sometimes uses the wrong language's grammar rules.\",\n    description: \"App developer learning multiple languages\",\n  },\n  {\n    id: \"maria-santos\",\n    name: \"Maria Santos\",\n    languages: [\"Spanish\", \"Italian\"],\n    rating: 4,\n    backstory: \"Translator from Spain who specializes in Spanish-Italian legal documents. Very precise but occasionally formal.\",\n    personality: \"Professional, precise, makes rare false cognate errors between Spanish and Italian. Uses formal register.\",\n    description: \"Legal translator, very precise\",\n  },\n  {\n    id: \"chen-rodriguez\",\n    name: \"Chen Rodriguez\",\n    languages: [\"Chinese\", \"Spanish\"],\n    rating: 3,\n    backstory: \"Chef running a Chinese-Mexican fusion restaurant in Los Angeles. Bilingual household background.\",\n    personality: \"Creative, mixes culinary terms, makes code-switching errors. Warm and welcoming.\",\n    description: \"Fusion chef, creative and welcoming\",\n  },\n];\n\n// Practice mode bots (native speakers, no ratings)\nexport const practiceBots: PracticeBotProfile[] = [\n  // Chinese Native Speakers\n  {\n    id: \"practice-jing-li\",\n    name: \"Jing Li\",\n    languages: [\"Chinese\"],\n    backstory: \"Native Mandarin speaker from Beijing. Grew up in a traditional family, now works as a museum curator specializing in Chinese history.\",\n    personality: \"Native fluency, natural conversational style. Uses idioms and cultural references authentically. Speaks with perfect grammar and tones.\",\n    description: \"Museum curator from Beijing\"\n  },\n  {\n    id: \"practice-mei-wang\",\n    name: \"Mei Wang\",\n    languages: [\"Chinese\"],\n    backstory: \"Born and raised in Shanghai. News broadcaster for national television with flawless Mandarin pronunciation.\",\n    personality: \"Perfect native speaker. Clear, articulate, uses sophisticated vocabulary naturally. Excellent model for learners.\",\n    description: \"News broadcaster from Shanghai\"\n  },\n  {\n    id: \"practice-hong-chen\",\n    name: \"Hong Chen\",\n    languages: [\"Chinese\"],\n    backstory: \"Native speaker from Hangzhou. University professor teaching Chinese linguistics and classical literature.\",\n    personality: \"Native fluency with deep cultural knowledge. Uses proper grammar effortlessly, naturally incorporates literary expressions.\",\n    description: \"University professor from Hangzhou\"\n  },\n  {\n    id: \"practice-xiao-zhou\",\n    name: \"Xiao Zhou\",\n    languages: [\"Chinese\"],\n    backstory: \"Native Mandarin speaker from Chengdu. Tech entrepreneur who travels globally but maintains perfect Chinese.\",\n    personality: \"Natural native speaker. Modern vocabulary mixed with traditional expressions. Speaks authentically without errors.\",\n    description: \"Tech entrepreneur from Chengdu\"\n  },\n\n  // Spanish Native Speakers\n  {\n    id: \"practice-ana-garcia\",\n    name: \"Ana García\",\n    languages: [\"Spanish\"],\n    backstory: \"Native Spanish speaker from Madrid. Works as a diplomat representing Spain internationally.\",\n    personality: \"Perfect Castilian Spanish. Natural fluency with sophisticated vocabulary. Uses proper grammar instinctively.\",\n    description: \"Diplomat from Madrid\"\n  },\n  {\n    id: \"practice-miguel-torres\",\n    name: \"Miguel Torres\",\n    languages: [\"Spanish\"],\n    backstory: \"Born in Barcelona, raised speaking both Spanish and Catalan. University professor of Spanish literature.\",\n    personality: \"Native speaker with flawless grammar. Rich vocabulary, uses idiomatic expressions naturally and authentically.\",\n    description: \"Literature professor from Barcelona\"\n  },\n  {\n    id: \"practice-carmen-lopez\",\n    name: \"Carmen López\",\n    languages: [\"Spanish\"],\n    backstory: \"Native speaker from Mexico City. Award-winning journalist covering Latin American politics and culture.\",\n    personality: \"Perfect native fluency. Clear articulation, sophisticated vocabulary. Natural use of Mexican expressions and idioms.\",\n    description: \"Journalist from Mexico City\"\n  },\n  {\n    id: \"practice-rafael-martinez\",\n    name: \"Rafael Martínez\",\n    languages: [\"Spanish\"],\n    backstory: \"Native Spanish speaker from Buenos Aires. Professional actor and voice coach with impeccable diction.\",\n    personality: \"Flawless native pronunciation. Uses Argentine expressions naturally while maintaining standard Spanish grammar.\",\n    description: \"Actor from Buenos Aires\"\n  },\n  {\n    id: \"practice-lucia-sanchez\",\n    name: \"Lucía Sánchez\",\n    languages: [\"Spanish\"],\n    backstory: \"Born in Bogotá, Colombia. International news correspondent with perfect neutral Spanish pronunciation.\",\n    personality: \"Native speaker with crystal-clear diction. Perfect grammar, professional vocabulary, natural conversational flow.\",\n    description: \"News correspondent from Bogotá\"\n  },\n\n  // Italian Native Speakers\n  {\n    id: \"practice-francesco-russo\",\n    name: \"Francesco Russo\",\n    languages: [\"Italian\"],\n    backstory: \"Native Italian speaker from Rome. Cultural attaché promoting Italian language and arts worldwide.\",\n    personality: \"Perfect native fluency. Uses Roman expressions naturally, impeccable grammar, sophisticated cultural references.\",\n    description: \"Cultural attaché from Rome\"\n  },\n  {\n    id: \"practice-chiara-ferrari\",\n    name: \"Chiara Ferrari\",\n    languages: [\"Italian\"],\n    backstory: \"Born and raised in Milan. International fashion journalist covering haute couture and Italian design.\",\n    personality: \"Native speaker with refined vocabulary. Natural use of idioms, perfect pronunciation and grammar structure.\",\n    description: \"Fashion journalist from Milan\"\n  },\n  {\n    id: \"practice-paolo-marino\",\n    name: \"Paolo Marino\",\n    languages: [\"Italian\"],\n    backstory: \"Native speaker from Venice. Tour guide and historian specializing in Venetian culture and Italian heritage.\",\n    personality: \"Flawless native Italian. Rich storytelling vocabulary, authentic expressions, perfect grammatical intuition.\",\n    description: \"Historian from Venice\"\n  },\n  {\n    id: \"practice-sofia-ricci\",\n    name: \"Sofia Ricci\",\n    languages: [\"Italian\"],\n    backstory: \"Native Italian from Florence. University linguistics professor teaching Italian as a foreign language.\",\n    personality: \"Perfect native fluency. Clear articulation, can naturally use both formal and colloquial registers correctly.\",\n    description: \"Linguistics professor from Florence\"\n  },\n  {\n    id: \"practice-luca-rossi\",\n    name: \"Luca Rossi\",\n    languages: [\"Italian\"],\n    backstory: \"Born in Naples. Professional opera singer and Italian language coach for international performers.\",\n    personality: \"Native speaker with impeccable diction. Musical use of language, perfect grammar, authentic Neapolitan warmth.\",\n    description: \"Opera singer from Naples\"\n  },\n\n  // Multi-language Native Speakers\n  {\n    id: \"practice-lin-garcia\",\n    name: \"Lin García\",\n    languages: [\"Chinese\", \"Spanish\"],\n    backstory: \"Native bilingual raised in Beijing and Madrid. International business consultant fluent in both languages from birth.\",\n    personality: \"Perfect native fluency in both Chinese and Spanish. Switches naturally between languages with authentic expressions in each.\",\n    description: \"Bilingual business consultant\"\n  },\n  {\n    id: \"practice-marco-zhang\",\n    name: \"Marco Zhang\",\n    languages: [\"Chinese\", \"Italian\"],\n    backstory: \"Native bilingual born to Chinese-Italian parents in Rome. Professor of East Asian studies with perfect fluency in both.\",\n    personality: \"Flawless native speaker of Chinese and Italian. Natural cultural understanding, uses idioms authentically in both languages.\",\n    description: \"East Asian studies professor\"\n  },\n  {\n    id: \"practice-rosa-chen\",\n    name: \"Rosa Chen\",\n    languages: [\"Spanish\", \"Italian\"],\n    backstory: \"Native bilingual raised between Barcelona and Florence. International art curator with perfect fluency in both languages.\",\n    personality: \"Native speaker of Spanish and Italian from childhood. Natural code-switching ability, perfect grammar in both.\",\n    description: \"Art curator, bilingual native\"\n  },\n  {\n    id: \"practice-elena-wong\",\n    name: \"Elena Wong\",\n    languages: [\"Chinese\", \"Spanish\", \"Italian\"],\n    backstory: \"Trilingual native speaker raised in multicultural Hong Kong-Barcelona-Milan. UN translator with perfect fluency in all three.\",\n    personality: \"Native-level fluency in Chinese, Spanish, and Italian. Authentic cultural knowledge, uses each language perfectly and naturally.\",\n    description: \"UN translator, trilingual native\"\n  },\n  {\n    id: \"practice-david-liu\",\n    name: \"David Liu\",\n    languages: [\"Chinese\", \"Spanish\", \"Italian\"],\n    backstory: \"Native multilingual raised by polyglot parents. International language school director, speaks all three languages from childhood.\",\n    personality: \"Perfect native fluency in Chinese, Spanish, and Italian. Natural conversational ability, culturally authentic in all three languages.\",\n    description: \"Language school director, multilingual\"\n  },\n];\n\n// Legacy export for backward compatibility (competitive bots)\nexport const botProfiles = competitiveBots;\n\n// Get practice bots by language\nexport function getPracticeBotsByLanguage(language: string): PracticeBotProfile[] {\n  return practiceBots.filter(bot => bot.languages.includes(language));\n}\n\n// Get competitive bots by language\nexport function getCompetitiveBotsByLanguage(language: string): BotProfile[] {\n  return competitiveBots.filter(bot => bot.languages.includes(language));\n}\n\n// Get bots by language (defaults to competitive for backward compatibility)\nexport function getBotsByLanguage(language: string): BotProfile[] {\n  return getCompetitiveBotsByLanguage(language);\n}\n\n// Get practice bot by ID\nexport function getPracticeBotById(id: string): PracticeBotProfile | undefined {\n  return practiceBots.find(bot => bot.id === id);\n}\n\n// Get competitive bot by ID\nexport function getCompetitiveBotById(id: string): BotProfile | undefined {\n  return competitiveBots.find(bot => bot.id === id);\n}\n\n// Get bot by ID (checks both practice and competitive)\nexport function getBotById(id: string): BotProfile | PracticeBotProfile | undefined {\n  return getPracticeBotById(id) || getCompetitiveBotById(id);\n}\n\n// Get random competitive bot for a language (used in competitive mode)\nexport function getRandomBotForLanguage(language: string): BotProfile {\n  const languageBots = getCompetitiveBotsByLanguage(language);\n  if (languageBots.length === 0) {\n    // Fallback to multi-language bots\n    const multiLangBots = competitiveBots.filter(bot => bot.languages.length > 1);\n    return multiLangBots[Math.floor(Math.random() * multiLangBots.length)];\n  }\n  return languageBots[Math.floor(Math.random() * languageBots.length)];\n}\n","size_bytes":17811},"client/src/components/InstallPrompt.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, Share, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\nexport default function InstallPrompt() {\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isIOS, setIsIOS] = useState(false);\n  const [isAndroid, setIsAndroid] = useState(false);\n\n  useEffect(() => {\n    // Check if user is on mobile\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    \n    // Check if already running as installed app (standalone mode)\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches ||\n                        (window.navigator as any).standalone === true;\n    \n    // Check if user dismissed the prompt before\n    const wasDismissed = localStorage.getItem('installPromptDismissed') === 'true';\n    \n    // Detect iOS or Android\n    const ios = /iPhone|iPad|iPod/i.test(navigator.userAgent);\n    const android = /Android/i.test(navigator.userAgent);\n    \n    setIsIOS(ios);\n    setIsAndroid(android);\n    \n    // Show prompt only if: mobile, not standalone, and not previously dismissed\n    if (isMobile && !isStandalone && !wasDismissed) {\n      // Check if user is a new user (hasn't seen How to Play dialog yet)\n      const hasSeenHowToPlay = localStorage.getItem('hasSeenHowToPlay') === 'true';\n      \n      if (hasSeenHowToPlay) {\n        // Existing user - show prompt after short delay\n        setTimeout(() => setShowPrompt(true), 2000);\n      } else {\n        // New user - wait longer to allow other dialogs to show first\n        // Check periodically if How to Play dialog has been seen\n        let hasShown = false;\n        const checkInterval = setInterval(() => {\n          const nowHasSeen = localStorage.getItem('hasSeenHowToPlay') === 'true';\n          if (nowHasSeen && !hasShown) {\n            hasShown = true;\n            clearInterval(checkInterval);\n            // Show install prompt after How to Play dialog is dismissed\n            setTimeout(() => setShowPrompt(true), 1000);\n          }\n        }, 500);\n        \n        // Fallback: show after 15 seconds even if How to Play isn't dismissed\n        const fallbackTimeout = setTimeout(() => {\n          clearInterval(checkInterval);\n          if (!hasShown) {\n            hasShown = true;\n            setShowPrompt(true);\n          }\n        }, 15000);\n        \n        return () => {\n          clearInterval(checkInterval);\n          clearTimeout(fallbackTimeout);\n        };\n      }\n    }\n  }, []);\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    localStorage.setItem('installPromptDismissed', 'true');\n  };\n\n  if (!showPrompt) return null;\n\n  return (\n    <div className=\"fixed bottom-4 left-4 right-4 z-50 md:hidden\">\n      <Card className=\"p-4 shadow-lg border-primary/30 bg-card/95 backdrop-blur\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-sm mb-2\">Install Verbio as an App</h3>\n            <p className=\"text-xs text-muted-foreground mb-3\">\n              Get the best experience! Add Verbio to your home screen for quick access.\n            </p>\n            \n            {isIOS && (\n              <div className=\"space-y-2 text-xs text-muted-foreground\">\n                <div className=\"flex items-center gap-2\">\n                  <Share className=\"w-4 h-4 text-primary\" />\n                  <span>Tap the Share button</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Plus className=\"w-4 h-4 text-primary\" />\n                  <span>Select \"Add to Home Screen\"</span>\n                </div>\n              </div>\n            )}\n            \n            {isAndroid && (\n              <div className=\"space-y-2 text-xs text-muted-foreground\">\n                <div className=\"flex items-center gap-2\">\n                  <Plus className=\"w-4 h-4 text-primary\" />\n                  <span>Tap menu (⋮) → \"Add to Home screen\"</span>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"h-6 w-6 flex-shrink-0\"\n            onClick={handleDismiss}\n            data-testid=\"button-dismiss-install-prompt\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4469},"client/src/components/LevelUpDialog.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trophy, Star, Sparkles } from \"lucide-react\";\nimport { FluencyLevelInfo } from \"@shared/fluencyLevels\";\n\ninterface LevelUpDialogProps {\n  open: boolean;\n  onClose: () => void;\n  newLevel: FluencyLevelInfo;\n  oldLevel: FluencyLevelInfo;\n}\n\nexport default function LevelUpDialog({ open, onClose, newLevel, oldLevel }: LevelUpDialogProps) {\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-level-up\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">\n            <div className=\"flex flex-col items-center gap-4\">\n              <div className=\"relative\">\n                <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-highlight to-accent flex items-center justify-center animate-pulse\">\n                  <Trophy className=\"w-10 h-10 text-highlight-foreground\" />\n                </div>\n                <div className=\"absolute -top-1 -right-1\">\n                  <Sparkles className=\"w-6 h-6 text-highlight animate-bounce\" />\n                </div>\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold mb-1\">Level Up!</h2>\n                <p className=\"text-sm text-muted-foreground font-normal\">\n                  Congratulations on your progress\n                </p>\n              </div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6 py-4\">\n          {/* Level Progression */}\n          <div className=\"flex items-center justify-center gap-4\">\n            <div className=\"text-center\">\n              <Badge variant=\"outline\" className=\"mb-2 text-base px-3 py-1\">\n                {oldLevel.level}\n              </Badge>\n              <p className=\"text-xs text-muted-foreground\">{oldLevel.name}</p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-px w-8 bg-border\"></div>\n              <Star className=\"w-5 h-5 text-highlight\" />\n              <div className=\"h-px w-8 bg-border\"></div>\n            </div>\n            \n            <div className=\"text-center\">\n              <Badge \n                className=\"mb-2 text-base px-3 py-1\"\n                style={{ \n                  backgroundColor: 'hsl(var(--highlight))', \n                  color: 'hsl(var(--highlight-foreground))' \n                }}\n              >\n                {newLevel.level}\n              </Badge>\n              <p className=\"text-xs text-muted-foreground\">{newLevel.name}</p>\n            </div>\n          </div>\n\n          {/* New Level Info */}\n          <div className=\"bg-muted/50 rounded-lg p-4 text-center\">\n            <h3 className=\"font-semibold mb-2\">{newLevel.name} Level</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {newLevel.description}\n            </p>\n          </div>\n\n          {/* Action Button */}\n          <Button\n            className=\"w-full\"\n            onClick={onClose}\n            data-testid=\"button-level-up-continue\"\n          >\n            Continue Learning\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3357},"shared/fluencyLevels.ts":{"content":"export type FluencyLevel = \"A1\" | \"A2\" | \"B1\" | \"B2\" | \"C1\" | \"C2\";\n\nexport interface FluencyLevelInfo {\n  level: FluencyLevel;\n  name: string;\n  description: string;\n  minElo: number;\n  maxElo: number;\n  color: string;\n}\n\nexport const FLUENCY_LEVELS: Record<FluencyLevel, FluencyLevelInfo> = {\n  A1: {\n    level: \"A1\",\n    name: \"Beginner\",\n    description: \"Can understand and use familiar everyday expressions\",\n    minElo: 0,\n    maxElo: 899,\n    color: \"text-gray-500\"\n  },\n  A2: {\n    level: \"A2\",\n    name: \"Elementary\",\n    description: \"Can communicate in simple routine tasks\",\n    minElo: 900,\n    maxElo: 1099,\n    color: \"text-blue-500\"\n  },\n  B1: {\n    level: \"B1\",\n    name: \"Intermediate\",\n    description: \"Can deal with most situations while traveling\",\n    minElo: 1100,\n    maxElo: 1299,\n    color: \"text-green-500\"\n  },\n  B2: {\n    level: \"B2\",\n    name: \"Upper Intermediate\",\n    description: \"Can interact with fluency and spontaneity\",\n    minElo: 1300,\n    maxElo: 1499,\n    color: \"text-yellow-500\"\n  },\n  C1: {\n    level: \"C1\",\n    name: \"Advanced\",\n    description: \"Can express ideas fluently and spontaneously\",\n    minElo: 1500,\n    maxElo: 1699,\n    color: \"text-orange-500\"\n  },\n  C2: {\n    level: \"C2\",\n    name: \"Mastery\",\n    description: \"Can understand virtually everything with ease\",\n    minElo: 1700,\n    maxElo: Infinity,\n    color: \"text-purple-500\"\n  }\n};\n\n/**\n * Get fluency level based on ELO rating\n */\nexport function getFluencyLevel(elo: number): FluencyLevelInfo {\n  if (elo >= FLUENCY_LEVELS.C2.minElo) return FLUENCY_LEVELS.C2;\n  if (elo >= FLUENCY_LEVELS.C1.minElo) return FLUENCY_LEVELS.C1;\n  if (elo >= FLUENCY_LEVELS.B2.minElo) return FLUENCY_LEVELS.B2;\n  if (elo >= FLUENCY_LEVELS.B1.minElo) return FLUENCY_LEVELS.B1;\n  if (elo >= FLUENCY_LEVELS.A2.minElo) return FLUENCY_LEVELS.A2;\n  return FLUENCY_LEVELS.A1;\n}\n\n/**\n * Check if user leveled up based on old and new ELO\n */\nexport function checkLevelUp(oldElo: number, newElo: number): { \n  leveledUp: boolean; \n  oldLevel?: FluencyLevelInfo; \n  newLevel?: FluencyLevelInfo;\n} {\n  const oldLevel = getFluencyLevel(oldElo);\n  const newLevel = getFluencyLevel(newElo);\n  \n  if (oldLevel.level !== newLevel.level) {\n    return {\n      leveledUp: true,\n      oldLevel,\n      newLevel\n    };\n  }\n  \n  return { leveledUp: false };\n}\n\n/**\n * Get progress to next level (0-100%)\n */\nexport function getProgressToNextLevel(elo: number): number {\n  const currentLevel = getFluencyLevel(elo);\n  \n  // If at max level, return 100%\n  if (currentLevel.level === \"C2\") return 100;\n  \n  const range = currentLevel.maxElo - currentLevel.minElo + 1;\n  const progress = elo - currentLevel.minElo;\n  \n  return Math.min(100, Math.round((progress / range) * 100));\n}\n","size_bytes":2753},"client/src/components/InitialLevelDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { BookOpen, MessageCircle, Award } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface InitialLevelDialogProps {\n  open: boolean;\n  language: string;\n  onComplete: (selectedElo?: number) => void;\n  isGuestMode?: boolean;\n}\n\nconst levelOptions = [\n  {\n    id: \"beginner\",\n    title: \"New Learner\",\n    description: \"Just starting with the language\",\n    elo: 700,\n    icon: BookOpen,\n    color: \"text-blue-500\"\n  },\n  {\n    id: \"conversational\",\n    title: \"Conversational\",\n    description: \"Can hold basic conversations\",\n    elo: 1000,\n    icon: MessageCircle,\n    color: \"text-green-500\"\n  },\n  {\n    id: \"advanced\",\n    title: \"Advanced\",\n    description: \"Comfortable with complex topics\",\n    elo: 1300,\n    icon: Award,\n    color: \"text-purple-500\"\n  }\n];\n\nexport default function InitialLevelDialog({ open, language, onComplete, isGuestMode = false }: InitialLevelDialogProps) {\n  const [selectedLevel, setSelectedLevel] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const setInitialLevelMutation = useMutation({\n    mutationFn: async (elo: number) => {\n      return apiRequest(\"POST\", \"/api/user/set-initial-level\", { language, elo });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Level Set!\",\n        description: `Your starting level for ${language} has been set.`\n      });\n      onComplete();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to set initial level. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleConfirm = () => {\n    const level = levelOptions.find(l => l.id === selectedLevel);\n    if (level) {\n      if (isGuestMode) {\n        // For guests, just call onComplete with the selected ELO\n        toast({\n          title: \"Level Set!\",\n          description: `Your starting level for ${language} has been set.`\n        });\n        onComplete(level.elo);\n      } else {\n        // For authenticated users, make API call\n        setInitialLevelMutation.mutate(level.elo);\n      }\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}}>\n      <DialogContent className=\"sm:max-w-md\" onInteractOutside={(e) => e.preventDefault()}>\n        <DialogHeader>\n          <DialogTitle>Choose Your Starting Level</DialogTitle>\n          <DialogDescription>\n            Select your current proficiency in {language} to get matched with appropriate opponents\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-3 py-4\">\n          {levelOptions.map((level) => {\n            const Icon = level.icon;\n            const isSelected = selectedLevel === level.id;\n            \n            return (\n              <Card\n                key={level.id}\n                className={`p-4 cursor-pointer transition-all hover-elevate ${\n                  isSelected ? 'ring-2 ring-primary' : ''\n                }`}\n                onClick={() => setSelectedLevel(level.id)}\n                data-testid={`card-level-${level.id}`}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className={`w-10 h-10 rounded-md bg-muted flex items-center justify-center ${level.color}`}>\n                    <Icon className=\"w-5 h-5\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-sm\">{level.title}</h3>\n                    <p className=\"text-xs text-muted-foreground mt-0.5\">{level.description}</p>\n                  </div>\n                  {isSelected && (\n                    <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-primary-foreground\" />\n                    </div>\n                  )}\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n\n        <Button\n          onClick={handleConfirm}\n          disabled={!selectedLevel || setInitialLevelMutation.isPending}\n          className=\"w-full\"\n          data-testid=\"button-confirm-level\"\n        >\n          {setInitialLevelMutation.isPending ? \"Setting Level...\" : \"Continue\"}\n        </Button>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4594},"client/src/components/InitialLanguageDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Globe } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface InitialLanguageDialogProps {\n  open: boolean;\n  onComplete: (language: string) => void;\n}\n\nconst languageOptions = [\n  {\n    id: \"Chinese\",\n    name: \"Chinese\",\n    nativeName: \"中文\",\n    flag: \"🇨🇳\",\n    description: \"Learn Mandarin Chinese\"\n  },\n  {\n    id: \"Spanish\",\n    name: \"Spanish\",\n    nativeName: \"Español\",\n    flag: \"🇪🇸\",\n    description: \"Learn Spanish\"\n  },\n  {\n    id: \"Italian\",\n    name: \"Italian\",\n    nativeName: \"Italiano\",\n    flag: \"🇮🇹\",\n    description: \"Learn Italian\"\n  }\n];\n\nexport default function InitialLanguageDialog({ open, onComplete }: InitialLanguageDialogProps) {\n  const [selectedLanguage, setSelectedLanguage] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handleConfirm = () => {\n    if (selectedLanguage) {\n      toast({\n        title: \"Language Selected!\",\n        description: `You've chosen to learn ${selectedLanguage}.`\n      });\n      onComplete(selectedLanguage);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}}>\n      <DialogContent className=\"sm:max-w-md\" onInteractOutside={(e) => e.preventDefault()}>\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Globe className=\"w-5 h-5\" />\n            Choose Your Language\n          </DialogTitle>\n          <DialogDescription>\n            Select the language you want to learn\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-3 py-4\">\n          {languageOptions.map((language) => {\n            const isSelected = selectedLanguage === language.id;\n            \n            return (\n              <Card\n                key={language.id}\n                className={`p-4 cursor-pointer transition-all hover-elevate ${\n                  isSelected ? 'ring-2 ring-primary' : ''\n                }`}\n                onClick={() => setSelectedLanguage(language.id)}\n                data-testid={`card-language-${language.id.toLowerCase()}`}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"text-3xl\">\n                    {language.flag}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-sm\">\n                      {language.name} <span className=\"text-muted-foreground\">({language.nativeName})</span>\n                    </h3>\n                    <p className=\"text-xs text-muted-foreground mt-0.5\">{language.description}</p>\n                  </div>\n                  {isSelected && (\n                    <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-primary-foreground\" />\n                    </div>\n                  )}\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n\n        <Button\n          onClick={handleConfirm}\n          disabled={!selectedLanguage}\n          className=\"w-full\"\n          data-testid=\"button-confirm-language\"\n        >\n          Continue\n        </Button>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3479},"client/src/components/HowToPlayDialog.tsx":{"content":"import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageCircle, Settings, ArrowRightLeft, BookOpen, Clock, Trophy } from \"lucide-react\";\n\ninterface HowToPlayDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function HowToPlayDialog({ open, onClose }: HowToPlayDialogProps) {\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-how-to-play\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5 text-primary\" />\n            How to Play\n          </DialogTitle>\n          <DialogDescription>\n            Learn a language through conversation battles\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-3 py-4\">\n          {/* Step 1: Setup */}\n          <div className=\"flex gap-3\">\n            <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n              <Settings className=\"w-4 h-4 text-primary\" />\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold text-sm mb-1\">1. Choose Your Setup</h4>\n              <p className=\"text-xs text-muted-foreground\">Select Practice (learn) or Competitive (ranked), pick your language, and difficulty level</p>\n            </div>\n          </div>\n\n          {/* Step 2: Question Phase */}\n          <div className=\"flex gap-3\">\n            <div className=\"w-8 h-8 rounded-full bg-blue-500/10 flex items-center justify-center flex-shrink-0\">\n              <ArrowRightLeft className=\"w-4 h-4 text-blue-500\" />\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold text-sm mb-1\">2. Question & Answer Phases</h4>\n              <p className=\"text-xs text-muted-foreground mb-2\">Take turns asking and answering questions</p>\n              <div className=\"space-y-2 pl-0\">\n                <div className=\"flex items-start gap-2\">\n                  <div className=\"w-5 h-5 rounded bg-blue-500/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-[10px] font-bold text-blue-500\">Q</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground flex-1\"><strong>Question Phase:</strong> Your opponent asks you a question</p>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <div className=\"w-5 h-5 rounded bg-green-500/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-[10px] font-bold text-green-500\">A</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground flex-1\"><strong>Answer Phase:</strong> You respond using vocabulary words, then ask a question back</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Step 3: Vocabulary */}\n          <div className=\"flex gap-3\">\n            <div className=\"w-8 h-8 rounded-full bg-orange-500/10 flex items-center justify-center flex-shrink-0\">\n              <BookOpen className=\"w-4 h-4 text-orange-500\" />\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold text-sm mb-1\">3. Use Vocabulary Words</h4>\n              <p className=\"text-xs text-muted-foreground\">Type the provided words in your answers - they highlight when recognized</p>\n            </div>\n          </div>\n\n          {/* Step 4: Time */}\n          <div className=\"flex gap-3\">\n            <div className=\"w-8 h-8 rounded-full bg-yellow-500/10 flex items-center justify-center flex-shrink-0\">\n              <Clock className=\"w-4 h-4 text-yellow-500\" />\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold text-sm mb-1\">4. Beat the Clock</h4>\n              <p className=\"text-xs text-muted-foreground\">Answer within the time limit to score points</p>\n            </div>\n          </div>\n\n          {/* Step 5: Win */}\n          <div className=\"flex gap-3\">\n            <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n              <Trophy className=\"w-4 h-4 text-primary\" />\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold text-sm mb-1\">5. Win & Rank Up</h4>\n              <p className=\"text-xs text-muted-foreground\">Score more points to win and increase your Fluency Score</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end pt-2\">\n          <Button onClick={onClose} data-testid=\"button-close-how-to-play\">\n            Got it!\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4955}},"version":2}